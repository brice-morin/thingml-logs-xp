thing BreakoutGameGo includes BreakoutGame @go_import `os` @go_import `time` @go_import `runtime` {
	function quit() @monitor `not` do
	`runtime.GC();`
		println ">done in " , stopTime - startTime , "ms!"
		println ">lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
		println ">usedMem:" , usedMemory()
	`os.Exit(0);`
	end
	function timestamp() : UInt32 @monitor `not` return `uint32(time.Now().UnixNano() / int64(time.Millisecond))` as UInt32
	function usedMemory() : UInt32 @monitor `not` do
	`runtime.GC();`
	`var m runtime.MemStats
		runtime.ReadMemStats(&m)`
		return `m.HeapAlloc` as UInt32
	end
	function unsetBit(variable : UInt8, bit : UInt8) : UInt8 @id `0` return (`` & variable & ` & ^(1 << ` & bit & `)`) as UInt8
}
thing fragment BreakoutGame includes TimerMsgs , DisplayMsgs , ControllerMsgs , IAControllerMsg , WithBinaryLog @monitor `functions` @monitor `properties` @monitor `events` @id `0` {
	message lostBall()
	@id `1`
	message nextLevel()
	@id `2`
	required port clock @id `1` {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	optional required port display @sync_send `true` @id `2` {
		sends create sends fillRect sends drawRect sends clear sends setColor sends setBGColor sends drawInteger sends update sends drawThingML receives displayReady
	}
	required port controller @id `3` {
		receives position
	}
	provided port ia @id `4` {
		sends updateIA
	}
	internal port game @id `5` {
		sends lostBall sends nextLevel receives lostBall receives nextLevel
	}
	optional required port req_game @id `6` {
		sends lostBall sends nextLevel
	}
	provided port pro_game @id `7` {
		receives lostBall receives nextLevel
	}
	readonly property QUIET : Boolean = true @monitor `not`
	property startTime : UInt32 @monitor `not`
	property stopTime : UInt32 @monitor `not`
	property lastTimestamp : UInt32 = 0 @monitor `not`
	property counter : UInt8 = 0 @monitor `not`
	readonly property XDISPSIZE : UInt8 = 160 @id `0`
	readonly property YDISPSIZE : UInt8 = 128 @id `1`
	readonly property SCALE : Int16 = 64 @id `2`
	readonly property XMAX : Int16 = XDISPSIZE as Int16 * SCALE @id `3`
	readonly property YMAX : Int16 = YDISPSIZE as Int16 * SCALE @id `4`
	readonly property TOP : Int16 = 14 * SCALE @id `5`
	readonly property BOTTOM : Int16 = YMAX + 8 * SCALE @id `6`
	readonly property LEFT : Int16 = 1 * SCALE @id `7`
	readonly property RIGHT : Int16 = XMAX - 1 * SCALE @id `8`
	readonly property br : Int16 = 3 * SCALE @id `9`
	property bx : Int16 = XMAX / 2 @id `10`
	property by : Int16 = YMAX @id `11`
	property dx : Int16 = XMAX / 98 @id `12`
	property dy : Int16 = -XMAX / 65 @id `13`
	property padx : Int16 = YMAX / 2 @id `14`
	property pady : Int16 = YMAX - 6 * SCALE @id `15`
	property padlen : Int16 = 25 * SCALE @id `16`
	property prevBX : Int16 = -1 @id `17`
	property prevBY : Int16 = -1 @id `18`
	property bgcolor : UInt8 [ 3 ] @id `19`
	property fgcolor : UInt8 [ 3 ] @id `20`
	readonly property period : UInt16 = 3 @id `21`
	property prevPX : Int16 = -1 @id `22`
	property prevPY : Int16 = -1 @id `23`
	readonly property BRICK_ROWS : UInt8 = 5 @id `24`
	readonly property BRICK_HEIGHT : UInt8 = 9 @id `25`
	property bricks : UInt8 [ BRICK_ROWS ] @id `26`
	property score : Int16 = 0 @id `27`
	property lives : UInt8 = 3 @id `28`
	property level : UInt8 = 1 @id `29`
	abstract function quit() @monitor `not`

	abstract function timestamp() : UInt32 @monitor `not`

	abstract function usedMemory() : UInt32 @monitor `not`

	function log(logMem : Boolean) @monitor `not` do
		if (counter == 0 or logMem) do
			var ts : UInt32
			if (lastTimestamp == 0) do
				ts = 0
				lastTimestamp = timestamp()
			end
			else do
				var t : UInt32 = timestamp()
				ts = t - lastTimestamp
				lastTimestamp = t
			end
			if (not QUIET) do
				println "ts:" , ts , ",lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
				println "#usedMem:" , usedMemory()
			end
		end
		counter ++
		if (counter == 33) counter = 0
	end
	function initColors() @id `1` do
		var initColors_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		bgcolor[0] = 53
		bgcolor[1] = 40
		bgcolor[2] = 120
		fgcolor[0] = 107
		fgcolor[1] = 94
		fgcolor[2] = 174
		do
			readonly var r_1192 : UInt8 = bgcolor [0]
			readonly var g_1193 : UInt8 = bgcolor [1]
			readonly var b_1194 : UInt8 = bgcolor [2]
			display!setBGColor(r_1192, g_1193, b_1194)
			var setBGColorsent_log_1195 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setBGColorsent_log_1195[0] = LogType : message_sent
			setBGColorsent_log_1195[1] = DEBUG_BIN_ID
			setBGColorsent_log_1195[2] = 0x02
			setBGColorsent_log_1195[3] = 0x08
			setBGColorsent_log_1195[4] = r_1192 as Byte
			setBGColorsent_log_1195[5] = g_1193 as Byte
			setBGColorsent_log_1195[6] = b_1194 as Byte
			log!log(setBGColorsent_log_1195, 7)
		end
		do
			readonly var r_1196 : UInt8 = fgcolor [0]
			readonly var g_1197 : UInt8 = fgcolor [1]
			readonly var b_1198 : UInt8 = fgcolor [2]
			display!setColor(r_1196, g_1197, b_1198)
			var setColorsent_log_1199 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1199[0] = LogType : message_sent
			setColorsent_log_1199[1] = DEBUG_BIN_ID
			setColorsent_log_1199[2] = 0x02
			setColorsent_log_1199[3] = 0x07
			setColorsent_log_1199[4] = r_1196 as Byte
			setColorsent_log_1199[5] = g_1197 as Byte
			setColorsent_log_1199[6] = b_1198 as Byte
			log!log(setColorsent_log_1199, 7)
		end
		do
			initColors_log[0] = LogType : function_called
			initColors_log[1] = DEBUG_BIN_ID
			initColors_log[2] = 0x01
			initColors_log[3] = 0x00
			log!log(initColors_log, 4)
		end
	end
	function resetBall() @id `2` do
		var resetBall_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var old_bx_1 : Int16 = bx
			bx = padx - br / SCALE
			readonly var new_bx_1 : Int16 = bx
			var bx_log_1 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			bx_log_1[0] = LogType : property_changed
			bx_log_1[1] = DEBUG_BIN_ID
			bx_log_1[2] = 0x0A
			bx_log_1[3] = (`((` & old_bx_1 & ` >> 8) & 0xFF)`) as Byte
			bx_log_1[4] = (`((` & old_bx_1 & ` >> 0) & 0xFF)`) as Byte
			bx_log_1[5] = (`((` & new_bx_1 & ` >> 8) & 0xFF)`) as Byte
			bx_log_1[6] = (`((` & new_bx_1 & ` >> 0) & 0xFF)`) as Byte
			log!log(bx_log_1, 7)
		end
		do
			readonly var old_by_10 : Int16 = by
			by = pady - br / SCALE
			readonly var new_by_10 : Int16 = by
			var by_log_10 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			by_log_10[0] = LogType : property_changed
			by_log_10[1] = DEBUG_BIN_ID
			by_log_10[2] = 0x0B
			by_log_10[3] = (`((` & old_by_10 & ` >> 8) & 0xFF)`) as Byte
			by_log_10[4] = (`((` & old_by_10 & ` >> 0) & 0xFF)`) as Byte
			by_log_10[5] = (`((` & new_by_10 & ` >> 8) & 0xFF)`) as Byte
			by_log_10[6] = (`((` & new_by_10 & ` >> 0) & 0xFF)`) as Byte
			log!log(by_log_10, 7)
		end
		do
			readonly var old_dx_5 : Int16 = dx
			dx = (padx + prevBX + prevBY) % 300 - 150
			readonly var new_dx_5 : Int16 = dx
			var dx_log_5 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			dx_log_5[0] = LogType : property_changed
			dx_log_5[1] = DEBUG_BIN_ID
			dx_log_5[2] = 0x0C
			dx_log_5[3] = (`((` & old_dx_5 & ` >> 8) & 0xFF)`) as Byte
			dx_log_5[4] = (`((` & old_dx_5 & ` >> 0) & 0xFF)`) as Byte
			dx_log_5[5] = (`((` & new_dx_5 & ` >> 8) & 0xFF)`) as Byte
			dx_log_5[6] = (`((` & new_dx_5 & ` >> 0) & 0xFF)`) as Byte
			log!log(dx_log_5, 7)
		end
		if (dy > 0) do
			readonly var old_dy_26 : Int16 = dy
			dy = -dy
			readonly var new_dy_26 : Int16 = dy
			var dy_log_26 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			dy_log_26[0] = LogType : property_changed
			dy_log_26[1] = DEBUG_BIN_ID
			dy_log_26[2] = 0x0D
			dy_log_26[3] = (`((` & old_dy_26 & ` >> 8) & 0xFF)`) as Byte
			dy_log_26[4] = (`((` & old_dy_26 & ` >> 0) & 0xFF)`) as Byte
			dy_log_26[5] = (`((` & new_dy_26 & ` >> 8) & 0xFF)`) as Byte
			dy_log_26[6] = (`((` & new_dy_26 & ` >> 0) & 0xFF)`) as Byte
			log!log(dy_log_26, 7)
		end
		do
			readonly var old_prevBX_23 : Int16 = prevBX
			prevBX = -1
			readonly var new_prevBX_23 : Int16 = prevBX
			var prevBX_log_23 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBX_log_23[0] = LogType : property_changed
			prevBX_log_23[1] = DEBUG_BIN_ID
			prevBX_log_23[2] = 0x11
			prevBX_log_23[3] = (`((` & old_prevBX_23 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_23[4] = (`((` & old_prevBX_23 & ` >> 0) & 0xFF)`) as Byte
			prevBX_log_23[5] = (`((` & new_prevBX_23 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_23[6] = (`((` & new_prevBX_23 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBX_log_23, 7)
		end
		do
			readonly var old_prevBY_19 : Int16 = prevBY
			prevBY = -1
			readonly var new_prevBY_19 : Int16 = prevBY
			var prevBY_log_19 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBY_log_19[0] = LogType : property_changed
			prevBY_log_19[1] = DEBUG_BIN_ID
			prevBY_log_19[2] = 0x12
			prevBY_log_19[3] = (`((` & old_prevBY_19 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_19[4] = (`((` & old_prevBY_19 & ` >> 0) & 0xFF)`) as Byte
			prevBY_log_19[5] = (`((` & new_prevBY_19 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_19[6] = (`((` & new_prevBY_19 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBY_log_19, 7)
		end
		do
			resetBall_log[0] = LogType : function_called
			resetBall_log[1] = DEBUG_BIN_ID
			resetBall_log[2] = 0x02
			resetBall_log[3] = 0x00
			log!log(resetBall_log, 4)
		end
	end
	function eraseBall() @id `3` do
		var eraseBall_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var bs : Int16 = (br * 2) / SCALE
		if (prevBX > 0) do
			do
				readonly var r_1200 : UInt8 = bgcolor [0]
				readonly var g_1201 : UInt8 = bgcolor [1]
				readonly var b_1202 : UInt8 = bgcolor [2]
				display!setColor(r_1200, g_1201, b_1202)
				var setColorsent_log_1203 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setColorsent_log_1203[0] = LogType : message_sent
				setColorsent_log_1203[1] = DEBUG_BIN_ID
				setColorsent_log_1203[2] = 0x02
				setColorsent_log_1203[3] = 0x07
				setColorsent_log_1203[4] = r_1200 as Byte
				setColorsent_log_1203[5] = g_1201 as Byte
				setColorsent_log_1203[6] = b_1202 as Byte
				log!log(setColorsent_log_1203, 7)
			end
			do
				readonly var x_1204 : UInt8 = prevBX as UInt8
				readonly var y_1205 : UInt8 = prevBY as UInt8
				readonly var width_1206 : UInt8 = bs as UInt8
				readonly var height_1207 : UInt8 = bs as UInt8
				display!fillRect(x_1204, y_1205, width_1206, height_1207)
				var fillRectsent_log_1208 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				fillRectsent_log_1208[0] = LogType : message_sent
				fillRectsent_log_1208[1] = DEBUG_BIN_ID
				fillRectsent_log_1208[2] = 0x02
				fillRectsent_log_1208[3] = 0x0A
				fillRectsent_log_1208[4] = x_1204 as Byte
				fillRectsent_log_1208[5] = y_1205 as Byte
				fillRectsent_log_1208[6] = width_1206 as Byte
				fillRectsent_log_1208[7] = height_1207 as Byte
				log!log(fillRectsent_log_1208, 8)
			end
		end
		do
			readonly var old_prevBX_24 : Int16 = prevBX
			prevBX = -1
			readonly var new_prevBX_24 : Int16 = prevBX
			var prevBX_log_24 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBX_log_24[0] = LogType : property_changed
			prevBX_log_24[1] = DEBUG_BIN_ID
			prevBX_log_24[2] = 0x11
			prevBX_log_24[3] = (`((` & old_prevBX_24 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_24[4] = (`((` & old_prevBX_24 & ` >> 0) & 0xFF)`) as Byte
			prevBX_log_24[5] = (`((` & new_prevBX_24 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_24[6] = (`((` & new_prevBX_24 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBX_log_24, 7)
		end
		do
			readonly var old_prevBY_20 : Int16 = prevBY
			prevBY = -1
			readonly var new_prevBY_20 : Int16 = prevBY
			var prevBY_log_20 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBY_log_20[0] = LogType : property_changed
			prevBY_log_20[1] = DEBUG_BIN_ID
			prevBY_log_20[2] = 0x12
			prevBY_log_20[3] = (`((` & old_prevBY_20 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_20[4] = (`((` & old_prevBY_20 & ` >> 0) & 0xFF)`) as Byte
			prevBY_log_20[5] = (`((` & new_prevBY_20 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_20[6] = (`((` & new_prevBY_20 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBY_log_20, 7)
		end
		do
			eraseBall_log[0] = LogType : function_called
			eraseBall_log[1] = DEBUG_BIN_ID
			eraseBall_log[2] = 0x03
			eraseBall_log[3] = 0x00
			log!log(eraseBall_log, 4)
		end
	end
	function drawBall() @id `4` do
		var drawBall_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var bs : Int16 = (br * 2) / SCALE
		eraseBall()
		do
			readonly var old_prevBX_25 : Int16 = prevBX
			prevBX = (bx - br) / SCALE
			readonly var new_prevBX_25 : Int16 = prevBX
			var prevBX_log_25 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBX_log_25[0] = LogType : property_changed
			prevBX_log_25[1] = DEBUG_BIN_ID
			prevBX_log_25[2] = 0x11
			prevBX_log_25[3] = (`((` & old_prevBX_25 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_25[4] = (`((` & old_prevBX_25 & ` >> 0) & 0xFF)`) as Byte
			prevBX_log_25[5] = (`((` & new_prevBX_25 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_25[6] = (`((` & new_prevBX_25 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBX_log_25, 7)
		end
		do
			readonly var old_prevBY_21 : Int16 = prevBY
			prevBY = (by - br) / SCALE
			readonly var new_prevBY_21 : Int16 = prevBY
			var prevBY_log_21 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBY_log_21[0] = LogType : property_changed
			prevBY_log_21[1] = DEBUG_BIN_ID
			prevBY_log_21[2] = 0x12
			prevBY_log_21[3] = (`((` & old_prevBY_21 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_21[4] = (`((` & old_prevBY_21 & ` >> 0) & 0xFF)`) as Byte
			prevBY_log_21[5] = (`((` & new_prevBY_21 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_21[6] = (`((` & new_prevBY_21 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBY_log_21, 7)
		end
		do
			readonly var r_1209 : UInt8 = 183
			readonly var g_1210 : UInt8 = 199
			readonly var b_1211 : UInt8 = 111
			display!setColor(r_1209, g_1210, b_1211)
			var setColorsent_log_1212 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1212[0] = LogType : message_sent
			setColorsent_log_1212[1] = DEBUG_BIN_ID
			setColorsent_log_1212[2] = 0x02
			setColorsent_log_1212[3] = 0x07
			setColorsent_log_1212[4] = r_1209 as Byte
			setColorsent_log_1212[5] = g_1210 as Byte
			setColorsent_log_1212[6] = b_1211 as Byte
			log!log(setColorsent_log_1212, 7)
		end
		do
			readonly var x_1213 : UInt8 = prevBX as UInt8
			readonly var y_1214 : UInt8 = prevBY as UInt8
			readonly var width_1215 : UInt8 = bs as UInt8
			readonly var height_1216 : UInt8 = bs as UInt8
			display!fillRect(x_1213, y_1214, width_1215, height_1216)
			var fillRectsent_log_1217 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_1217[0] = LogType : message_sent
			fillRectsent_log_1217[1] = DEBUG_BIN_ID
			fillRectsent_log_1217[2] = 0x02
			fillRectsent_log_1217[3] = 0x0A
			fillRectsent_log_1217[4] = x_1213 as Byte
			fillRectsent_log_1217[5] = y_1214 as Byte
			fillRectsent_log_1217[6] = width_1215 as Byte
			fillRectsent_log_1217[7] = height_1216 as Byte
			log!log(fillRectsent_log_1217, 8)
		end
		do
			drawBall_log[0] = LogType : function_called
			drawBall_log[1] = DEBUG_BIN_ID
			drawBall_log[2] = 0x04
			drawBall_log[3] = 0x00
			log!log(drawBall_log, 4)
		end
	end
	function erasePad() @id `5` do
		var erasePad_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var ps : Int16 = padlen / SCALE
		if (prevPX > 0) do
			do
				readonly var r_1218 : UInt8 = bgcolor [0]
				readonly var g_1219 : UInt8 = bgcolor [1]
				readonly var b_1220 : UInt8 = bgcolor [2]
				display!setColor(r_1218, g_1219, b_1220)
				var setColorsent_log_1221 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setColorsent_log_1221[0] = LogType : message_sent
				setColorsent_log_1221[1] = DEBUG_BIN_ID
				setColorsent_log_1221[2] = 0x02
				setColorsent_log_1221[3] = 0x07
				setColorsent_log_1221[4] = r_1218 as Byte
				setColorsent_log_1221[5] = g_1219 as Byte
				setColorsent_log_1221[6] = b_1220 as Byte
				log!log(setColorsent_log_1221, 7)
			end
			do
				readonly var x_1222 : UInt8 = prevPX as UInt8
				readonly var y_1223 : UInt8 = prevPY as UInt8
				readonly var width_1224 : UInt8 = ps as UInt8
				readonly var height_1225 : UInt8 = 4
				display!fillRect(x_1222, y_1223, width_1224, height_1225)
				var fillRectsent_log_1226 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				fillRectsent_log_1226[0] = LogType : message_sent
				fillRectsent_log_1226[1] = DEBUG_BIN_ID
				fillRectsent_log_1226[2] = 0x02
				fillRectsent_log_1226[3] = 0x0A
				fillRectsent_log_1226[4] = x_1222 as Byte
				fillRectsent_log_1226[5] = y_1223 as Byte
				fillRectsent_log_1226[6] = width_1224 as Byte
				fillRectsent_log_1226[7] = height_1225 as Byte
				log!log(fillRectsent_log_1226, 8)
			end
		end
		do
			erasePad_log[0] = LogType : function_called
			erasePad_log[1] = DEBUG_BIN_ID
			erasePad_log[2] = 0x05
			erasePad_log[3] = 0x00
			log!log(erasePad_log, 4)
		end
	end
	function drawPad() @id `6` do
		var drawPad_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var ps : Int16 = padlen / SCALE
		erasePad()
		do
			readonly var old_prevPX_31 : Int16 = prevPX
			prevPX = (padx - (padlen / 2)) / SCALE
			readonly var new_prevPX_31 : Int16 = prevPX
			var prevPX_log_31 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevPX_log_31[0] = LogType : property_changed
			prevPX_log_31[1] = DEBUG_BIN_ID
			prevPX_log_31[2] = 0x16
			prevPX_log_31[3] = (`((` & old_prevPX_31 & ` >> 8) & 0xFF)`) as Byte
			prevPX_log_31[4] = (`((` & old_prevPX_31 & ` >> 0) & 0xFF)`) as Byte
			prevPX_log_31[5] = (`((` & new_prevPX_31 & ` >> 8) & 0xFF)`) as Byte
			prevPX_log_31[6] = (`((` & new_prevPX_31 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevPX_log_31, 7)
		end
		do
			readonly var old_prevPY_9 : Int16 = prevPY
			prevPY = pady / SCALE
			readonly var new_prevPY_9 : Int16 = prevPY
			var prevPY_log_9 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevPY_log_9[0] = LogType : property_changed
			prevPY_log_9[1] = DEBUG_BIN_ID
			prevPY_log_9[2] = 0x17
			prevPY_log_9[3] = (`((` & old_prevPY_9 & ` >> 8) & 0xFF)`) as Byte
			prevPY_log_9[4] = (`((` & old_prevPY_9 & ` >> 0) & 0xFF)`) as Byte
			prevPY_log_9[5] = (`((` & new_prevPY_9 & ` >> 8) & 0xFF)`) as Byte
			prevPY_log_9[6] = (`((` & new_prevPY_9 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevPY_log_9, 7)
		end
		do
			readonly var r_1227 : UInt8 = fgcolor [0]
			readonly var g_1228 : UInt8 = fgcolor [1]
			readonly var b_1229 : UInt8 = fgcolor [2]
			display!setColor(r_1227, g_1228, b_1229)
			var setColorsent_log_1230 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1230[0] = LogType : message_sent
			setColorsent_log_1230[1] = DEBUG_BIN_ID
			setColorsent_log_1230[2] = 0x02
			setColorsent_log_1230[3] = 0x07
			setColorsent_log_1230[4] = r_1227 as Byte
			setColorsent_log_1230[5] = g_1228 as Byte
			setColorsent_log_1230[6] = b_1229 as Byte
			log!log(setColorsent_log_1230, 7)
		end
		do
			readonly var x_1231 : UInt8 = prevPX as UInt8
			readonly var y_1232 : UInt8 = prevPY as UInt8
			readonly var width_1233 : UInt8 = ps as UInt8
			readonly var height_1234 : UInt8 = 4
			display!fillRect(x_1231, y_1232, width_1233, height_1234)
			var fillRectsent_log_1235 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_1235[0] = LogType : message_sent
			fillRectsent_log_1235[1] = DEBUG_BIN_ID
			fillRectsent_log_1235[2] = 0x02
			fillRectsent_log_1235[3] = 0x0A
			fillRectsent_log_1235[4] = x_1231 as Byte
			fillRectsent_log_1235[5] = y_1232 as Byte
			fillRectsent_log_1235[6] = width_1233 as Byte
			fillRectsent_log_1235[7] = height_1234 as Byte
			log!log(fillRectsent_log_1235, 8)
		end
		do
			drawPad_log[0] = LogType : function_called
			drawPad_log[1] = DEBUG_BIN_ID
			drawPad_log[2] = 0x06
			drawPad_log[3] = 0x00
			log!log(drawPad_log, 4)
		end
	end
	function drawCountDown(c : Int16) @id `7` do
		var drawCountDown_log : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
		do
			readonly var r_1236 : UInt8 = fgcolor [0]
			readonly var g_1237 : UInt8 = fgcolor [1]
			readonly var b_1238 : UInt8 = fgcolor [2]
			display!setColor(r_1236, g_1237, b_1238)
			var setColorsent_log_1239 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1239[0] = LogType : message_sent
			setColorsent_log_1239[1] = DEBUG_BIN_ID
			setColorsent_log_1239[2] = 0x02
			setColorsent_log_1239[3] = 0x07
			setColorsent_log_1239[4] = r_1236 as Byte
			setColorsent_log_1239[5] = g_1237 as Byte
			setColorsent_log_1239[6] = b_1238 as Byte
			log!log(setColorsent_log_1239, 7)
		end
		if (c > 0) do
			do
				readonly var r_1240 : UInt8 = fgcolor [0]
				readonly var g_1241 : UInt8 = fgcolor [1]
				readonly var b_1242 : UInt8 = fgcolor [2]
				display!setColor(r_1240, g_1241, b_1242)
				var setColorsent_log_1243 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setColorsent_log_1243[0] = LogType : message_sent
				setColorsent_log_1243[1] = DEBUG_BIN_ID
				setColorsent_log_1243[2] = 0x02
				setColorsent_log_1243[3] = 0x07
				setColorsent_log_1243[4] = r_1240 as Byte
				setColorsent_log_1243[5] = g_1241 as Byte
				setColorsent_log_1243[6] = b_1242 as Byte
				log!log(setColorsent_log_1243, 7)
			end
			do
				readonly var r_1244 : UInt8 = bgcolor [0]
				readonly var g_1245 : UInt8 = bgcolor [1]
				readonly var b_1246 : UInt8 = bgcolor [2]
				display!setBGColor(r_1244, g_1245, b_1246)
				var setBGColorsent_log_1247 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setBGColorsent_log_1247[0] = LogType : message_sent
				setBGColorsent_log_1247[1] = DEBUG_BIN_ID
				setBGColorsent_log_1247[2] = 0x02
				setBGColorsent_log_1247[3] = 0x08
				setBGColorsent_log_1247[4] = r_1244 as Byte
				setBGColorsent_log_1247[5] = g_1245 as Byte
				setBGColorsent_log_1247[6] = b_1246 as Byte
				log!log(setBGColorsent_log_1247, 7)
			end
			do
				readonly var x_1248 : UInt8 = 80 - 6
				readonly var y_1249 : UInt8 = 90
				readonly var v_1250 : Int16 = c
				readonly var digits_1251 : UInt8 = 1
				readonly var scale_1252 : UInt8 = 4
				display!drawInteger(x_1248, y_1249, v_1250, digits_1251, scale_1252)
				var drawIntegersent_log_1253 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				drawIntegersent_log_1253[0] = LogType : message_sent
				drawIntegersent_log_1253[1] = DEBUG_BIN_ID
				drawIntegersent_log_1253[2] = 0x02
				drawIntegersent_log_1253[3] = 0x0B
				drawIntegersent_log_1253[4] = x_1248 as Byte
				drawIntegersent_log_1253[5] = y_1249 as Byte
				drawIntegersent_log_1253[6] = (`((` & v_1250 & ` >> 8) & 0xFF)`) as Byte
				drawIntegersent_log_1253[7] = (`((` & v_1250 & ` >> 0) & 0xFF)`) as Byte
				drawIntegersent_log_1253[7] = digits_1251 as Byte
				drawIntegersent_log_1253[8] = scale_1252 as Byte
				log!log(drawIntegersent_log_1253, 10)
			end
		end
		else do
			do
				readonly var r_1254 : UInt8 = bgcolor [0]
				readonly var g_1255 : UInt8 = bgcolor [1]
				readonly var b_1256 : UInt8 = bgcolor [2]
				display!setColor(r_1254, g_1255, b_1256)
				var setColorsent_log_1257 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setColorsent_log_1257[0] = LogType : message_sent
				setColorsent_log_1257[1] = DEBUG_BIN_ID
				setColorsent_log_1257[2] = 0x02
				setColorsent_log_1257[3] = 0x07
				setColorsent_log_1257[4] = r_1254 as Byte
				setColorsent_log_1257[5] = g_1255 as Byte
				setColorsent_log_1257[6] = b_1256 as Byte
				log!log(setColorsent_log_1257, 7)
			end
			do
				readonly var x_1258 : UInt8 = 80 - 6
				readonly var y_1259 : UInt8 = 90
				readonly var width_1260 : UInt8 = 12
				readonly var height_1261 : UInt8 = 20
				display!fillRect(x_1258, y_1259, width_1260, height_1261)
				var fillRectsent_log_1262 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				fillRectsent_log_1262[0] = LogType : message_sent
				fillRectsent_log_1262[1] = DEBUG_BIN_ID
				fillRectsent_log_1262[2] = 0x02
				fillRectsent_log_1262[3] = 0x0A
				fillRectsent_log_1262[4] = x_1258 as Byte
				fillRectsent_log_1262[5] = y_1259 as Byte
				fillRectsent_log_1262[6] = width_1260 as Byte
				fillRectsent_log_1262[7] = height_1261 as Byte
				log!log(fillRectsent_log_1262, 8)
			end
		end
		do
			drawCountDown_log[0] = LogType : function_called
			drawCountDown_log[1] = DEBUG_BIN_ID
			drawCountDown_log[2] = 0x07
			drawCountDown_log[3] = 0x00
			drawCountDown_log[4] = (`((` & c & ` >> 8) & 0xFF)`) as Byte
			drawCountDown_log[5] = (`((` & c & ` >> 0) & 0xFF)`) as Byte
			log!log(drawCountDown_log, 6)
		end
	end
	function drawWalls() @id `8` do
		var drawWalls_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var r_1263 : UInt8 = fgcolor [0]
			readonly var g_1264 : UInt8 = fgcolor [1]
			readonly var b_1265 : UInt8 = fgcolor [2]
			display!setColor(r_1263, g_1264, b_1265)
			var setColorsent_log_1266 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1266[0] = LogType : message_sent
			setColorsent_log_1266[1] = DEBUG_BIN_ID
			setColorsent_log_1266[2] = 0x02
			setColorsent_log_1266[3] = 0x07
			setColorsent_log_1266[4] = r_1263 as Byte
			setColorsent_log_1266[5] = g_1264 as Byte
			setColorsent_log_1266[6] = b_1265 as Byte
			log!log(setColorsent_log_1266, 7)
		end
		readonly var left : UInt8 = (LEFT / SCALE) as UInt8
		readonly var right : UInt8 = (RIGHT / SCALE) as UInt8
		readonly var top : UInt8 = (TOP / SCALE) as UInt8
		readonly var bottom : UInt8 = (BOTTOM / SCALE) as UInt8
		readonly var xcenter : UInt8 = ((RIGHT - LEFT) / SCALE) as UInt8
		readonly var ycenter : UInt8 = ((BOTTOM - TOP) / SCALE) as UInt8
		do
			readonly var x_1267 : UInt8 = left - 1
			readonly var y_1268 : UInt8 = top - 1
			readonly var width_1269 : UInt8 = xcenter + 1
			readonly var height_1270 : UInt8 = 1
			display!fillRect(x_1267, y_1268, width_1269, height_1270)
			var fillRectsent_log_1271 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_1271[0] = LogType : message_sent
			fillRectsent_log_1271[1] = DEBUG_BIN_ID
			fillRectsent_log_1271[2] = 0x02
			fillRectsent_log_1271[3] = 0x0A
			fillRectsent_log_1271[4] = x_1267 as Byte
			fillRectsent_log_1271[5] = y_1268 as Byte
			fillRectsent_log_1271[6] = width_1269 as Byte
			fillRectsent_log_1271[7] = height_1270 as Byte
			log!log(fillRectsent_log_1271, 8)
		end
		do
			readonly var x_1272 : UInt8 = left - 1
			readonly var y_1273 : UInt8 = bottom
			readonly var width_1274 : UInt8 = xcenter + 1
			readonly var height_1275 : UInt8 = 1
			display!fillRect(x_1272, y_1273, width_1274, height_1275)
			var fillRectsent_log_1276 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_1276[0] = LogType : message_sent
			fillRectsent_log_1276[1] = DEBUG_BIN_ID
			fillRectsent_log_1276[2] = 0x02
			fillRectsent_log_1276[3] = 0x0A
			fillRectsent_log_1276[4] = x_1272 as Byte
			fillRectsent_log_1276[5] = y_1273 as Byte
			fillRectsent_log_1276[6] = width_1274 as Byte
			fillRectsent_log_1276[7] = height_1275 as Byte
			log!log(fillRectsent_log_1276, 8)
		end
		do
			readonly var x_1277 : UInt8 = left - 1
			readonly var y_1278 : UInt8 = top
			readonly var width_1279 : UInt8 = 1
			readonly var height_1280 : UInt8 = ycenter
			display!fillRect(x_1277, y_1278, width_1279, height_1280)
			var fillRectsent_log_1281 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_1281[0] = LogType : message_sent
			fillRectsent_log_1281[1] = DEBUG_BIN_ID
			fillRectsent_log_1281[2] = 0x02
			fillRectsent_log_1281[3] = 0x0A
			fillRectsent_log_1281[4] = x_1277 as Byte
			fillRectsent_log_1281[5] = y_1278 as Byte
			fillRectsent_log_1281[6] = width_1279 as Byte
			fillRectsent_log_1281[7] = height_1280 as Byte
			log!log(fillRectsent_log_1281, 8)
		end
		do
			readonly var x_1282 : UInt8 = right
			readonly var y_1283 : UInt8 = top
			readonly var width_1284 : UInt8 = 1
			readonly var height_1285 : UInt8 = ycenter
			display!fillRect(x_1282, y_1283, width_1284, height_1285)
			var fillRectsent_log_1286 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_1286[0] = LogType : message_sent
			fillRectsent_log_1286[1] = DEBUG_BIN_ID
			fillRectsent_log_1286[2] = 0x02
			fillRectsent_log_1286[3] = 0x0A
			fillRectsent_log_1286[4] = x_1282 as Byte
			fillRectsent_log_1286[5] = y_1283 as Byte
			fillRectsent_log_1286[6] = width_1284 as Byte
			fillRectsent_log_1286[7] = height_1285 as Byte
			log!log(fillRectsent_log_1286, 8)
		end
		do
			drawWalls_log[0] = LogType : function_called
			drawWalls_log[1] = DEBUG_BIN_ID
			drawWalls_log[2] = 0x08
			drawWalls_log[3] = 0x00
			log!log(drawWalls_log, 4)
		end
	end
	function bitIsSet(variable : UInt8, bit : UInt8) : Boolean @id `9` do
		var bitIsSet_log : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
		readonly var return_1 : Boolean = (`((1 << ` & bit & `) & ` & variable & `) != 0`) as Boolean
		do
			bitIsSet_log[0] = LogType : function_called
			bitIsSet_log[1] = DEBUG_BIN_ID
			bitIsSet_log[2] = 0x09
			bitIsSet_log[3] = 0x04
			bitIsSet_log[4] = variable as Byte
			var return_1_byte : Byte = 0
			if (return_1) return_1_byte = 1
			bitIsSet_log[6] = return_1_byte
			bitIsSet_log[5] = bit as Byte
		end
		log!log(bitIsSet_log, 7)
		return return_1
	end
	abstract function unsetBit(variable : UInt8, bit : UInt8) : UInt8

	function createBricks() @id `10` do
		var createBricks_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			bricks[y] = 0xFF
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					drawBrick(x, y)
				end
				x = x + 1
			end
			y = y + 1
		end
		do
			createBricks_log[0] = LogType : function_called
			createBricks_log[1] = DEBUG_BIN_ID
			createBricks_log[2] = 0x0A
			createBricks_log[3] = 0x00
			log!log(createBricks_log, 4)
		end
	end
	function bricksLeft() : UInt8 @id `11` do
		var bricksLeft_log : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
		var result : UInt8 = 0
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					result = result + 1
				end
				x = x + 1
			end
			y = y + 1
		end
		readonly var return_4 : UInt8 = result
		do
			bricksLeft_log[0] = LogType : function_called
			bricksLeft_log[1] = DEBUG_BIN_ID
			bricksLeft_log[2] = 0x0B
			bricksLeft_log[4] = return_4 as Byte
			bricksLeft_log[3] = 0x05
		end
		log!log(bricksLeft_log, 5)
		return return_4
	end
	function drawBrick(x : UInt8, y : UInt8) @id `12` do
		var drawBrick_log : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		readonly var w : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
		readonly var h : UInt8 = (BRICK_HEIGHT - 2) as UInt8
		do
			readonly var r_1287 : UInt8 = 155
			readonly var g_1288 : UInt8 = 103
			readonly var b_1289 : UInt8 = 89
			display!setColor(r_1287, g_1288, b_1289)
			var setColorsent_log_1290 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1290[0] = LogType : message_sent
			setColorsent_log_1290[1] = DEBUG_BIN_ID
			setColorsent_log_1290[2] = 0x02
			setColorsent_log_1290[3] = 0x07
			setColorsent_log_1290[4] = r_1287 as Byte
			setColorsent_log_1290[5] = g_1288 as Byte
			setColorsent_log_1290[6] = b_1289 as Byte
			log!log(setColorsent_log_1290, 7)
		end
		do
			readonly var x_1291 : UInt8 = bx
			readonly var y_1292 : UInt8 = by
			readonly var width_1293 : UInt8 = w
			readonly var height_1294 : UInt8 = h
			display!fillRect(x_1291, y_1292, width_1293, height_1294)
			var fillRectsent_log_1295 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_1295[0] = LogType : message_sent
			fillRectsent_log_1295[1] = DEBUG_BIN_ID
			fillRectsent_log_1295[2] = 0x02
			fillRectsent_log_1295[3] = 0x0A
			fillRectsent_log_1295[4] = x_1291 as Byte
			fillRectsent_log_1295[5] = y_1292 as Byte
			fillRectsent_log_1295[6] = width_1293 as Byte
			fillRectsent_log_1295[7] = height_1294 as Byte
			log!log(fillRectsent_log_1295, 8)
		end
		do
			readonly var r_1296 : UInt8 = 100
			readonly var g_1297 : UInt8 = 56
			readonly var b_1298 : UInt8 = 43
			display!setColor(r_1296, g_1297, b_1298)
			var setColorsent_log_1299 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1299[0] = LogType : message_sent
			setColorsent_log_1299[1] = DEBUG_BIN_ID
			setColorsent_log_1299[2] = 0x02
			setColorsent_log_1299[3] = 0x07
			setColorsent_log_1299[4] = r_1296 as Byte
			setColorsent_log_1299[5] = g_1297 as Byte
			setColorsent_log_1299[6] = b_1298 as Byte
			log!log(setColorsent_log_1299, 7)
		end
		do
			readonly var x_1300 : UInt8 = bx
			readonly var y_1301 : UInt8 = by
			readonly var width_1302 : UInt8 = w
			readonly var height_1303 : UInt8 = h
			display!drawRect(x_1300, y_1301, width_1302, height_1303)
			var drawRectsent_log_1304 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			drawRectsent_log_1304[0] = LogType : message_sent
			drawRectsent_log_1304[1] = DEBUG_BIN_ID
			drawRectsent_log_1304[2] = 0x02
			drawRectsent_log_1304[3] = 0x09
			drawRectsent_log_1304[4] = x_1300 as Byte
			drawRectsent_log_1304[5] = y_1301 as Byte
			drawRectsent_log_1304[6] = width_1302 as Byte
			drawRectsent_log_1304[7] = height_1303 as Byte
			log!log(drawRectsent_log_1304, 8)
		end
		do
			drawBrick_log[0] = LogType : function_called
			drawBrick_log[1] = DEBUG_BIN_ID
			drawBrick_log[2] = 0x0C
			drawBrick_log[3] = 0x00
			drawBrick_log[4] = x as Byte
			drawBrick_log[5] = y as Byte
			log!log(drawBrick_log, 6)
		end
	end
	function removeBrick(x : UInt8, y : UInt8) @id `13` do
		var removeBrick_log : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		do
			readonly var r_1305 : UInt8 = bgcolor [0]
			readonly var g_1306 : UInt8 = bgcolor [1]
			readonly var b_1307 : UInt8 = bgcolor [2]
			display!setColor(r_1305, g_1306, b_1307)
			var setColorsent_log_1308 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1308[0] = LogType : message_sent
			setColorsent_log_1308[1] = DEBUG_BIN_ID
			setColorsent_log_1308[2] = 0x02
			setColorsent_log_1308[3] = 0x07
			setColorsent_log_1308[4] = r_1305 as Byte
			setColorsent_log_1308[5] = g_1306 as Byte
			setColorsent_log_1308[6] = b_1307 as Byte
			log!log(setColorsent_log_1308, 7)
		end
		do
			readonly var x_1309 : UInt8 = bx
			readonly var y_1310 : UInt8 = by
			readonly var width_1311 : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
			readonly var height_1312 : UInt8 = BRICK_HEIGHT - 2
			display!fillRect(x_1309, y_1310, width_1311, height_1312)
			var fillRectsent_log_1313 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_1313[0] = LogType : message_sent
			fillRectsent_log_1313[1] = DEBUG_BIN_ID
			fillRectsent_log_1313[2] = 0x02
			fillRectsent_log_1313[3] = 0x0A
			fillRectsent_log_1313[4] = x_1309 as Byte
			fillRectsent_log_1313[5] = y_1310 as Byte
			fillRectsent_log_1313[6] = width_1311 as Byte
			fillRectsent_log_1313[7] = height_1312 as Byte
			log!log(fillRectsent_log_1313, 8)
		end
		bricks[y] = unsetBit(bricks [y], x)
		do
			removeBrick_log[0] = LogType : function_called
			removeBrick_log[1] = DEBUG_BIN_ID
			removeBrick_log[2] = 0x0D
			removeBrick_log[3] = 0x00
			removeBrick_log[4] = x as Byte
			removeBrick_log[5] = y as Byte
			log!log(removeBrick_log, 6)
		end
	end
	function collideBrick(xpos : Int16, ypos : Int16) : Boolean @id `14` do
		var collideBrick_log : Byte [ 9 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
		var bry : Int16 = (ypos as Int16 - TOP - 20 * SCALE) / (BRICK_HEIGHT as Int16 * SCALE)
		var result : Boolean = false
		if (bry >= 0 and bry < BRICK_ROWS as Int16) do
			var brx : Int16 = (xpos as Int16 - LEFT) / ((RIGHT - LEFT) / 8)
			if (bitIsSet(bricks [bry], brx as UInt8)) do
				removeBrick(brx as UInt8, bry as UInt8)
				result = true
			end
		end
		readonly var return_4 : Boolean = result
		do
			collideBrick_log[0] = LogType : function_called
			collideBrick_log[1] = DEBUG_BIN_ID
			collideBrick_log[2] = 0x0E
			collideBrick_log[3] = 0x04
			collideBrick_log[4] = (`((` & xpos & ` >> 8) & 0xFF)`) as Byte
			collideBrick_log[6] = (`((` & ypos & ` >> 8) & 0xFF)`) as Byte
			collideBrick_log[7] = (`((` & ypos & ` >> 0) & 0xFF)`) as Byte
			var return_4_byte : Byte = 0
			if (return_4) return_4_byte = 1
			collideBrick_log[8] = return_4_byte
			collideBrick_log[5] = (`((` & xpos & ` >> 0) & 0xFF)`) as Byte
		end
		log!log(collideBrick_log, 9)
		return return_4
	end
	function drawLevel() @id `15` do
		var drawLevel_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var r_1314 : UInt8 = 158
			readonly var g_1315 : UInt8 = 209
			readonly var b_1316 : UInt8 = 130
			display!setColor(r_1314, g_1315, b_1316)
			var setColorsent_log_1317 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1317[0] = LogType : message_sent
			setColorsent_log_1317[1] = DEBUG_BIN_ID
			setColorsent_log_1317[2] = 0x02
			setColorsent_log_1317[3] = 0x07
			setColorsent_log_1317[4] = r_1314 as Byte
			setColorsent_log_1317[5] = g_1315 as Byte
			setColorsent_log_1317[6] = b_1316 as Byte
			log!log(setColorsent_log_1317, 7)
		end
		do
			readonly var r_1318 : UInt8 = fgcolor [0]
			readonly var g_1319 : UInt8 = fgcolor [1]
			readonly var b_1320 : UInt8 = fgcolor [2]
			display!setBGColor(r_1318, g_1319, b_1320)
			var setBGColorsent_log_1321 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setBGColorsent_log_1321[0] = LogType : message_sent
			setBGColorsent_log_1321[1] = DEBUG_BIN_ID
			setBGColorsent_log_1321[2] = 0x02
			setBGColorsent_log_1321[3] = 0x08
			setBGColorsent_log_1321[4] = r_1318 as Byte
			setBGColorsent_log_1321[5] = g_1319 as Byte
			setBGColorsent_log_1321[6] = b_1320 as Byte
			log!log(setBGColorsent_log_1321, 7)
		end
		do
			readonly var r_1322 : UInt8 = bgcolor [0]
			readonly var g_1323 : UInt8 = bgcolor [1]
			readonly var b_1324 : UInt8 = bgcolor [2]
			display!setColor(r_1322, g_1323, b_1324)
			var setColorsent_log_1325 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1325[0] = LogType : message_sent
			setColorsent_log_1325[1] = DEBUG_BIN_ID
			setColorsent_log_1325[2] = 0x02
			setColorsent_log_1325[3] = 0x07
			setColorsent_log_1325[4] = r_1322 as Byte
			setColorsent_log_1325[5] = g_1323 as Byte
			setColorsent_log_1325[6] = b_1324 as Byte
			log!log(setColorsent_log_1325, 7)
		end
		do
			readonly var x_1326 : UInt8 = 6
			readonly var y_1327 : UInt8 = 2
			readonly var v_1328 : Int16 = level as Int16
			readonly var digits_1329 : UInt8 = 2
			readonly var scale_1330 : UInt8 = 2
			display!drawInteger(x_1326, y_1327, v_1328, digits_1329, scale_1330)
			var drawIntegersent_log_1331 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			drawIntegersent_log_1331[0] = LogType : message_sent
			drawIntegersent_log_1331[1] = DEBUG_BIN_ID
			drawIntegersent_log_1331[2] = 0x02
			drawIntegersent_log_1331[3] = 0x0B
			drawIntegersent_log_1331[4] = x_1326 as Byte
			drawIntegersent_log_1331[5] = y_1327 as Byte
			drawIntegersent_log_1331[6] = (`((` & v_1328 & ` >> 8) & 0xFF)`) as Byte
			drawIntegersent_log_1331[7] = (`((` & v_1328 & ` >> 0) & 0xFF)`) as Byte
			drawIntegersent_log_1331[7] = digits_1329 as Byte
			drawIntegersent_log_1331[8] = scale_1330 as Byte
			log!log(drawIntegersent_log_1331, 10)
		end
		do
			drawLevel_log[0] = LogType : function_called
			drawLevel_log[1] = DEBUG_BIN_ID
			drawLevel_log[2] = 0x0F
			drawLevel_log[3] = 0x00
			log!log(drawLevel_log, 4)
		end
	end
	function incrementScore(diff : Int8) @id `16` do
		var incrementScore_log : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
		do
			readonly var old_score_14 : Int16 = score
			score = score + diff as Int16
			readonly var new_score_14 : Int16 = score
			var score_log_14 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			score_log_14[0] = LogType : property_changed
			score_log_14[1] = DEBUG_BIN_ID
			score_log_14[2] = 0x1B
			score_log_14[3] = (`((` & old_score_14 & ` >> 8) & 0xFF)`) as Byte
			score_log_14[4] = (`((` & old_score_14 & ` >> 0) & 0xFF)`) as Byte
			score_log_14[5] = (`((` & new_score_14 & ` >> 8) & 0xFF)`) as Byte
			score_log_14[6] = (`((` & new_score_14 & ` >> 0) & 0xFF)`) as Byte
			log!log(score_log_14, 7)
		end
		if (score < 0) do
			readonly var old_score_15 : Int16 = score
			score = 0
			readonly var new_score_15 : Int16 = score
			var score_log_15 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			score_log_15[0] = LogType : property_changed
			score_log_15[1] = DEBUG_BIN_ID
			score_log_15[2] = 0x1B
			score_log_15[3] = (`((` & old_score_15 & ` >> 8) & 0xFF)`) as Byte
			score_log_15[4] = (`((` & old_score_15 & ` >> 0) & 0xFF)`) as Byte
			score_log_15[5] = (`((` & new_score_15 & ` >> 8) & 0xFF)`) as Byte
			score_log_15[6] = (`((` & new_score_15 & ` >> 0) & 0xFF)`) as Byte
			log!log(score_log_15, 7)
		end
		drawScore()
		do
			incrementScore_log[0] = LogType : function_called
			incrementScore_log[1] = DEBUG_BIN_ID
			incrementScore_log[2] = 0x10
			incrementScore_log[3] = 0x00
			incrementScore_log[4] = diff as Byte
			log!log(incrementScore_log, 5)
		end
	end
	function drawScore() @id `17` do
		var drawScore_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var r_1332 : UInt8 = 158
			readonly var g_1333 : UInt8 = 209
			readonly var b_1334 : UInt8 = 130
			display!setColor(r_1332, g_1333, b_1334)
			var setColorsent_log_1335 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1335[0] = LogType : message_sent
			setColorsent_log_1335[1] = DEBUG_BIN_ID
			setColorsent_log_1335[2] = 0x02
			setColorsent_log_1335[3] = 0x07
			setColorsent_log_1335[4] = r_1332 as Byte
			setColorsent_log_1335[5] = g_1333 as Byte
			setColorsent_log_1335[6] = b_1334 as Byte
			log!log(setColorsent_log_1335, 7)
		end
		do
			readonly var r_1336 : UInt8 = fgcolor [0]
			readonly var g_1337 : UInt8 = fgcolor [1]
			readonly var b_1338 : UInt8 = fgcolor [2]
			display!setBGColor(r_1336, g_1337, b_1338)
			var setBGColorsent_log_1339 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setBGColorsent_log_1339[0] = LogType : message_sent
			setBGColorsent_log_1339[1] = DEBUG_BIN_ID
			setBGColorsent_log_1339[2] = 0x02
			setBGColorsent_log_1339[3] = 0x08
			setBGColorsent_log_1339[4] = r_1336 as Byte
			setBGColorsent_log_1339[5] = g_1337 as Byte
			setBGColorsent_log_1339[6] = b_1338 as Byte
			log!log(setBGColorsent_log_1339, 7)
		end
		do
			readonly var x_1340 : UInt8 = 58
			readonly var y_1341 : UInt8 = 2
			readonly var v_1342 : Int16 = score
			readonly var digits_1343 : UInt8 = 5
			readonly var scale_1344 : UInt8 = 2
			display!drawInteger(x_1340, y_1341, v_1342, digits_1343, scale_1344)
			var drawIntegersent_log_1345 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			drawIntegersent_log_1345[0] = LogType : message_sent
			drawIntegersent_log_1345[1] = DEBUG_BIN_ID
			drawIntegersent_log_1345[2] = 0x02
			drawIntegersent_log_1345[3] = 0x0B
			drawIntegersent_log_1345[4] = x_1340 as Byte
			drawIntegersent_log_1345[5] = y_1341 as Byte
			drawIntegersent_log_1345[6] = (`((` & v_1342 & ` >> 8) & 0xFF)`) as Byte
			drawIntegersent_log_1345[7] = (`((` & v_1342 & ` >> 0) & 0xFF)`) as Byte
			drawIntegersent_log_1345[7] = digits_1343 as Byte
			drawIntegersent_log_1345[8] = scale_1344 as Byte
			log!log(drawIntegersent_log_1345, 10)
		end
		do
			drawScore_log[0] = LogType : function_called
			drawScore_log[1] = DEBUG_BIN_ID
			drawScore_log[2] = 0x11
			drawScore_log[3] = 0x00
			log!log(drawScore_log, 4)
		end
	end
	function drawLives() @id `18` do
		var drawLives_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var r_1346 : UInt8 = fgcolor [0]
			readonly var g_1347 : UInt8 = fgcolor [1]
			readonly var b_1348 : UInt8 = fgcolor [2]
			display!setColor(r_1346, g_1347, b_1348)
			var setColorsent_log_1349 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1349[0] = LogType : message_sent
			setColorsent_log_1349[1] = DEBUG_BIN_ID
			setColorsent_log_1349[2] = 0x02
			setColorsent_log_1349[3] = 0x07
			setColorsent_log_1349[4] = r_1346 as Byte
			setColorsent_log_1349[5] = g_1347 as Byte
			setColorsent_log_1349[6] = b_1348 as Byte
			log!log(setColorsent_log_1349, 7)
		end
		do
			readonly var x_1350 : UInt8 = 124
			readonly var y_1351 : UInt8 = 4
			readonly var width_1352 : UInt8 = 24 + 6
			readonly var height_1353 : UInt8 = 6
			display!fillRect(x_1350, y_1351, width_1352, height_1353)
			var fillRectsent_log_1354 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_1354[0] = LogType : message_sent
			fillRectsent_log_1354[1] = DEBUG_BIN_ID
			fillRectsent_log_1354[2] = 0x02
			fillRectsent_log_1354[3] = 0x0A
			fillRectsent_log_1354[4] = x_1350 as Byte
			fillRectsent_log_1354[5] = y_1351 as Byte
			fillRectsent_log_1354[6] = width_1352 as Byte
			fillRectsent_log_1354[7] = height_1353 as Byte
			log!log(fillRectsent_log_1354, 8)
		end
		do
			readonly var r_1355 : UInt8 = 183
			readonly var g_1356 : UInt8 = 199
			readonly var b_1357 : UInt8 = 111
			display!setColor(r_1355, g_1356, b_1357)
			var setColorsent_log_1358 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_1358[0] = LogType : message_sent
			setColorsent_log_1358[1] = DEBUG_BIN_ID
			setColorsent_log_1358[2] = 0x02
			setColorsent_log_1358[3] = 0x07
			setColorsent_log_1358[4] = r_1355 as Byte
			setColorsent_log_1358[5] = g_1356 as Byte
			setColorsent_log_1358[6] = b_1357 as Byte
			log!log(setColorsent_log_1358, 7)
		end
		var i : UInt8 = 0
		while (i < lives) do
			do
				readonly var x_1359 : UInt8 = 124 + (2 - i) * 12
				readonly var y_1360 : UInt8 = 4
				readonly var width_1361 : UInt8 = 6
				readonly var height_1362 : UInt8 = 6
				display!fillRect(x_1359, y_1360, width_1361, height_1362)
				var fillRectsent_log_1363 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				fillRectsent_log_1363[0] = LogType : message_sent
				fillRectsent_log_1363[1] = DEBUG_BIN_ID
				fillRectsent_log_1363[2] = 0x02
				fillRectsent_log_1363[3] = 0x0A
				fillRectsent_log_1363[4] = x_1359 as Byte
				fillRectsent_log_1363[5] = y_1360 as Byte
				fillRectsent_log_1363[6] = width_1361 as Byte
				fillRectsent_log_1363[7] = height_1362 as Byte
				log!log(fillRectsent_log_1363, 8)
			end
			i = i + 1
		end
		do
			drawLives_log[0] = LogType : function_called
			drawLives_log[1] = DEBUG_BIN_ID
			drawLives_log[2] = 0x12
			drawLives_log[3] = 0x00
			log!log(drawLives_log, 4)
		end
	end
	statechart SC init INIT @id `0` {
		state INIT @id `1` {
			on entry do
				startTime = timestamp()
				do
					readonly var xsize_1364 : UInt8 = XDISPSIZE
					readonly var ysize_1365 : UInt8 = YDISPSIZE
					display!create(xsize_1364, ysize_1365)
					var createsent_log_1366 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
					createsent_log_1366[0] = LogType : message_sent
					createsent_log_1366[1] = DEBUG_BIN_ID
					createsent_log_1366[2] = 0x02
					createsent_log_1366[3] = 0x0D
					createsent_log_1366[4] = xsize_1364 as Byte
					createsent_log_1366[5] = ysize_1365 as Byte
					log!log(createsent_log_1366, 6)
				end
			end
			transition -> LAUNCH
			event display?displayReady
			action do
				var displayReadyhandled_log_1465 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				displayReadyhandled_log_1465[0] = LogType : message_handled
				displayReadyhandled_log_1465[1] = DEBUG_BIN_ID
				displayReadyhandled_log_1465[2] = 0x02
				displayReadyhandled_log_1465[3] = 0x10
				displayReadyhandled_log_1465[4] = 0x01
				displayReadyhandled_log_1465[5] = 0x02
				log!log(displayReadyhandled_log_1465, 6)
				do
					do
						display!clear()
						var clearsent_log_1367 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
						clearsent_log_1367[0] = LogType : message_sent
						clearsent_log_1367[1] = DEBUG_BIN_ID
						clearsent_log_1367[2] = 0x02
						clearsent_log_1367[3] = 0x06
						log!log(clearsent_log_1367, 4)
					end
					initColors()
					do
						readonly var r_1368 : UInt8 = bgcolor [0]
						readonly var g_1369 : UInt8 = bgcolor [1]
						readonly var b_1370 : UInt8 = bgcolor [2]
						display!setColor(r_1368, g_1369, b_1370)
						var setColorsent_log_1371 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						setColorsent_log_1371[0] = LogType : message_sent
						setColorsent_log_1371[1] = DEBUG_BIN_ID
						setColorsent_log_1371[2] = 0x02
						setColorsent_log_1371[3] = 0x07
						setColorsent_log_1371[4] = r_1368 as Byte
						setColorsent_log_1371[5] = g_1369 as Byte
						setColorsent_log_1371[6] = b_1370 as Byte
						log!log(setColorsent_log_1371, 7)
					end
					do
						readonly var x_1372 : UInt8 = 0
						readonly var y_1373 : UInt8 = 0
						readonly var width_1374 : UInt8 = XDISPSIZE
						readonly var height_1375 : UInt8 = YDISPSIZE
						display!fillRect(x_1372, y_1373, width_1374, height_1375)
						var fillRectsent_log_1376 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						fillRectsent_log_1376[0] = LogType : message_sent
						fillRectsent_log_1376[1] = DEBUG_BIN_ID
						fillRectsent_log_1376[2] = 0x02
						fillRectsent_log_1376[3] = 0x0A
						fillRectsent_log_1376[4] = x_1372 as Byte
						fillRectsent_log_1376[5] = y_1373 as Byte
						fillRectsent_log_1376[6] = width_1374 as Byte
						fillRectsent_log_1376[7] = height_1375 as Byte
						log!log(fillRectsent_log_1376, 8)
					end
					do
						readonly var r_1377 : UInt8 = fgcolor [0]
						readonly var g_1378 : UInt8 = fgcolor [1]
						readonly var b_1379 : UInt8 = fgcolor [2]
						display!setColor(r_1377, g_1378, b_1379)
						var setColorsent_log_1380 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						setColorsent_log_1380[0] = LogType : message_sent
						setColorsent_log_1380[1] = DEBUG_BIN_ID
						setColorsent_log_1380[2] = 0x02
						setColorsent_log_1380[3] = 0x07
						setColorsent_log_1380[4] = r_1377 as Byte
						setColorsent_log_1380[5] = g_1378 as Byte
						setColorsent_log_1380[6] = b_1379 as Byte
						log!log(setColorsent_log_1380, 7)
					end
					do
						readonly var x_1381 : UInt8 = 0
						readonly var y_1382 : UInt8 = 0
						readonly var width_1383 : UInt8 = XDISPSIZE
						readonly var height_1384 : UInt8 = 14
						display!fillRect(x_1381, y_1382, width_1383, height_1384)
						var fillRectsent_log_1385 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						fillRectsent_log_1385[0] = LogType : message_sent
						fillRectsent_log_1385[1] = DEBUG_BIN_ID
						fillRectsent_log_1385[2] = 0x02
						fillRectsent_log_1385[3] = 0x0A
						fillRectsent_log_1385[4] = x_1381 as Byte
						fillRectsent_log_1385[5] = y_1382 as Byte
						fillRectsent_log_1385[6] = width_1383 as Byte
						fillRectsent_log_1385[7] = height_1384 as Byte
						log!log(fillRectsent_log_1385, 8)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
			end
		}
		state LAUNCH @id `2` {
			property countdown : UInt8 @id `30`
			on entry do
				do
					readonly var id_1386 : UInt8 = 0
					readonly var time_1387 : UInt16 = period
					clock!timer_start(id_1386, time_1387)
					var timer_startsent_log_1388 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					timer_startsent_log_1388[0] = LogType : message_sent
					timer_startsent_log_1388[1] = DEBUG_BIN_ID
					timer_startsent_log_1388[2] = 0x01
					timer_startsent_log_1388[3] = 0x14
					timer_startsent_log_1388[4] = id_1386 as Byte
					timer_startsent_log_1388[5] = (`((` & time_1387 & ` >> 8) & 0xFF)`) as Byte
					timer_startsent_log_1388[6] = (`((` & time_1387 & ` >> 0) & 0xFF)`) as Byte
					log!log(timer_startsent_log_1388, 7)
				end
				do
					readonly var old_countdown_17 : UInt8 = countdown
					countdown = 3
					readonly var new_countdown_17 : UInt8 = countdown
					var countdown_log_17 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					countdown_log_17[0] = LogType : property_changed
					countdown_log_17[1] = DEBUG_BIN_ID
					countdown_log_17[2] = 0x1E
					countdown_log_17[3] = old_countdown_17 as Byte
					countdown_log_17[4] = new_countdown_17 as Byte
					log!log(countdown_log_17, 5)
				end
				drawScore()
				drawLives()
				do
					display!update()
					var updatesent_log_1389 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
					updatesent_log_1389[0] = LogType : message_sent
					updatesent_log_1389[1] = DEBUG_BIN_ID
					updatesent_log_1389[2] = 0x02
					updatesent_log_1389[3] = 0x0F
					log!log(updatesent_log_1389, 4)
				end
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0 and countdown > 0
			action do
				var timer_timeouthandled_log_1481 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_1481[0] = LogType : message_handled
				timer_timeouthandled_log_1481[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_1481[2] = 0x01
				timer_timeouthandled_log_1481[3] = 0x16
				timer_timeouthandled_log_1481[4] = 0x02
				timer_timeouthandled_log_1481[5] = 0x00
				readonly var ref_id1482 : UInt8 = t.id
				timer_timeouthandled_log_1481[6] = ref_id1482 as Byte
				log!log(timer_timeouthandled_log_1481, 7)
				do
					do
						readonly var id_1390 : UInt8 = 0
						readonly var time_1391 : UInt16 = period
						clock!timer_start(id_1390, time_1391)
						var timer_startsent_log_1392 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						timer_startsent_log_1392[0] = LogType : message_sent
						timer_startsent_log_1392[1] = DEBUG_BIN_ID
						timer_startsent_log_1392[2] = 0x01
						timer_startsent_log_1392[3] = 0x14
						timer_startsent_log_1392[4] = id_1390 as Byte
						timer_startsent_log_1392[5] = (`((` & time_1391 & ` >> 8) & 0xFF)`) as Byte
						timer_startsent_log_1392[6] = (`((` & time_1391 & ` >> 0) & 0xFF)`) as Byte
						log!log(timer_startsent_log_1392, 7)
					end
					drawPad()
					if ((countdown % 30) == 0) drawCountDown(countdown as Int16 / 30)
					do
						readonly var old_countdown_18 : UInt8 = countdown
						countdown = countdown - 1
						readonly var new_countdown_18 : UInt8 = countdown
						var countdown_log_18 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
						countdown_log_18[0] = LogType : property_changed
						countdown_log_18[1] = DEBUG_BIN_ID
						countdown_log_18[2] = 0x1E
						countdown_log_18[3] = old_countdown_18 as Byte
						countdown_log_18[4] = new_countdown_18 as Byte
						log!log(countdown_log_18, 5)
					end
					do
						display!update()
						var updatesent_log_1393 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
						updatesent_log_1393[0] = LogType : message_sent
						updatesent_log_1393[1] = DEBUG_BIN_ID
						updatesent_log_1393[2] = 0x02
						updatesent_log_1393[3] = 0x0F
						log!log(updatesent_log_1393, 4)
					end
				end
			end
			transition -> PLAY
			event t : clock?timer_timeout
			guard t.id == 0 and countdown == 0
			action do
				var timer_timeouthandled_log_1479 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_1479[0] = LogType : message_handled
				timer_timeouthandled_log_1479[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_1479[2] = 0x01
				timer_timeouthandled_log_1479[3] = 0x16
				timer_timeouthandled_log_1479[4] = 0x02
				timer_timeouthandled_log_1479[5] = 0x03
				readonly var ref_id1480 : UInt8 = t.id
				timer_timeouthandled_log_1479[6] = ref_id1480 as Byte
				log!log(timer_timeouthandled_log_1479, 7)
				do
					drawCountDown(0)
					resetBall()
					do
						display!update()
						var updatesent_log_1394 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
						updatesent_log_1394[0] = LogType : message_sent
						updatesent_log_1394[1] = DEBUG_BIN_ID
						updatesent_log_1394[2] = 0x02
						updatesent_log_1394[3] = 0x0F
						log!log(updatesent_log_1394, 4)
					end
				end
			end
		}
		state PLAY @id `3` {
			on entry do
				do
					readonly var id_1395 : UInt8 = 0
					readonly var time_1396 : UInt16 = period
					clock!timer_start(id_1395, time_1396)
					var timer_startsent_log_1397 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					timer_startsent_log_1397[0] = LogType : message_sent
					timer_startsent_log_1397[1] = DEBUG_BIN_ID
					timer_startsent_log_1397[2] = 0x01
					timer_startsent_log_1397[3] = 0x14
					timer_startsent_log_1397[4] = id_1395 as Byte
					timer_startsent_log_1397[5] = (`((` & time_1396 & ` >> 8) & 0xFF)`) as Byte
					timer_startsent_log_1397[6] = (`((` & time_1396 & ` >> 0) & 0xFF)`) as Byte
					log!log(timer_startsent_log_1397, 7)
				end
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				var timer_timeouthandled_log_1473 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_1473[0] = LogType : message_handled
				timer_timeouthandled_log_1473[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_1473[2] = 0x01
				timer_timeouthandled_log_1473[3] = 0x16
				timer_timeouthandled_log_1473[4] = 0x03
				timer_timeouthandled_log_1473[5] = 0x00
				readonly var ref_id1474 : UInt8 = t.id
				timer_timeouthandled_log_1473[6] = ref_id1474 as Byte
				log!log(timer_timeouthandled_log_1473, 7)
				do
					do
						readonly var old_bx_2 : Int16 = bx
						bx = bx + dx
						readonly var new_bx_2 : Int16 = bx
						var bx_log_2 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						bx_log_2[0] = LogType : property_changed
						bx_log_2[1] = DEBUG_BIN_ID
						bx_log_2[2] = 0x0A
						bx_log_2[3] = (`((` & old_bx_2 & ` >> 8) & 0xFF)`) as Byte
						bx_log_2[4] = (`((` & old_bx_2 & ` >> 0) & 0xFF)`) as Byte
						bx_log_2[5] = (`((` & new_bx_2 & ` >> 8) & 0xFF)`) as Byte
						bx_log_2[6] = (`((` & new_bx_2 & ` >> 0) & 0xFF)`) as Byte
						log!log(bx_log_2, 7)
					end
					do
						readonly var old_by_11 : Int16 = by
						by = by + dy
						readonly var new_by_11 : Int16 = by
						var by_log_11 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						by_log_11[0] = LogType : property_changed
						by_log_11[1] = DEBUG_BIN_ID
						by_log_11[2] = 0x0B
						by_log_11[3] = (`((` & old_by_11 & ` >> 8) & 0xFF)`) as Byte
						by_log_11[4] = (`((` & old_by_11 & ` >> 0) & 0xFF)`) as Byte
						by_log_11[5] = (`((` & new_by_11 & ` >> 8) & 0xFF)`) as Byte
						by_log_11[6] = (`((` & new_by_11 & ` >> 0) & 0xFF)`) as Byte
						log!log(by_log_11, 7)
					end
					var wl : Int16 = LEFT + br
					var wr : Int16 = RIGHT - br
					var wt : Int16 = TOP + br
					var wb : Int16 = BOTTOM - br
					if (bx < wl) do
						do
							readonly var old_dx_6 : Int16 = dx
							dx = -dx
							readonly var new_dx_6 : Int16 = dx
							var dx_log_6 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							dx_log_6[0] = LogType : property_changed
							dx_log_6[1] = DEBUG_BIN_ID
							dx_log_6[2] = 0x0C
							dx_log_6[3] = (`((` & old_dx_6 & ` >> 8) & 0xFF)`) as Byte
							dx_log_6[4] = (`((` & old_dx_6 & ` >> 0) & 0xFF)`) as Byte
							dx_log_6[5] = (`((` & new_dx_6 & ` >> 8) & 0xFF)`) as Byte
							dx_log_6[6] = (`((` & new_dx_6 & ` >> 0) & 0xFF)`) as Byte
							log!log(dx_log_6, 7)
						end
						do
							readonly var old_bx_3 : Int16 = bx
							bx = 2 * wl - bx
							readonly var new_bx_3 : Int16 = bx
							var bx_log_3 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							bx_log_3[0] = LogType : property_changed
							bx_log_3[1] = DEBUG_BIN_ID
							bx_log_3[2] = 0x0A
							bx_log_3[3] = (`((` & old_bx_3 & ` >> 8) & 0xFF)`) as Byte
							bx_log_3[4] = (`((` & old_bx_3 & ` >> 0) & 0xFF)`) as Byte
							bx_log_3[5] = (`((` & new_bx_3 & ` >> 8) & 0xFF)`) as Byte
							bx_log_3[6] = (`((` & new_bx_3 & ` >> 0) & 0xFF)`) as Byte
							log!log(bx_log_3, 7)
						end
						incrementScore(-1)
					end
					else if (bx > wr) do
						do
							readonly var old_dx_7 : Int16 = dx
							dx = -dx
							readonly var new_dx_7 : Int16 = dx
							var dx_log_7 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							dx_log_7[0] = LogType : property_changed
							dx_log_7[1] = DEBUG_BIN_ID
							dx_log_7[2] = 0x0C
							dx_log_7[3] = (`((` & old_dx_7 & ` >> 8) & 0xFF)`) as Byte
							dx_log_7[4] = (`((` & old_dx_7 & ` >> 0) & 0xFF)`) as Byte
							dx_log_7[5] = (`((` & new_dx_7 & ` >> 8) & 0xFF)`) as Byte
							dx_log_7[6] = (`((` & new_dx_7 & ` >> 0) & 0xFF)`) as Byte
							log!log(dx_log_7, 7)
						end
						do
							readonly var old_bx_4 : Int16 = bx
							bx = 2 * wr - bx
							readonly var new_bx_4 : Int16 = bx
							var bx_log_4 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							bx_log_4[0] = LogType : property_changed
							bx_log_4[1] = DEBUG_BIN_ID
							bx_log_4[2] = 0x0A
							bx_log_4[3] = (`((` & old_bx_4 & ` >> 8) & 0xFF)`) as Byte
							bx_log_4[4] = (`((` & old_bx_4 & ` >> 0) & 0xFF)`) as Byte
							bx_log_4[5] = (`((` & new_bx_4 & ` >> 8) & 0xFF)`) as Byte
							bx_log_4[6] = (`((` & new_bx_4 & ` >> 0) & 0xFF)`) as Byte
							log!log(bx_log_4, 7)
						end
						incrementScore(-1)
					end
					if (by < wt) do
						do
							readonly var old_dy_27 : Int16 = dy
							dy = -dy
							readonly var new_dy_27 : Int16 = dy
							var dy_log_27 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							dy_log_27[0] = LogType : property_changed
							dy_log_27[1] = DEBUG_BIN_ID
							dy_log_27[2] = 0x0D
							dy_log_27[3] = (`((` & old_dy_27 & ` >> 8) & 0xFF)`) as Byte
							dy_log_27[4] = (`((` & old_dy_27 & ` >> 0) & 0xFF)`) as Byte
							dy_log_27[5] = (`((` & new_dy_27 & ` >> 8) & 0xFF)`) as Byte
							dy_log_27[6] = (`((` & new_dy_27 & ` >> 0) & 0xFF)`) as Byte
							log!log(dy_log_27, 7)
						end
						do
							readonly var old_by_12 : Int16 = by
							by = 2 * wt - by
							readonly var new_by_12 : Int16 = by
							var by_log_12 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							by_log_12[0] = LogType : property_changed
							by_log_12[1] = DEBUG_BIN_ID
							by_log_12[2] = 0x0B
							by_log_12[3] = (`((` & old_by_12 & ` >> 8) & 0xFF)`) as Byte
							by_log_12[4] = (`((` & old_by_12 & ` >> 0) & 0xFF)`) as Byte
							by_log_12[5] = (`((` & new_by_12 & ` >> 8) & 0xFF)`) as Byte
							by_log_12[6] = (`((` & new_by_12 & ` >> 0) & 0xFF)`) as Byte
							log!log(by_log_12, 7)
						end
						incrementScore(-1)
					end
					else if (by > wb) do
						do
							game!lostBall()
							var lostBallsent_log_1398 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
							lostBallsent_log_1398[0] = LogType : message_sent
							lostBallsent_log_1398[1] = DEBUG_BIN_ID
							lostBallsent_log_1398[2] = 0x05
							lostBallsent_log_1398[3] = 0x01
							log!log(lostBallsent_log_1398, 4)
						end
						do
							req_game!lostBall()
							var lostBallsent_log_1399 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
							lostBallsent_log_1399[0] = LogType : message_sent
							lostBallsent_log_1399[1] = DEBUG_BIN_ID
							lostBallsent_log_1399[2] = 0x06
							lostBallsent_log_1399[3] = 0x01
							log!log(lostBallsent_log_1399, 4)
						end
					end
					if (dy > 0) do
						if (by > pady - br and by < pady + br) do
							if (bx > padx - padlen / 2 and bx < padx + padlen / 2) do
								do
									readonly var old_dy_28 : Int16 = dy
									dy = -dy
									readonly var new_dy_28 : Int16 = dy
									var dy_log_28 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
									dy_log_28[0] = LogType : property_changed
									dy_log_28[1] = DEBUG_BIN_ID
									dy_log_28[2] = 0x0D
									dy_log_28[3] = (`((` & old_dy_28 & ` >> 8) & 0xFF)`) as Byte
									dy_log_28[4] = (`((` & old_dy_28 & ` >> 0) & 0xFF)`) as Byte
									dy_log_28[5] = (`((` & new_dy_28 & ` >> 8) & 0xFF)`) as Byte
									dy_log_28[6] = (`((` & new_dy_28 & ` >> 0) & 0xFF)`) as Byte
									log!log(dy_log_28, 7)
								end
								do
									readonly var old_by_13 : Int16 = by
									by = 2 * (pady - br) - by
									readonly var new_by_13 : Int16 = by
									var by_log_13 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
									by_log_13[0] = LogType : property_changed
									by_log_13[1] = DEBUG_BIN_ID
									by_log_13[2] = 0x0B
									by_log_13[3] = (`((` & old_by_13 & ` >> 8) & 0xFF)`) as Byte
									by_log_13[4] = (`((` & old_by_13 & ` >> 0) & 0xFF)`) as Byte
									by_log_13[5] = (`((` & new_by_13 & ` >> 8) & 0xFF)`) as Byte
									by_log_13[6] = (`((` & new_by_13 & ` >> 0) & 0xFF)`) as Byte
									log!log(by_log_13, 7)
								end
								do
									readonly var old_dx_8 : Int16 = dx
									dx = dx / 4 + (bx - padx) / 4
									readonly var new_dx_8 : Int16 = dx
									var dx_log_8 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
									dx_log_8[0] = LogType : property_changed
									dx_log_8[1] = DEBUG_BIN_ID
									dx_log_8[2] = 0x0C
									dx_log_8[3] = (`((` & old_dx_8 & ` >> 8) & 0xFF)`) as Byte
									dx_log_8[4] = (`((` & old_dx_8 & ` >> 0) & 0xFF)`) as Byte
									dx_log_8[5] = (`((` & new_dx_8 & ` >> 8) & 0xFF)`) as Byte
									dx_log_8[6] = (`((` & new_dx_8 & ` >> 0) & 0xFF)`) as Byte
									log!log(dx_log_8, 7)
								end
							end
						end
					end
					var collision : Boolean = collideBrick(bx - br, by - br)or collideBrick(bx + br, by - br)or collideBrick(bx + br, by + br)or collideBrick(bx - br, by + br)
					if (collision) do
						do
							readonly var old_dy_29 : Int16 = dy
							dy = -dy
							readonly var new_dy_29 : Int16 = dy
							var dy_log_29 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							dy_log_29[0] = LogType : property_changed
							dy_log_29[1] = DEBUG_BIN_ID
							dy_log_29[2] = 0x0D
							dy_log_29[3] = (`((` & old_dy_29 & ` >> 8) & 0xFF)`) as Byte
							dy_log_29[4] = (`((` & old_dy_29 & ` >> 0) & 0xFF)`) as Byte
							dy_log_29[5] = (`((` & new_dy_29 & ` >> 8) & 0xFF)`) as Byte
							dy_log_29[6] = (`((` & new_dy_29 & ` >> 0) & 0xFF)`) as Byte
							log!log(dy_log_29, 7)
						end
						incrementScore(10)
						if (bricksLeft()== 0) do
							do
								game!nextLevel()
								var nextLevelsent_log_1400 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
								nextLevelsent_log_1400[0] = LogType : message_sent
								nextLevelsent_log_1400[1] = DEBUG_BIN_ID
								nextLevelsent_log_1400[2] = 0x05
								nextLevelsent_log_1400[3] = 0x02
								log!log(nextLevelsent_log_1400, 4)
							end
							do
								req_game!nextLevel()
								var nextLevelsent_log_1401 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
								nextLevelsent_log_1401[0] = LogType : message_sent
								nextLevelsent_log_1401[1] = DEBUG_BIN_ID
								nextLevelsent_log_1401[2] = 0x06
								nextLevelsent_log_1401[3] = 0x02
								log!log(nextLevelsent_log_1401, 4)
							end
						end
					end
					drawBall()
					drawPad()
					do
						readonly var ballx_1402 : Int16 = bx
						readonly var bally_1403 : Int16 = by
						readonly var padx_1404 : Int16 = padx
						readonly var pady_1405 : Int16 = pady
						ia!updateIA(ballx_1402, bally_1403, padx_1404, pady_1405)
						var updateIAsent_log_1406 : Byte [ 12 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						updateIAsent_log_1406[0] = LogType : message_sent
						updateIAsent_log_1406[1] = DEBUG_BIN_ID
						updateIAsent_log_1406[2] = 0x04
						updateIAsent_log_1406[3] = 0x13
						updateIAsent_log_1406[4] = (`((` & ballx_1402 & ` >> 8) & 0xFF)`) as Byte
						updateIAsent_log_1406[5] = (`((` & ballx_1402 & ` >> 0) & 0xFF)`) as Byte
						updateIAsent_log_1406[5] = (`((` & bally_1403 & ` >> 8) & 0xFF)`) as Byte
						updateIAsent_log_1406[6] = (`((` & bally_1403 & ` >> 0) & 0xFF)`) as Byte
						updateIAsent_log_1406[6] = (`((` & padx_1404 & ` >> 8) & 0xFF)`) as Byte
						updateIAsent_log_1406[7] = (`((` & padx_1404 & ` >> 0) & 0xFF)`) as Byte
						updateIAsent_log_1406[7] = (`((` & pady_1405 & ` >> 8) & 0xFF)`) as Byte
						updateIAsent_log_1406[8] = (`((` & pady_1405 & ` >> 0) & 0xFF)`) as Byte
						log!log(updateIAsent_log_1406, 12)
					end
					do
						display!update()
						var updatesent_log_1407 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
						updatesent_log_1407[0] = LogType : message_sent
						updatesent_log_1407[1] = DEBUG_BIN_ID
						updatesent_log_1407[2] = 0x02
						updatesent_log_1407[3] = 0x0F
						log!log(updatesent_log_1407, 4)
					end
					log(false)
					do
						readonly var id_1408 : UInt8 = 0
						readonly var time_1409 : UInt16 = period
						clock!timer_start(id_1408, time_1409)
						var timer_startsent_log_1410 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						timer_startsent_log_1410[0] = LogType : message_sent
						timer_startsent_log_1410[1] = DEBUG_BIN_ID
						timer_startsent_log_1410[2] = 0x01
						timer_startsent_log_1410[3] = 0x14
						timer_startsent_log_1410[4] = id_1408 as Byte
						timer_startsent_log_1410[5] = (`((` & time_1409 & ` >> 8) & 0xFF)`) as Byte
						timer_startsent_log_1410[6] = (`((` & time_1409 & ` >> 0) & 0xFF)`) as Byte
						log!log(timer_startsent_log_1410, 7)
					end
				end
			end
			transition -> LOSTBALL
			event game?lostBall
			action do
				var lostBallhandled_log_1463 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				lostBallhandled_log_1463[0] = LogType : message_handled
				lostBallhandled_log_1463[1] = DEBUG_BIN_ID
				lostBallhandled_log_1463[2] = 0x05
				lostBallhandled_log_1463[3] = 0x01
				lostBallhandled_log_1463[4] = 0x03
				lostBallhandled_log_1463[5] = 0x04
				log!log(lostBallhandled_log_1463, 6)
				do
					readonly var id_1411 : UInt8 = 0
					clock!timer_cancel(id_1411)
					var timer_cancelsent_log_1412 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					timer_cancelsent_log_1412[0] = LogType : message_sent
					timer_cancelsent_log_1412[1] = DEBUG_BIN_ID
					timer_cancelsent_log_1412[2] = 0x01
					timer_cancelsent_log_1412[3] = 0x15
					timer_cancelsent_log_1412[4] = id_1411 as Byte
					log!log(timer_cancelsent_log_1412, 5)
				end
			end
			transition -> NEXTLEVEL
			event game?nextLevel
			action do
				var nextLevelhandled_log_1464 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				nextLevelhandled_log_1464[0] = LogType : message_handled
				nextLevelhandled_log_1464[1] = DEBUG_BIN_ID
				nextLevelhandled_log_1464[2] = 0x05
				nextLevelhandled_log_1464[3] = 0x02
				nextLevelhandled_log_1464[4] = 0x03
				nextLevelhandled_log_1464[5] = 0x05
				log!log(nextLevelhandled_log_1464, 6)
				do
					readonly var id_1413 : UInt8 = 0
					clock!timer_cancel(id_1413)
					var timer_cancelsent_log_1414 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					timer_cancelsent_log_1414[0] = LogType : message_sent
					timer_cancelsent_log_1414[1] = DEBUG_BIN_ID
					timer_cancelsent_log_1414[2] = 0x01
					timer_cancelsent_log_1414[3] = 0x15
					timer_cancelsent_log_1414[4] = id_1413 as Byte
					log!log(timer_cancelsent_log_1414, 5)
				end
			end
			transition -> LOSTBALL
			event pro_game?lostBall
			action do
				var lostBallhandled_log_1466 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				lostBallhandled_log_1466[0] = LogType : message_handled
				lostBallhandled_log_1466[1] = DEBUG_BIN_ID
				lostBallhandled_log_1466[2] = 0x07
				lostBallhandled_log_1466[3] = 0x01
				lostBallhandled_log_1466[4] = 0x03
				lostBallhandled_log_1466[5] = 0x04
				log!log(lostBallhandled_log_1466, 6)
				do
					readonly var id_1415 : UInt8 = 0
					clock!timer_cancel(id_1415)
					var timer_cancelsent_log_1416 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					timer_cancelsent_log_1416[0] = LogType : message_sent
					timer_cancelsent_log_1416[1] = DEBUG_BIN_ID
					timer_cancelsent_log_1416[2] = 0x01
					timer_cancelsent_log_1416[3] = 0x15
					timer_cancelsent_log_1416[4] = id_1415 as Byte
					log!log(timer_cancelsent_log_1416, 5)
				end
			end
			transition -> NEXTLEVEL
			event pro_game?nextLevel
			action do
				var nextLevelhandled_log_1467 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				nextLevelhandled_log_1467[0] = LogType : message_handled
				nextLevelhandled_log_1467[1] = DEBUG_BIN_ID
				nextLevelhandled_log_1467[2] = 0x07
				nextLevelhandled_log_1467[3] = 0x02
				nextLevelhandled_log_1467[4] = 0x03
				nextLevelhandled_log_1467[5] = 0x05
				log!log(nextLevelhandled_log_1467, 6)
				do
					readonly var id_1417 : UInt8 = 0
					clock!timer_cancel(id_1417)
					var timer_cancelsent_log_1418 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					timer_cancelsent_log_1418[0] = LogType : message_sent
					timer_cancelsent_log_1418[1] = DEBUG_BIN_ID
					timer_cancelsent_log_1418[2] = 0x01
					timer_cancelsent_log_1418[3] = 0x15
					timer_cancelsent_log_1418[4] = id_1417 as Byte
					log!log(timer_cancelsent_log_1418, 5)
				end
			end
		}
		state LOSTBALL @id `4` {
			on entry do
				do
					readonly var id_1419 : UInt8 = 0
					readonly var time_1420 : UInt16 = period
					clock!timer_start(id_1419, time_1420)
					var timer_startsent_log_1421 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					timer_startsent_log_1421[0] = LogType : message_sent
					timer_startsent_log_1421[1] = DEBUG_BIN_ID
					timer_startsent_log_1421[2] = 0x01
					timer_startsent_log_1421[3] = 0x14
					timer_startsent_log_1421[4] = id_1419 as Byte
					timer_startsent_log_1421[5] = (`((` & time_1420 & ` >> 8) & 0xFF)`) as Byte
					timer_startsent_log_1421[6] = (`((` & time_1420 & ` >> 0) & 0xFF)`) as Byte
					log!log(timer_startsent_log_1421, 7)
				end
				do
					readonly var old_lives_0 : UInt8 = lives
					lives = lives - 1
					readonly var new_lives_0 : UInt8 = lives
					var lives_log_0 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					lives_log_0[0] = LogType : property_changed
					lives_log_0[1] = DEBUG_BIN_ID
					lives_log_0[2] = 0x1C
					lives_log_0[3] = old_lives_0 as Byte
					lives_log_0[4] = new_lives_0 as Byte
					log!log(lives_log_0, 5)
				end
				eraseBall()
				erasePad()
				drawLives()
				do
					display!update()
					var updatesent_log_1422 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
					updatesent_log_1422[0] = LogType : message_sent
					updatesent_log_1422[1] = DEBUG_BIN_ID
					updatesent_log_1422[2] = 0x02
					updatesent_log_1422[3] = 0x0F
					log!log(updatesent_log_1422, 4)
				end
				log(true)
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0 and lives > 0
			action do
				var timer_timeouthandled_log_1475 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_1475[0] = LogType : message_handled
				timer_timeouthandled_log_1475[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_1475[2] = 0x01
				timer_timeouthandled_log_1475[3] = 0x16
				timer_timeouthandled_log_1475[4] = 0x04
				timer_timeouthandled_log_1475[5] = 0x02
				readonly var ref_id1476 : UInt8 = t.id
				timer_timeouthandled_log_1475[6] = ref_id1476 as Byte
				log!log(timer_timeouthandled_log_1475, 7)
			end
			transition -> GAMEOVER
			event t : clock?timer_timeout
			guard t.id == 0 and lives == 0
			action do
				var timer_timeouthandled_log_1477 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_1477[0] = LogType : message_handled
				timer_timeouthandled_log_1477[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_1477[2] = 0x01
				timer_timeouthandled_log_1477[3] = 0x16
				timer_timeouthandled_log_1477[4] = 0x04
				timer_timeouthandled_log_1477[5] = 0x06
				readonly var ref_id1478 : UInt8 = t.id
				timer_timeouthandled_log_1477[6] = ref_id1478 as Byte
				log!log(timer_timeouthandled_log_1477, 7)
			end
		}
		state NEXTLEVEL @id `5` {
			on entry do
				do
					readonly var id_1423 : UInt8 = 0
					readonly var time_1424 : UInt16 = period
					clock!timer_start(id_1423, time_1424)
					var timer_startsent_log_1425 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					timer_startsent_log_1425[0] = LogType : message_sent
					timer_startsent_log_1425[1] = DEBUG_BIN_ID
					timer_startsent_log_1425[2] = 0x01
					timer_startsent_log_1425[3] = 0x14
					timer_startsent_log_1425[4] = id_1423 as Byte
					timer_startsent_log_1425[5] = (`((` & time_1424 & ` >> 8) & 0xFF)`) as Byte
					timer_startsent_log_1425[6] = (`((` & time_1424 & ` >> 0) & 0xFF)`) as Byte
					log!log(timer_startsent_log_1425, 7)
				end
				do
					readonly var old_level_32 : UInt8 = level
					level = level + 1
					readonly var new_level_32 : UInt8 = level
					var level_log_32 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					level_log_32[0] = LogType : property_changed
					level_log_32[1] = DEBUG_BIN_ID
					level_log_32[2] = 0x1D
					level_log_32[3] = old_level_32 as Byte
					level_log_32[4] = new_level_32 as Byte
					log!log(level_log_32, 5)
				end
				drawLevel()
				eraseBall()
				erasePad()
				if ((level % 2) == 0 and padlen > 5 * SCALE) do
					readonly var old_padlen_22 : Int16 = padlen
					padlen = padlen - (4 * SCALE)
					readonly var new_padlen_22 : Int16 = padlen
					var padlen_log_22 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					padlen_log_22[0] = LogType : property_changed
					padlen_log_22[1] = DEBUG_BIN_ID
					padlen_log_22[2] = 0x10
					padlen_log_22[3] = (`((` & old_padlen_22 & ` >> 8) & 0xFF)`) as Byte
					padlen_log_22[4] = (`((` & old_padlen_22 & ` >> 0) & 0xFF)`) as Byte
					padlen_log_22[5] = (`((` & new_padlen_22 & ` >> 8) & 0xFF)`) as Byte
					padlen_log_22[6] = (`((` & new_padlen_22 & ` >> 0) & 0xFF)`) as Byte
					log!log(padlen_log_22, 7)
				end
				if ((level % 2) == 1) do
					readonly var old_dy_30 : Int16 = dy
					dy = (dy * 3) / 2
					readonly var new_dy_30 : Int16 = dy
					var dy_log_30 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					dy_log_30[0] = LogType : property_changed
					dy_log_30[1] = DEBUG_BIN_ID
					dy_log_30[2] = 0x0D
					dy_log_30[3] = (`((` & old_dy_30 & ` >> 8) & 0xFF)`) as Byte
					dy_log_30[4] = (`((` & old_dy_30 & ` >> 0) & 0xFF)`) as Byte
					dy_log_30[5] = (`((` & new_dy_30 & ` >> 8) & 0xFF)`) as Byte
					dy_log_30[6] = (`((` & new_dy_30 & ` >> 0) & 0xFF)`) as Byte
					log!log(dy_log_30, 7)
				end
				drawLives()
				createBricks()
				do
					display!update()
					var updatesent_log_1426 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
					updatesent_log_1426[0] = LogType : message_sent
					updatesent_log_1426[1] = DEBUG_BIN_ID
					updatesent_log_1426[2] = 0x02
					updatesent_log_1426[3] = 0x0F
					log!log(updatesent_log_1426, 4)
				end
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				var timer_timeouthandled_log_1471 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_1471[0] = LogType : message_handled
				timer_timeouthandled_log_1471[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_1471[2] = 0x01
				timer_timeouthandled_log_1471[3] = 0x16
				timer_timeouthandled_log_1471[4] = 0x05
				timer_timeouthandled_log_1471[5] = 0x02
				readonly var ref_id1472 : UInt8 = t.id
				timer_timeouthandled_log_1471[6] = ref_id1472 as Byte
				log!log(timer_timeouthandled_log_1471, 7)
			end
		}
		final state GAMEOVER @id `6` {
			on entry do
				eraseBall()
				erasePad()
				do
					readonly var r_1427 : UInt8 = 255
					readonly var g_1428 : UInt8 = 255
					readonly var b_1429 : UInt8 = 255
					display!setColor(r_1427, g_1428, b_1429)
					var setColorsent_log_1430 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					setColorsent_log_1430[0] = LogType : message_sent
					setColorsent_log_1430[1] = DEBUG_BIN_ID
					setColorsent_log_1430[2] = 0x02
					setColorsent_log_1430[3] = 0x07
					setColorsent_log_1430[4] = r_1427 as Byte
					setColorsent_log_1430[5] = g_1428 as Byte
					setColorsent_log_1430[6] = b_1429 as Byte
					log!log(setColorsent_log_1430, 7)
				end
				do
					readonly var x_1431 : UInt8 = 8
					readonly var y_1432 : UInt8 = 30
					readonly var width_1433 : UInt8 = 142
					readonly var height_1434 : UInt8 = 76
					display!fillRect(x_1431, y_1432, width_1433, height_1434)
					var fillRectsent_log_1435 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					fillRectsent_log_1435[0] = LogType : message_sent
					fillRectsent_log_1435[1] = DEBUG_BIN_ID
					fillRectsent_log_1435[2] = 0x02
					fillRectsent_log_1435[3] = 0x0A
					fillRectsent_log_1435[4] = x_1431 as Byte
					fillRectsent_log_1435[5] = y_1432 as Byte
					fillRectsent_log_1435[6] = width_1433 as Byte
					fillRectsent_log_1435[7] = height_1434 as Byte
					log!log(fillRectsent_log_1435, 8)
				end
				do
					readonly var r_1436 : UInt8 = fgcolor [0]
					readonly var g_1437 : UInt8 = fgcolor [1]
					readonly var b_1438 : UInt8 = fgcolor [2]
					display!setColor(r_1436, g_1437, b_1438)
					var setColorsent_log_1439 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					setColorsent_log_1439[0] = LogType : message_sent
					setColorsent_log_1439[1] = DEBUG_BIN_ID
					setColorsent_log_1439[2] = 0x02
					setColorsent_log_1439[3] = 0x07
					setColorsent_log_1439[4] = r_1436 as Byte
					setColorsent_log_1439[5] = g_1437 as Byte
					setColorsent_log_1439[6] = b_1438 as Byte
					log!log(setColorsent_log_1439, 7)
				end
				do
					readonly var x_1440 : UInt8 = 9
					readonly var y_1441 : UInt8 = 31
					readonly var width_1442 : UInt8 = 140
					readonly var height_1443 : UInt8 = 50
					display!fillRect(x_1440, y_1441, width_1442, height_1443)
					var fillRectsent_log_1444 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					fillRectsent_log_1444[0] = LogType : message_sent
					fillRectsent_log_1444[1] = DEBUG_BIN_ID
					fillRectsent_log_1444[2] = 0x02
					fillRectsent_log_1444[3] = 0x0A
					fillRectsent_log_1444[4] = x_1440 as Byte
					fillRectsent_log_1444[5] = y_1441 as Byte
					fillRectsent_log_1444[6] = width_1442 as Byte
					fillRectsent_log_1444[7] = height_1443 as Byte
					log!log(fillRectsent_log_1444, 8)
				end
				do
					readonly var r_1445 : UInt8 = fgcolor [0]
					readonly var g_1446 : UInt8 = fgcolor [1]
					readonly var b_1447 : UInt8 = fgcolor [2]
					display!setBGColor(r_1445, g_1446, b_1447)
					var setBGColorsent_log_1448 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					setBGColorsent_log_1448[0] = LogType : message_sent
					setBGColorsent_log_1448[1] = DEBUG_BIN_ID
					setBGColorsent_log_1448[2] = 0x02
					setBGColorsent_log_1448[3] = 0x08
					setBGColorsent_log_1448[4] = r_1445 as Byte
					setBGColorsent_log_1448[5] = g_1446 as Byte
					setBGColorsent_log_1448[6] = b_1447 as Byte
					log!log(setBGColorsent_log_1448, 7)
				end
				do
					readonly var r_1449 : UInt8 = 158
					readonly var g_1450 : UInt8 = 209
					readonly var b_1451 : UInt8 = 130
					display!setColor(r_1449, g_1450, b_1451)
					var setColorsent_log_1452 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					setColorsent_log_1452[0] = LogType : message_sent
					setColorsent_log_1452[1] = DEBUG_BIN_ID
					setColorsent_log_1452[2] = 0x02
					setColorsent_log_1452[3] = 0x07
					setColorsent_log_1452[4] = r_1449 as Byte
					setColorsent_log_1452[5] = g_1450 as Byte
					setColorsent_log_1452[6] = b_1451 as Byte
					log!log(setColorsent_log_1452, 7)
				end
				do
					readonly var x_1453 : UInt8 = 23
					readonly var y_1454 : UInt8 = 40
					readonly var v_1455 : Int16 = score
					readonly var digits_1456 : UInt8 = 5
					readonly var scale_1457 : UInt8 = 6
					display!drawInteger(x_1453, y_1454, v_1455, digits_1456, scale_1457)
					var drawIntegersent_log_1458 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					drawIntegersent_log_1458[0] = LogType : message_sent
					drawIntegersent_log_1458[1] = DEBUG_BIN_ID
					drawIntegersent_log_1458[2] = 0x02
					drawIntegersent_log_1458[3] = 0x0B
					drawIntegersent_log_1458[4] = x_1453 as Byte
					drawIntegersent_log_1458[5] = y_1454 as Byte
					drawIntegersent_log_1458[6] = (`((` & v_1455 & ` >> 8) & 0xFF)`) as Byte
					drawIntegersent_log_1458[7] = (`((` & v_1455 & ` >> 0) & 0xFF)`) as Byte
					drawIntegersent_log_1458[7] = digits_1456 as Byte
					drawIntegersent_log_1458[8] = scale_1457 as Byte
					log!log(drawIntegersent_log_1458, 10)
				end
				do
					readonly var x_1459 : UInt8 = 26
					readonly var y_1460 : UInt8 = 87
					display!drawThingML(x_1459, y_1460)
					var drawThingMLsent_log_1461 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
					drawThingMLsent_log_1461[0] = LogType : message_sent
					drawThingMLsent_log_1461[1] = DEBUG_BIN_ID
					drawThingMLsent_log_1461[2] = 0x02
					drawThingMLsent_log_1461[3] = 0x0C
					drawThingMLsent_log_1461[4] = x_1459 as Byte
					drawThingMLsent_log_1461[5] = y_1460 as Byte
					log!log(drawThingMLsent_log_1461, 6)
				end
				do
					display!update()
					var updatesent_log_1462 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
					updatesent_log_1462[0] = LogType : message_sent
					updatesent_log_1462[1] = DEBUG_BIN_ID
					updatesent_log_1462[2] = 0x02
					updatesent_log_1462[3] = 0x0F
					log!log(updatesent_log_1462, 4)
				end
				log(true)
				stopTime = timestamp()
				quit()
			end
		}
		internal
		event e : controller?position
		action do
			var positionhandled_log_1468 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			positionhandled_log_1468[0] = LogType : message_handled
			positionhandled_log_1468[1] = DEBUG_BIN_ID
			positionhandled_log_1468[2] = 0x03
			positionhandled_log_1468[3] = 0x12
			positionhandled_log_1468[4] = 0x00
			positionhandled_log_1468[5] = 0x00
			readonly var ref_x1469 : Int16 = e.x
			positionhandled_log_1468[6] = (`((` & ref_x1469 & ` >> 8) & 0xFF)`) as Byte
			positionhandled_log_1468[7] = (`((` & ref_x1469 & ` >> 0) & 0xFF)`) as Byte
			readonly var ref_y1470 : Int16 = e.y
			positionhandled_log_1468[8] = (`((` & ref_y1470 & ` >> 8) & 0xFF)`) as Byte
			positionhandled_log_1468[9] = (`((` & ref_y1470 & ` >> 0) & 0xFF)`) as Byte
			log!log(positionhandled_log_1468, 10)
			do
				var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
				center = e.x as Int32 * center
				center = center / 200
				do
					readonly var old_padx_16 : Int16 = padx
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
					readonly var new_padx_16 : Int16 = padx
					var padx_log_16 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					padx_log_16[0] = LogType : property_changed
					padx_log_16[1] = DEBUG_BIN_ID
					padx_log_16[2] = 0x0E
					padx_log_16[3] = (`((` & old_padx_16 & ` >> 8) & 0xFF)`) as Byte
					padx_log_16[4] = (`((` & old_padx_16 & ` >> 0) & 0xFF)`) as Byte
					padx_log_16[5] = (`((` & new_padx_16 & ` >> 8) & 0xFF)`) as Byte
					padx_log_16[6] = (`((` & new_padx_16 & ` >> 0) & 0xFF)`) as Byte
					log!log(padx_log_16, 7)
				end
			end
		end
		internal
		event e : clock?timer_timeout
		guard true
		action do
			var timer_timeoutlost_log_1483 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
			timer_timeoutlost_log_1483[0] = LogType : message_lost
			timer_timeoutlost_log_1483[1] = DEBUG_BIN_ID
			timer_timeoutlost_log_1483[2] = 0x01
			timer_timeoutlost_log_1483[3] = 0x16
			readonly var ref_id1484 : UInt8 = e.id
			timer_timeoutlost_log_1483[4] = ref_id1484 as Byte
			log!log(timer_timeoutlost_log_1483, 5)
		end
		internal
		event e : display?displayReady
		guard true
		action do
			var displayReadylost_log_1485 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			displayReadylost_log_1485[0] = LogType : message_lost
			displayReadylost_log_1485[1] = DEBUG_BIN_ID
			displayReadylost_log_1485[2] = 0x02
			displayReadylost_log_1485[3] = 0x10
			log!log(displayReadylost_log_1485, 4)
		end
		internal
		event e : game?lostBall
		guard true
		action do
			var lostBalllost_log_1486 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			lostBalllost_log_1486[0] = LogType : message_lost
			lostBalllost_log_1486[1] = DEBUG_BIN_ID
			lostBalllost_log_1486[2] = 0x05
			lostBalllost_log_1486[3] = 0x01
			log!log(lostBalllost_log_1486, 4)
		end
		internal
		event e : game?nextLevel
		guard true
		action do
			var nextLevellost_log_1487 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			nextLevellost_log_1487[0] = LogType : message_lost
			nextLevellost_log_1487[1] = DEBUG_BIN_ID
			nextLevellost_log_1487[2] = 0x05
			nextLevellost_log_1487[3] = 0x02
			log!log(nextLevellost_log_1487, 4)
		end
		internal
		event e : pro_game?lostBall
		guard true
		action do
			var lostBalllost_log_1488 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			lostBalllost_log_1488[0] = LogType : message_lost
			lostBalllost_log_1488[1] = DEBUG_BIN_ID
			lostBalllost_log_1488[2] = 0x07
			lostBalllost_log_1488[3] = 0x01
			log!log(lostBalllost_log_1488, 4)
		end
		internal
		event e : pro_game?nextLevel
		guard true
		action do
			var nextLevellost_log_1489 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			nextLevellost_log_1489[0] = LogType : message_lost
			nextLevellost_log_1489[1] = DEBUG_BIN_ID
			nextLevellost_log_1489[2] = 0x07
			nextLevellost_log_1489[3] = 0x02
			log!log(nextLevellost_log_1489, 4)
		end
	}
}
enumeration LogType as Byte @id `1`
	{
	function_called = 0
	property_changed = 1
	message_lost = 2
	message_sent = 3
	message_handled = 4
}
thing fragment LogMsgs {
	message log_on()
	@id `3`
	message log_off()
	@id `4`
	message log(payload : Byte [ ], size : UInt8)
	@id `5`
}
thing fragment WithBinaryLog includes LogMsgs {
	required port log @sync_send `true` @id `8` {
		sends log
	}
	readonly property DEBUG_BIN_ID : Byte @id `31`
}
thing fragment Logger includes LogMsgs {
	provided port log @id `9` {
		receives log_on receives log_off receives log
	}
	readonly property ACTIVATE_ON_STARTUP : Boolean @id `32`
	readonly property HAS_SIGNED_BYTE : Boolean @id `33`
	abstract function do_log(payload : Byte [ ], size : UInt8)

	statechart init STARTUP @id `7` {
		state STARTUP @id `8` {
			transition -> ON guard ACTIVATE_ON_STARTUP
			transition -> OFF guard not ACTIVATE_ON_STARTUP
		}
		state ON @id `9` {
			internal
			event d : log?log
			action do_log(d.payload, d.size)
			transition -> OFF
			event log?log_off
		}
		state OFF @id `10` {
			transition -> ON
			event log?log_on
		}
	}
}
thing ConsoleLogger includes Logger /*@stdout_sync `true`*/ {
	readonly property QUIET : Boolean = true @id `34`
	function do_log(payload : Byte [ ], size : UInt8) @id `19` do
		if (not QUIET) do
			readonly var log_type : Byte = payload [0]
			if (log_type == LogType : function_called) print "log: function_called  ["
			else if (log_type == LogType : property_changed) print "log: property_changed ["
			else if (log_type == LogType : message_lost) print "log: message_lost     ["
			else if (log_type == LogType : message_sent) print "log: message_sent     ["
			else if (log_type == LogType : message_handled) print "log: message_handled  ["
			else print "log: unknown          ["
		end
		var i : UInt8 = 0
		while (i < size) do
			readonly var v : Byte = payload [i]
			if (HAS_SIGNED_BYTE) print (`` & v & ` & 0xFF`) as UInt8
			else print v
			if (not QUIET) print ","
			i ++
		end
		if (not QUIET) println "]"
		else println ""
	end
}
thing fragment DisplayMsgs {
	message clear()
	@id `6`
	message setColor(r : UInt8, g : UInt8, b : UInt8)
	@id `7`
	message setBGColor(r : UInt8, g : UInt8, b : UInt8)
	@id `8`
	message drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	@id `9`
	message fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	@id `10`
	message drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8)
	@id `11`
	message drawThingML(x : UInt8, y : UInt8)
	@id `12`
	message create(xsize : UInt8, ysize : UInt8)
	@id `13`
	message destroy()
	@id `14`
	message update()
	@id `15`
	message displayReady()
	@id `16`
}
thing HeadlessDisplay includes DisplayMsgs /*@stdout_sync `true`*/ {
	provided port display @id `10` {
		sends displayReady receives create receives destroy receives update receives clear receives setColor receives setBGColor receives drawRect receives fillRect receives drawInteger receives drawThingML
	}
	function mock() @id `20` do
	end
	statechart init INIT @id `11` {
		state INIT @id `12` {
			on entry display!displayReady()
			transition -> MOCK
		}
		state MOCK @id `13` {
			internal
			event display?create
			action mock()
			internal
			event display?destroy
			action mock()
			internal
			event display?update
			action mock()
			internal
			event display?clear
			action mock()
			internal
			event display?setColor
			action mock()
			internal
			event display?setBGColor
			action mock()
			internal
			event display?drawRect
			action mock()
			internal
			event display?fillRect
			action mock()
			internal
			event display?drawInteger
			action mock()
			internal
			event display?drawThingML
			action mock()
		}
	}
}
thing fragment ControllerMsgs {
	message velocity(dx : Int16, dy : Int16)
	@id `17` message position(x : Int16, y : Int16)
	@id `18`
}
thing fragment Controller includes ControllerMsgs {
	provided port controls @id `11` {
		sends position
	}
}
thing fragment IAControllerMsg {
	message updateIA(ballx : Int16, bally : Int16, padx : Int16, pady : Int16)
	@id `19`
}
thing fragment IAController includes Controller , IAControllerMsg {
	required port game @id `12` {
		receives updateIA
	}
}
thing BasicIAController includes IAController /* @stdout_sync `true`*/ {
	property ctrlx : Int16 = 0 @id `35`
	statechart SC init Following @id `14` {
		state Following @id `15` {
			on entry controls!position(ctrlx, 0)
			transition -> Following
			event e : game?updateIA
			action do
				if (e.ballx > e.padx + 400) ctrlx = ctrlx + 4
				else if (e.ballx < e.padx - 400) ctrlx = ctrlx - 4
				if (ctrlx < -100) ctrlx = -100
				else if (ctrlx > 100) ctrlx = 100
			end
		}
	}
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
	@id `2`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
	@id `3`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
	@id `4`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
	@id `5`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
	@id `6`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
	@id `7`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
	@id `8`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
	@id `9`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
	@id `10`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
	@id `11`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
	@id `12`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
	@id `13`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
	@id `14`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
	@id `15`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
	@id `16`
object String
	@serializable
	@c_type `char *`
	@arduino_type `String`
	@java_type `String`
	@js_type `String`
	@go_type `string`
	@id `17`
enumeration DigitalState as UInt8 @id `18`
	{
	LOW = 0
	HIGH = 1
}
thing fragment TimerMsgs @stl {
	message timer_start(id : UInt8, time : UInt16)
	@id `20`
	message timer_cancel(id : UInt8)
	@id `21`
	message timer_timeout(id : UInt8)
	@id `22`
}
thing fragment TimerClientPort includes TimerMsgs @stl {
	required port timer @id `13` {
		sends timer_start sends timer_cancel receives timer_timeout
	}
}
thing fragment Timer includes TimerMsgs @stl {
	provided port timer @id `14` {
		sends timer_timeout receives timer_start receives timer_cancel
	}
}
thing TimerJava includes Timer @stl @java_import `import java.util.*;` @java_features `
	Hashtable<Integer, TimerTask> tasks = new Hashtable<Integer, TimerTask>();
	Timer timer = new java.util.Timer();` {
	function startTimer(id : UInt8, delay : UInt16) @id `21` do
		cancel(id)
		`final int t_id = ` & id & `;`
	`TimerTask t =  new TimerTask() { public void run(){`
		timer!timer_timeout(`t_id` as UInt8)
		`
        } };
        tasks.put(t_id, t);
        timer.schedule(t, ` & delay & `);`
	end
	function cancel(id : UInt8) @id `22` do
		`TimerTask t = tasks.get(` & id & `);`
	`if (t != null) t.cancel();`
	`timer.purge();`
	end
	statechart SoftTimer init default @id `16` {
		state default @id `17` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object JSArray @id `19`
thing TimerJS includes Timer @stl {
	property Timeouts : JSArray = `{}` as JSArray @id `36`
	function startTimer(id : UInt8, delay : UInt16) @id `23` do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = setTimeout(() => {
        `
		timer!timer_timeout(id)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) @id `24` do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          clearTimeout(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default @id `18` {
		state default @id `19` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object DriftLess @id `20`
thing TimerNodeJS includes Timer @stl @js_dep `driftless:2.0.3` {
	property Timeouts : JSArray = `{}` as JSArray @id `37`
	readonly property driftless : DriftLess = `require('driftless')` as DriftLess @id `38`
	function startTimer(id : UInt8, delay : UInt16) @id `25` do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = ` & driftless & `.setDriftlessTimeout(() => {
        `
		timer!timer_timeout(id)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) @id `26` do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          ` & driftless & `.clearDriftless(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default @id `20` {
		state default @id `21` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
thing TimerPosix includes Timer @stl @c_header `
#include <time.h>
#include <unistd.h>
#include <pthread.h>

#define NB_SOFT_TIMERS 16
` @c_global `uint32_t Timer_timeouts[NB_SOFT_TIMERS];
uint8_t  Timer_wraps[NB_SOFT_TIMERS];
uint32_t Timer_prev;
pthread_mutex_t Timer_mut;` {
	readonly property NB_SOFT_TIMERS : UInt16 = `NB_SOFT_TIMERS` as UInt16 @id `39`
	readonly property SOFT_TIMER_PERIOD : UInt16 = 50 @id `40`
	function time_ms() : UInt32 @id `27` do
	`struct timespec current;
		int res;
		uint32_t millis = 0;
		
		res = clock_gettime(CLOCK_MONOTONIC, &current);
		if (res != 0) {
			  perror("[ERROR]: Could not get current time : ");
		 } else {
			  millis  =  current.tv_sec * 1000;
			  millis += current.tv_nsec / 1000000;
		}`
		return `millis` as UInt32
	end
	function sleep_ms(timeout_ms : UInt16) @id `28` do
		`struct timeval tv;
        tv.tv_sec = ` & timeout_ms & `/1000;
        tv.tv_usec = (` & timeout_ms & `%1000) * 1000;
        select(0, NULL, NULL, NULL, &tv);`
	end
	function initialize() @id `29` do
		`pthread_mutex_init(&Timer_mut, NULL);
	    uint8_t i;
	    for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	        Timer_timeouts[i] = 0;
	        Timer_wraps[i] = 0;
	    }`
		start_soft_timer_process()
	end
	function start_soft_timer_process() @fork_linux_thread `true` @id `30` do
		`Timer_prev = ` & time_ms()& `;`
		while (true) do
			sleep_ms(SOFT_TIMER_PERIOD)
			`pthread_mutex_lock(&Timer_mut);
	        uint32_t current = ` & time_ms()& `;
	        uint8_t i;
	        for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	            if (Timer_timeouts[i] > 0) {
	                if (current >= Timer_prev) {
	                    // Normal time progression
	                    if (current > Timer_timeouts[i] && Timer_wraps[i] == 0) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                        Timer_wraps[i] = 0;
	                    }
	                } else {
	                    // A wraparound has occurred
	                    if (Timer_wraps[i] == 0) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                    } else {
	                        Timer_wraps[i] = 0;
	                        if (current > Timer_timeouts[i]) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                        }
	                    }
	                }
	            }
	        }
	        Timer_prev = current;
	        pthread_mutex_unlock(&Timer_mut);`
		end
	end
	function startTimer(id : UInt8, delay : UInt16) @id `31` do
		`
    	if (` & id & ` < NB_SOFT_TIMERS) {
	        uint32_t current = ` & time_ms()& `;
	        uint32_t timeout = current + ` & delay & `;
	        if (timeout == 0) timeout = 1;
	
	        pthread_mutex_lock(&Timer_mut);
	        Timer_timeouts[` & id & `] = timeout;
	        Timer_wraps[` & id & `] = (timeout > current) ? 0 : 1;
	        pthread_mutex_unlock(&Timer_mut);
	    }
    `
	end
	function cancel(id : UInt8) @id `32` do
		`
        if (` & id & ` < NB_SOFT_TIMERS) {
	        pthread_mutex_lock(&Timer_mut);
	        Timer_timeouts[` & id & `] = 0;
	        Timer_wraps[` & id & `] = 0;
	        pthread_mutex_unlock(&Timer_mut);
	    }
      `
	end
	statechart SoftTimer init default @id `22` {
		on entry start_soft_timer_process()
		state default @id `23` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
thing TimerArduino includes Timer @stl @c_header `
#define NB_SOFT_TIMERS 32
` @c_global `uint32_t Timer_timeouts[NB_SOFT_TIMERS];
uint8_t  Timer_wraps[NB_SOFT_TIMERS];
uint32_t Timer_prev;` {
	readonly property NB_SOFT_TIMERS : UInt16 = `NB_SOFT_TIMERS` as UInt16 @id `41`
	function time_ms() : UInt32 @id `33` do
		return `millis()` as UInt32
	end
	function init_arrays() @id `34` do
		`uint8_t i;
	    for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	        Timer_timeouts[i] = 0;
	        Timer_wraps[i] = 0;
	    }
	    Timer_prev = ` & time_ms()& `;`
	end
	function poll_soft_timers() @scheduler_polling `true` @id `35` do
		`uint32_t current = ` & time_ms()& `;
		uint8_t i;
		for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
		    if (Timer_timeouts[i] > 0) {
		        if (current >= Timer_prev) {
		            // Normal time progression
		            if (current > Timer_timeouts[i] && Timer_wraps[i] == 0) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		                Timer_wraps[i] = 0;
		            }
		        } else {
		            // A wraparound has occurred
		            if (Timer_wraps[i] == 0) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		            } else {
		                Timer_wraps[i] = 0;
		                if (current > Timer_timeouts[i]) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		                }
		            }
		        }
		    }
		}`
	end
	function startTimer(id : UInt8, delay : UInt16) @id `36` do
		`
    	if (` & id & ` < NB_SOFT_TIMERS) {
	        uint32_t current = ` & time_ms()& `;
	        uint32_t timeout = current + ` & delay & `;
	        if (timeout == 0) timeout = 1;
	
	        Timer_timeouts[` & id & `] = timeout;
	        Timer_wraps[` & id & `] = (timeout > current) ? 0 : 1;
	    }
    `
	end
	function cancel(id : UInt8) @id `37` do
		`
        if (` & id & ` < NB_SOFT_TIMERS) {
	        Timer_timeouts[` & id & `] = 0;
	        Timer_wraps[` & id & `] = 0;
	    }
      `
	end
	statechart SoftTimer init default @id `24` {
		on entry init_arrays()
		state default @id `25` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object TimerMap
	@go_type `map[uint8]*time.Timer`
	@id `21`
thing TimerGo includes TimerMsgs @stl @go_import `time` {
	provided port timer @id `15` {
		sends timer_timeout receives timer_start receives timer_cancel
	}
	property Timers : TimerMap @id `42`
	function initialize() @id `38` do
		Timers = `make(map[uint8]*time.Timer)` as TimerMap
	end
	function startTimer(id : UInt8, delay : UInt16) @id `39` do
		cancel(id)
		`
    	` & Timers & `[` & id & `] = time.AfterFunc(time.Millisecond*time.Duration(` & delay & `), func() {
    		`
		timer!timer_timeout(id)
	`
    	})
    `
	end
	function cancel(id : UInt8) @id `40` do
		`
    	if t, ok := ` & Timers & `[` & id & `]; ok {
    		t.Stop()
    		delete(` & Timers & `, ` & id & `)
    	}
    `
	end
	statechart SoftTimer init default @id `26` {
		on entry initialize()
		state default @id `27` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
configuration test @docker {
	instance game : BreakoutGameGo
	set game.DEBUG_BIN_ID = 0
	instance log : ConsoleLogger
	set log.ACTIVATE_ON_STARTUP = false
	set log.HAS_SIGNED_BYTE = false
	connector game.log => log.log		
	instance disp : HeadlessDisplay
	instance timer : TimerGo
	instance ctrl : BasicIAController
	connector game.clock => timer . timer
	connector game.display => disp . display
	connector game.controller => ctrl . controls
	connector ctrl.game => game . ia
}
