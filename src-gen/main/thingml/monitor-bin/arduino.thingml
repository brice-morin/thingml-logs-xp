thing BreakoutGameArduino includes BreakoutGame @c_global `extern char *__brkval;` {
	readonly property RAM_SIZE : Integer = 2048 @id `0`
	function quit() @monitor `not` do
		println ">done in " , stopTime - startTime , "ms!"
		println ">lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
		println ">usedMem:" , usedMemory()
	end
	function timestamp() : UInt32 @monitor `not` do
		return `millis()`
	end
	function usedMemory() : UInt32 @monitor `not` do
	`char top;`
		return RAM_SIZE - `(__brkval ? &top - __brkval : &top - __malloc_heap_start)` as UInt32
	end
	function unsetBit(variable : UInt8, bit : UInt8) : UInt8 @id `0` return (`` & variable & ` & ~(1 << ` & bit & `)`) as UInt8
}
thing fragment BreakoutGame includes TimerMsgs , DisplayMsgs , ControllerMsgs , IAControllerMsg , WithBinaryLog @monitor `functions` @monitor `properties` @monitor `events` @id `0` {
	message lostBall()
	@id `1`
	message nextLevel()
	@id `2`
	required port clock @id `1` {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	optional required port display @sync_send `true` @id `2` {
		sends create sends fillRect sends drawRect sends clear sends setColor sends setBGColor sends drawInteger sends update sends drawThingML receives displayReady
	}
	required port controller @id `3` {
		receives position
	}
	provided port ia @id `4` {
		sends updateIA
	}
	internal port game @id `5` {
		sends lostBall sends nextLevel receives lostBall receives nextLevel
	}
	optional required port req_game @id `6` {
		sends lostBall sends nextLevel
	}
	provided port pro_game @id `7` {
		receives lostBall receives nextLevel
	}
	readonly property QUIET : Boolean = true @monitor `not`
	property startTime : UInt32 @monitor `not`
	property stopTime : UInt32 @monitor `not`
	property lastTimestamp : UInt32 = 0 @monitor `not`
	property counter : UInt8 = 0 @monitor `not`
	readonly property XDISPSIZE : UInt8 = 160 @id `1`
	readonly property YDISPSIZE : UInt8 = 128 @id `2`
	readonly property SCALE : Int16 = 64 @id `3`
	readonly property XMAX : Int16 = XDISPSIZE as Int16 * SCALE @id `4`
	readonly property YMAX : Int16 = YDISPSIZE as Int16 * SCALE @id `5`
	readonly property TOP : Int16 = 14 * SCALE @id `6`
	readonly property BOTTOM : Int16 = YMAX + 8 * SCALE @id `7`
	readonly property LEFT : Int16 = 1 * SCALE @id `8`
	readonly property RIGHT : Int16 = XMAX - 1 * SCALE @id `9`
	readonly property br : Int16 = 3 * SCALE @id `10`
	property bx : Int16 = XMAX / 2 @id `11`
	property by : Int16 = YMAX @id `12`
	property dx : Int16 = XMAX / 98 @id `13`
	property dy : Int16 = -XMAX / 65 @id `14`
	property padx : Int16 = YMAX / 2 @id `15`
	property pady : Int16 = YMAX - 6 * SCALE @id `16`
	property padlen : Int16 = 25 * SCALE @id `17`
	property prevBX : Int16 = -1 @id `18`
	property prevBY : Int16 = -1 @id `19`
	property bgcolor : UInt8 [ 3 ] @id `20`
	property fgcolor : UInt8 [ 3 ] @id `21`
	readonly property period : UInt16 = 3 @id `22`
	property prevPX : Int16 = -1 @id `23`
	property prevPY : Int16 = -1 @id `24`
	readonly property BRICK_ROWS : UInt8 = 5 @id `25`
	readonly property BRICK_HEIGHT : UInt8 = 9 @id `26`
	property bricks : UInt8 [ BRICK_ROWS ] @id `27`
	property score : Int16 = 0 @id `28`
	property lives : UInt8 = 3 @id `29`
	property level : UInt8 = 1 @id `30`
	abstract function quit() @monitor `not`

	abstract function timestamp() : UInt32 @monitor `not`

	abstract function usedMemory() : UInt32 @monitor `not`

	function log(logMem : Boolean) @monitor `not` do
		if (counter == 0 or logMem) do
			var ts : UInt32
			if (lastTimestamp == 0) do
				ts = 0
				lastTimestamp = timestamp()
			end
			else do
				var t : UInt32 = timestamp()
				ts = t - lastTimestamp
				lastTimestamp = t
			end
			if (not QUIET) do
				println "ts:" , ts , ",lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
				println "#usedMem:" , usedMemory()
			end
		end
		counter ++
		if (counter == 33) counter = 0
	end
	function initColors() @id `1` do
		var initColors_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		bgcolor[0] = 53
		bgcolor[1] = 40
		bgcolor[2] = 120
		fgcolor[0] = 107
		fgcolor[1] = 94
		fgcolor[2] = 174
		do
			readonly var r_596 : UInt8 = bgcolor [0]
			readonly var g_597 : UInt8 = bgcolor [1]
			readonly var b_598 : UInt8 = bgcolor [2]
			display!setBGColor(r_596, g_597, b_598)
			var setBGColorsent_log_599 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setBGColorsent_log_599[0] = LogType : message_sent
			setBGColorsent_log_599[1] = DEBUG_BIN_ID
			setBGColorsent_log_599[2] = 0x02
			setBGColorsent_log_599[3] = 0x08
			setBGColorsent_log_599[4] = r_596 as Byte
			setBGColorsent_log_599[5] = g_597 as Byte
			setBGColorsent_log_599[6] = b_598 as Byte
			log!log(setBGColorsent_log_599, 7)
		end
		do
			readonly var r_600 : UInt8 = fgcolor [0]
			readonly var g_601 : UInt8 = fgcolor [1]
			readonly var b_602 : UInt8 = fgcolor [2]
			display!setColor(r_600, g_601, b_602)
			var setColorsent_log_603 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_603[0] = LogType : message_sent
			setColorsent_log_603[1] = DEBUG_BIN_ID
			setColorsent_log_603[2] = 0x02
			setColorsent_log_603[3] = 0x07
			setColorsent_log_603[4] = r_600 as Byte
			setColorsent_log_603[5] = g_601 as Byte
			setColorsent_log_603[6] = b_602 as Byte
			log!log(setColorsent_log_603, 7)
		end
		do
			initColors_log[0] = LogType : function_called
			initColors_log[1] = DEBUG_BIN_ID
			initColors_log[2] = 0x01
			initColors_log[3] = 0x00
			log!log(initColors_log, 4)
		end
	end
	function resetBall() @id `2` do
		var resetBall_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var old_bx_4 : Int16 = bx
			bx = padx - br / SCALE
			readonly var new_bx_4 : Int16 = bx
			var bx_log_4 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			bx_log_4[0] = LogType : property_changed
			bx_log_4[1] = DEBUG_BIN_ID
			bx_log_4[2] = 0x0B
			bx_log_4[3] = (`((` & old_bx_4 & ` >> 8) & 0xFF)`) as Byte
			bx_log_4[4] = (`((` & old_bx_4 & ` >> 0) & 0xFF)`) as Byte
			bx_log_4[5] = (`((` & new_bx_4 & ` >> 8) & 0xFF)`) as Byte
			bx_log_4[6] = (`((` & new_bx_4 & ` >> 0) & 0xFF)`) as Byte
			log!log(bx_log_4, 7)
		end
		do
			readonly var old_by_8 : Int16 = by
			by = pady - br / SCALE
			readonly var new_by_8 : Int16 = by
			var by_log_8 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			by_log_8[0] = LogType : property_changed
			by_log_8[1] = DEBUG_BIN_ID
			by_log_8[2] = 0x0C
			by_log_8[3] = (`((` & old_by_8 & ` >> 8) & 0xFF)`) as Byte
			by_log_8[4] = (`((` & old_by_8 & ` >> 0) & 0xFF)`) as Byte
			by_log_8[5] = (`((` & new_by_8 & ` >> 8) & 0xFF)`) as Byte
			by_log_8[6] = (`((` & new_by_8 & ` >> 0) & 0xFF)`) as Byte
			log!log(by_log_8, 7)
		end
		do
			readonly var old_dx_29 : Int16 = dx
			dx = (padx + prevBX + prevBY) % 300 - 150
			readonly var new_dx_29 : Int16 = dx
			var dx_log_29 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			dx_log_29[0] = LogType : property_changed
			dx_log_29[1] = DEBUG_BIN_ID
			dx_log_29[2] = 0x0D
			dx_log_29[3] = (`((` & old_dx_29 & ` >> 8) & 0xFF)`) as Byte
			dx_log_29[4] = (`((` & old_dx_29 & ` >> 0) & 0xFF)`) as Byte
			dx_log_29[5] = (`((` & new_dx_29 & ` >> 8) & 0xFF)`) as Byte
			dx_log_29[6] = (`((` & new_dx_29 & ` >> 0) & 0xFF)`) as Byte
			log!log(dx_log_29, 7)
		end
		if (dy > 0) do
			readonly var old_dy_15 : Int16 = dy
			dy = -dy
			readonly var new_dy_15 : Int16 = dy
			var dy_log_15 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			dy_log_15[0] = LogType : property_changed
			dy_log_15[1] = DEBUG_BIN_ID
			dy_log_15[2] = 0x0E
			dy_log_15[3] = (`((` & old_dy_15 & ` >> 8) & 0xFF)`) as Byte
			dy_log_15[4] = (`((` & old_dy_15 & ` >> 0) & 0xFF)`) as Byte
			dy_log_15[5] = (`((` & new_dy_15 & ` >> 8) & 0xFF)`) as Byte
			dy_log_15[6] = (`((` & new_dy_15 & ` >> 0) & 0xFF)`) as Byte
			log!log(dy_log_15, 7)
		end
		do
			readonly var old_prevBX_26 : Int16 = prevBX
			prevBX = -1
			readonly var new_prevBX_26 : Int16 = prevBX
			var prevBX_log_26 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBX_log_26[0] = LogType : property_changed
			prevBX_log_26[1] = DEBUG_BIN_ID
			prevBX_log_26[2] = 0x12
			prevBX_log_26[3] = (`((` & old_prevBX_26 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_26[4] = (`((` & old_prevBX_26 & ` >> 0) & 0xFF)`) as Byte
			prevBX_log_26[5] = (`((` & new_prevBX_26 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_26[6] = (`((` & new_prevBX_26 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBX_log_26, 7)
		end
		do
			readonly var old_prevBY_23 : Int16 = prevBY
			prevBY = -1
			readonly var new_prevBY_23 : Int16 = prevBY
			var prevBY_log_23 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBY_log_23[0] = LogType : property_changed
			prevBY_log_23[1] = DEBUG_BIN_ID
			prevBY_log_23[2] = 0x13
			prevBY_log_23[3] = (`((` & old_prevBY_23 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_23[4] = (`((` & old_prevBY_23 & ` >> 0) & 0xFF)`) as Byte
			prevBY_log_23[5] = (`((` & new_prevBY_23 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_23[6] = (`((` & new_prevBY_23 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBY_log_23, 7)
		end
		do
			resetBall_log[0] = LogType : function_called
			resetBall_log[1] = DEBUG_BIN_ID
			resetBall_log[2] = 0x02
			resetBall_log[3] = 0x00
			log!log(resetBall_log, 4)
		end
	end
	function eraseBall() @id `3` do
		var eraseBall_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var bs : Int16 = (br * 2) / SCALE
		if (prevBX > 0) do
			do
				readonly var r_604 : UInt8 = bgcolor [0]
				readonly var g_605 : UInt8 = bgcolor [1]
				readonly var b_606 : UInt8 = bgcolor [2]
				display!setColor(r_604, g_605, b_606)
				var setColorsent_log_607 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setColorsent_log_607[0] = LogType : message_sent
				setColorsent_log_607[1] = DEBUG_BIN_ID
				setColorsent_log_607[2] = 0x02
				setColorsent_log_607[3] = 0x07
				setColorsent_log_607[4] = r_604 as Byte
				setColorsent_log_607[5] = g_605 as Byte
				setColorsent_log_607[6] = b_606 as Byte
				log!log(setColorsent_log_607, 7)
			end
			do
				readonly var x_608 : UInt8 = prevBX as UInt8
				readonly var y_609 : UInt8 = prevBY as UInt8
				readonly var width_610 : UInt8 = bs as UInt8
				readonly var height_611 : UInt8 = bs as UInt8
				display!fillRect(x_608, y_609, width_610, height_611)
				var fillRectsent_log_612 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				fillRectsent_log_612[0] = LogType : message_sent
				fillRectsent_log_612[1] = DEBUG_BIN_ID
				fillRectsent_log_612[2] = 0x02
				fillRectsent_log_612[3] = 0x0A
				fillRectsent_log_612[4] = x_608 as Byte
				fillRectsent_log_612[5] = y_609 as Byte
				fillRectsent_log_612[6] = width_610 as Byte
				fillRectsent_log_612[7] = height_611 as Byte
				log!log(fillRectsent_log_612, 8)
			end
		end
		do
			readonly var old_prevBX_27 : Int16 = prevBX
			prevBX = -1
			readonly var new_prevBX_27 : Int16 = prevBX
			var prevBX_log_27 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBX_log_27[0] = LogType : property_changed
			prevBX_log_27[1] = DEBUG_BIN_ID
			prevBX_log_27[2] = 0x12
			prevBX_log_27[3] = (`((` & old_prevBX_27 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_27[4] = (`((` & old_prevBX_27 & ` >> 0) & 0xFF)`) as Byte
			prevBX_log_27[5] = (`((` & new_prevBX_27 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_27[6] = (`((` & new_prevBX_27 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBX_log_27, 7)
		end
		do
			readonly var old_prevBY_24 : Int16 = prevBY
			prevBY = -1
			readonly var new_prevBY_24 : Int16 = prevBY
			var prevBY_log_24 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBY_log_24[0] = LogType : property_changed
			prevBY_log_24[1] = DEBUG_BIN_ID
			prevBY_log_24[2] = 0x13
			prevBY_log_24[3] = (`((` & old_prevBY_24 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_24[4] = (`((` & old_prevBY_24 & ` >> 0) & 0xFF)`) as Byte
			prevBY_log_24[5] = (`((` & new_prevBY_24 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_24[6] = (`((` & new_prevBY_24 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBY_log_24, 7)
		end
		do
			eraseBall_log[0] = LogType : function_called
			eraseBall_log[1] = DEBUG_BIN_ID
			eraseBall_log[2] = 0x03
			eraseBall_log[3] = 0x00
			log!log(eraseBall_log, 4)
		end
	end
	function drawBall() @id `4` do
		var drawBall_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var bs : Int16 = (br * 2) / SCALE
		eraseBall()
		do
			readonly var old_prevBX_28 : Int16 = prevBX
			prevBX = (bx - br) / SCALE
			readonly var new_prevBX_28 : Int16 = prevBX
			var prevBX_log_28 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBX_log_28[0] = LogType : property_changed
			prevBX_log_28[1] = DEBUG_BIN_ID
			prevBX_log_28[2] = 0x12
			prevBX_log_28[3] = (`((` & old_prevBX_28 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_28[4] = (`((` & old_prevBX_28 & ` >> 0) & 0xFF)`) as Byte
			prevBX_log_28[5] = (`((` & new_prevBX_28 & ` >> 8) & 0xFF)`) as Byte
			prevBX_log_28[6] = (`((` & new_prevBX_28 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBX_log_28, 7)
		end
		do
			readonly var old_prevBY_25 : Int16 = prevBY
			prevBY = (by - br) / SCALE
			readonly var new_prevBY_25 : Int16 = prevBY
			var prevBY_log_25 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevBY_log_25[0] = LogType : property_changed
			prevBY_log_25[1] = DEBUG_BIN_ID
			prevBY_log_25[2] = 0x13
			prevBY_log_25[3] = (`((` & old_prevBY_25 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_25[4] = (`((` & old_prevBY_25 & ` >> 0) & 0xFF)`) as Byte
			prevBY_log_25[5] = (`((` & new_prevBY_25 & ` >> 8) & 0xFF)`) as Byte
			prevBY_log_25[6] = (`((` & new_prevBY_25 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevBY_log_25, 7)
		end
		do
			readonly var r_613 : UInt8 = 183
			readonly var g_614 : UInt8 = 199
			readonly var b_615 : UInt8 = 111
			display!setColor(r_613, g_614, b_615)
			var setColorsent_log_616 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_616[0] = LogType : message_sent
			setColorsent_log_616[1] = DEBUG_BIN_ID
			setColorsent_log_616[2] = 0x02
			setColorsent_log_616[3] = 0x07
			setColorsent_log_616[4] = r_613 as Byte
			setColorsent_log_616[5] = g_614 as Byte
			setColorsent_log_616[6] = b_615 as Byte
			log!log(setColorsent_log_616, 7)
		end
		do
			readonly var x_617 : UInt8 = prevBX as UInt8
			readonly var y_618 : UInt8 = prevBY as UInt8
			readonly var width_619 : UInt8 = bs as UInt8
			readonly var height_620 : UInt8 = bs as UInt8
			display!fillRect(x_617, y_618, width_619, height_620)
			var fillRectsent_log_621 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_621[0] = LogType : message_sent
			fillRectsent_log_621[1] = DEBUG_BIN_ID
			fillRectsent_log_621[2] = 0x02
			fillRectsent_log_621[3] = 0x0A
			fillRectsent_log_621[4] = x_617 as Byte
			fillRectsent_log_621[5] = y_618 as Byte
			fillRectsent_log_621[6] = width_619 as Byte
			fillRectsent_log_621[7] = height_620 as Byte
			log!log(fillRectsent_log_621, 8)
		end
		do
			drawBall_log[0] = LogType : function_called
			drawBall_log[1] = DEBUG_BIN_ID
			drawBall_log[2] = 0x04
			drawBall_log[3] = 0x00
			log!log(drawBall_log, 4)
		end
	end
	function erasePad() @id `5` do
		var erasePad_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var ps : Int16 = padlen / SCALE
		if (prevPX > 0) do
			do
				readonly var r_622 : UInt8 = bgcolor [0]
				readonly var g_623 : UInt8 = bgcolor [1]
				readonly var b_624 : UInt8 = bgcolor [2]
				display!setColor(r_622, g_623, b_624)
				var setColorsent_log_625 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setColorsent_log_625[0] = LogType : message_sent
				setColorsent_log_625[1] = DEBUG_BIN_ID
				setColorsent_log_625[2] = 0x02
				setColorsent_log_625[3] = 0x07
				setColorsent_log_625[4] = r_622 as Byte
				setColorsent_log_625[5] = g_623 as Byte
				setColorsent_log_625[6] = b_624 as Byte
				log!log(setColorsent_log_625, 7)
			end
			do
				readonly var x_626 : UInt8 = prevPX as UInt8
				readonly var y_627 : UInt8 = prevPY as UInt8
				readonly var width_628 : UInt8 = ps as UInt8
				readonly var height_629 : UInt8 = 4
				display!fillRect(x_626, y_627, width_628, height_629)
				var fillRectsent_log_630 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				fillRectsent_log_630[0] = LogType : message_sent
				fillRectsent_log_630[1] = DEBUG_BIN_ID
				fillRectsent_log_630[2] = 0x02
				fillRectsent_log_630[3] = 0x0A
				fillRectsent_log_630[4] = x_626 as Byte
				fillRectsent_log_630[5] = y_627 as Byte
				fillRectsent_log_630[6] = width_628 as Byte
				fillRectsent_log_630[7] = height_629 as Byte
				log!log(fillRectsent_log_630, 8)
			end
		end
		do
			erasePad_log[0] = LogType : function_called
			erasePad_log[1] = DEBUG_BIN_ID
			erasePad_log[2] = 0x05
			erasePad_log[3] = 0x00
			log!log(erasePad_log, 4)
		end
	end
	function drawPad() @id `6` do
		var drawPad_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var ps : Int16 = padlen / SCALE
		erasePad()
		do
			readonly var old_prevPX_1 : Int16 = prevPX
			prevPX = (padx - (padlen / 2)) / SCALE
			readonly var new_prevPX_1 : Int16 = prevPX
			var prevPX_log_1 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevPX_log_1[0] = LogType : property_changed
			prevPX_log_1[1] = DEBUG_BIN_ID
			prevPX_log_1[2] = 0x17
			prevPX_log_1[3] = (`((` & old_prevPX_1 & ` >> 8) & 0xFF)`) as Byte
			prevPX_log_1[4] = (`((` & old_prevPX_1 & ` >> 0) & 0xFF)`) as Byte
			prevPX_log_1[5] = (`((` & new_prevPX_1 & ` >> 8) & 0xFF)`) as Byte
			prevPX_log_1[6] = (`((` & new_prevPX_1 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevPX_log_1, 7)
		end
		do
			readonly var old_prevPY_14 : Int16 = prevPY
			prevPY = pady / SCALE
			readonly var new_prevPY_14 : Int16 = prevPY
			var prevPY_log_14 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			prevPY_log_14[0] = LogType : property_changed
			prevPY_log_14[1] = DEBUG_BIN_ID
			prevPY_log_14[2] = 0x18
			prevPY_log_14[3] = (`((` & old_prevPY_14 & ` >> 8) & 0xFF)`) as Byte
			prevPY_log_14[4] = (`((` & old_prevPY_14 & ` >> 0) & 0xFF)`) as Byte
			prevPY_log_14[5] = (`((` & new_prevPY_14 & ` >> 8) & 0xFF)`) as Byte
			prevPY_log_14[6] = (`((` & new_prevPY_14 & ` >> 0) & 0xFF)`) as Byte
			log!log(prevPY_log_14, 7)
		end
		do
			readonly var r_631 : UInt8 = fgcolor [0]
			readonly var g_632 : UInt8 = fgcolor [1]
			readonly var b_633 : UInt8 = fgcolor [2]
			display!setColor(r_631, g_632, b_633)
			var setColorsent_log_634 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_634[0] = LogType : message_sent
			setColorsent_log_634[1] = DEBUG_BIN_ID
			setColorsent_log_634[2] = 0x02
			setColorsent_log_634[3] = 0x07
			setColorsent_log_634[4] = r_631 as Byte
			setColorsent_log_634[5] = g_632 as Byte
			setColorsent_log_634[6] = b_633 as Byte
			log!log(setColorsent_log_634, 7)
		end
		do
			readonly var x_635 : UInt8 = prevPX as UInt8
			readonly var y_636 : UInt8 = prevPY as UInt8
			readonly var width_637 : UInt8 = ps as UInt8
			readonly var height_638 : UInt8 = 4
			display!fillRect(x_635, y_636, width_637, height_638)
			var fillRectsent_log_639 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_639[0] = LogType : message_sent
			fillRectsent_log_639[1] = DEBUG_BIN_ID
			fillRectsent_log_639[2] = 0x02
			fillRectsent_log_639[3] = 0x0A
			fillRectsent_log_639[4] = x_635 as Byte
			fillRectsent_log_639[5] = y_636 as Byte
			fillRectsent_log_639[6] = width_637 as Byte
			fillRectsent_log_639[7] = height_638 as Byte
			log!log(fillRectsent_log_639, 8)
		end
		do
			drawPad_log[0] = LogType : function_called
			drawPad_log[1] = DEBUG_BIN_ID
			drawPad_log[2] = 0x06
			drawPad_log[3] = 0x00
			log!log(drawPad_log, 4)
		end
	end
	function drawCountDown(c : Int16) @id `7` do
		var drawCountDown_log : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
		do
			readonly var r_640 : UInt8 = fgcolor [0]
			readonly var g_641 : UInt8 = fgcolor [1]
			readonly var b_642 : UInt8 = fgcolor [2]
			display!setColor(r_640, g_641, b_642)
			var setColorsent_log_643 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_643[0] = LogType : message_sent
			setColorsent_log_643[1] = DEBUG_BIN_ID
			setColorsent_log_643[2] = 0x02
			setColorsent_log_643[3] = 0x07
			setColorsent_log_643[4] = r_640 as Byte
			setColorsent_log_643[5] = g_641 as Byte
			setColorsent_log_643[6] = b_642 as Byte
			log!log(setColorsent_log_643, 7)
		end
		if (c > 0) do
			do
				readonly var r_644 : UInt8 = fgcolor [0]
				readonly var g_645 : UInt8 = fgcolor [1]
				readonly var b_646 : UInt8 = fgcolor [2]
				display!setColor(r_644, g_645, b_646)
				var setColorsent_log_647 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setColorsent_log_647[0] = LogType : message_sent
				setColorsent_log_647[1] = DEBUG_BIN_ID
				setColorsent_log_647[2] = 0x02
				setColorsent_log_647[3] = 0x07
				setColorsent_log_647[4] = r_644 as Byte
				setColorsent_log_647[5] = g_645 as Byte
				setColorsent_log_647[6] = b_646 as Byte
				log!log(setColorsent_log_647, 7)
			end
			do
				readonly var r_648 : UInt8 = bgcolor [0]
				readonly var g_649 : UInt8 = bgcolor [1]
				readonly var b_650 : UInt8 = bgcolor [2]
				display!setBGColor(r_648, g_649, b_650)
				var setBGColorsent_log_651 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setBGColorsent_log_651[0] = LogType : message_sent
				setBGColorsent_log_651[1] = DEBUG_BIN_ID
				setBGColorsent_log_651[2] = 0x02
				setBGColorsent_log_651[3] = 0x08
				setBGColorsent_log_651[4] = r_648 as Byte
				setBGColorsent_log_651[5] = g_649 as Byte
				setBGColorsent_log_651[6] = b_650 as Byte
				log!log(setBGColorsent_log_651, 7)
			end
			do
				readonly var x_652 : UInt8 = 80 - 6
				readonly var y_653 : UInt8 = 90
				readonly var v_654 : Int16 = c
				readonly var digits_655 : UInt8 = 1
				readonly var scale_656 : UInt8 = 4
				display!drawInteger(x_652, y_653, v_654, digits_655, scale_656)
				var drawIntegersent_log_657 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				drawIntegersent_log_657[0] = LogType : message_sent
				drawIntegersent_log_657[1] = DEBUG_BIN_ID
				drawIntegersent_log_657[2] = 0x02
				drawIntegersent_log_657[3] = 0x0B
				drawIntegersent_log_657[4] = x_652 as Byte
				drawIntegersent_log_657[5] = y_653 as Byte
				drawIntegersent_log_657[6] = (`((` & v_654 & ` >> 8) & 0xFF)`) as Byte
				drawIntegersent_log_657[7] = (`((` & v_654 & ` >> 0) & 0xFF)`) as Byte
				drawIntegersent_log_657[7] = digits_655 as Byte
				drawIntegersent_log_657[8] = scale_656 as Byte
				log!log(drawIntegersent_log_657, 10)
			end
		end
		else do
			do
				readonly var r_658 : UInt8 = bgcolor [0]
				readonly var g_659 : UInt8 = bgcolor [1]
				readonly var b_660 : UInt8 = bgcolor [2]
				display!setColor(r_658, g_659, b_660)
				var setColorsent_log_661 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				setColorsent_log_661[0] = LogType : message_sent
				setColorsent_log_661[1] = DEBUG_BIN_ID
				setColorsent_log_661[2] = 0x02
				setColorsent_log_661[3] = 0x07
				setColorsent_log_661[4] = r_658 as Byte
				setColorsent_log_661[5] = g_659 as Byte
				setColorsent_log_661[6] = b_660 as Byte
				log!log(setColorsent_log_661, 7)
			end
			do
				readonly var x_662 : UInt8 = 80 - 6
				readonly var y_663 : UInt8 = 90
				readonly var width_664 : UInt8 = 12
				readonly var height_665 : UInt8 = 20
				display!fillRect(x_662, y_663, width_664, height_665)
				var fillRectsent_log_666 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				fillRectsent_log_666[0] = LogType : message_sent
				fillRectsent_log_666[1] = DEBUG_BIN_ID
				fillRectsent_log_666[2] = 0x02
				fillRectsent_log_666[3] = 0x0A
				fillRectsent_log_666[4] = x_662 as Byte
				fillRectsent_log_666[5] = y_663 as Byte
				fillRectsent_log_666[6] = width_664 as Byte
				fillRectsent_log_666[7] = height_665 as Byte
				log!log(fillRectsent_log_666, 8)
			end
		end
		do
			drawCountDown_log[0] = LogType : function_called
			drawCountDown_log[1] = DEBUG_BIN_ID
			drawCountDown_log[2] = 0x07
			drawCountDown_log[3] = 0x00
			drawCountDown_log[4] = (`((` & c & ` >> 8) & 0xFF)`) as Byte
			drawCountDown_log[5] = (`((` & c & ` >> 0) & 0xFF)`) as Byte
			log!log(drawCountDown_log, 6)
		end
	end
	function drawWalls() @id `8` do
		var drawWalls_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var r_667 : UInt8 = fgcolor [0]
			readonly var g_668 : UInt8 = fgcolor [1]
			readonly var b_669 : UInt8 = fgcolor [2]
			display!setColor(r_667, g_668, b_669)
			var setColorsent_log_670 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_670[0] = LogType : message_sent
			setColorsent_log_670[1] = DEBUG_BIN_ID
			setColorsent_log_670[2] = 0x02
			setColorsent_log_670[3] = 0x07
			setColorsent_log_670[4] = r_667 as Byte
			setColorsent_log_670[5] = g_668 as Byte
			setColorsent_log_670[6] = b_669 as Byte
			log!log(setColorsent_log_670, 7)
		end
		readonly var left : UInt8 = (LEFT / SCALE) as UInt8
		readonly var right : UInt8 = (RIGHT / SCALE) as UInt8
		readonly var top : UInt8 = (TOP / SCALE) as UInt8
		readonly var bottom : UInt8 = (BOTTOM / SCALE) as UInt8
		readonly var xcenter : UInt8 = ((RIGHT - LEFT) / SCALE) as UInt8
		readonly var ycenter : UInt8 = ((BOTTOM - TOP) / SCALE) as UInt8
		do
			readonly var x_671 : UInt8 = left - 1
			readonly var y_672 : UInt8 = top - 1
			readonly var width_673 : UInt8 = xcenter + 1
			readonly var height_674 : UInt8 = 1
			display!fillRect(x_671, y_672, width_673, height_674)
			var fillRectsent_log_675 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_675[0] = LogType : message_sent
			fillRectsent_log_675[1] = DEBUG_BIN_ID
			fillRectsent_log_675[2] = 0x02
			fillRectsent_log_675[3] = 0x0A
			fillRectsent_log_675[4] = x_671 as Byte
			fillRectsent_log_675[5] = y_672 as Byte
			fillRectsent_log_675[6] = width_673 as Byte
			fillRectsent_log_675[7] = height_674 as Byte
			log!log(fillRectsent_log_675, 8)
		end
		do
			readonly var x_676 : UInt8 = left - 1
			readonly var y_677 : UInt8 = bottom
			readonly var width_678 : UInt8 = xcenter + 1
			readonly var height_679 : UInt8 = 1
			display!fillRect(x_676, y_677, width_678, height_679)
			var fillRectsent_log_680 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_680[0] = LogType : message_sent
			fillRectsent_log_680[1] = DEBUG_BIN_ID
			fillRectsent_log_680[2] = 0x02
			fillRectsent_log_680[3] = 0x0A
			fillRectsent_log_680[4] = x_676 as Byte
			fillRectsent_log_680[5] = y_677 as Byte
			fillRectsent_log_680[6] = width_678 as Byte
			fillRectsent_log_680[7] = height_679 as Byte
			log!log(fillRectsent_log_680, 8)
		end
		do
			readonly var x_681 : UInt8 = left - 1
			readonly var y_682 : UInt8 = top
			readonly var width_683 : UInt8 = 1
			readonly var height_684 : UInt8 = ycenter
			display!fillRect(x_681, y_682, width_683, height_684)
			var fillRectsent_log_685 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_685[0] = LogType : message_sent
			fillRectsent_log_685[1] = DEBUG_BIN_ID
			fillRectsent_log_685[2] = 0x02
			fillRectsent_log_685[3] = 0x0A
			fillRectsent_log_685[4] = x_681 as Byte
			fillRectsent_log_685[5] = y_682 as Byte
			fillRectsent_log_685[6] = width_683 as Byte
			fillRectsent_log_685[7] = height_684 as Byte
			log!log(fillRectsent_log_685, 8)
		end
		do
			readonly var x_686 : UInt8 = right
			readonly var y_687 : UInt8 = top
			readonly var width_688 : UInt8 = 1
			readonly var height_689 : UInt8 = ycenter
			display!fillRect(x_686, y_687, width_688, height_689)
			var fillRectsent_log_690 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_690[0] = LogType : message_sent
			fillRectsent_log_690[1] = DEBUG_BIN_ID
			fillRectsent_log_690[2] = 0x02
			fillRectsent_log_690[3] = 0x0A
			fillRectsent_log_690[4] = x_686 as Byte
			fillRectsent_log_690[5] = y_687 as Byte
			fillRectsent_log_690[6] = width_688 as Byte
			fillRectsent_log_690[7] = height_689 as Byte
			log!log(fillRectsent_log_690, 8)
		end
		do
			drawWalls_log[0] = LogType : function_called
			drawWalls_log[1] = DEBUG_BIN_ID
			drawWalls_log[2] = 0x08
			drawWalls_log[3] = 0x00
			log!log(drawWalls_log, 4)
		end
	end
	function bitIsSet(variable : UInt8, bit : UInt8) : Boolean @id `9` do
		var bitIsSet_log : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
		readonly var return_1 : Boolean = (`((1 << ` & bit & `) & ` & variable & `) != 0`) as Boolean
		do
			bitIsSet_log[0] = LogType : function_called
			bitIsSet_log[1] = DEBUG_BIN_ID
			bitIsSet_log[2] = 0x09
			bitIsSet_log[3] = 0x04
			bitIsSet_log[4] = variable as Byte
			var return_1_byte : Byte = 0
			if (return_1) return_1_byte = 1
			bitIsSet_log[6] = return_1_byte
			bitIsSet_log[5] = bit as Byte
		end
		log!log(bitIsSet_log, 7)
		return return_1
	end
	abstract function unsetBit(variable : UInt8, bit : UInt8) : UInt8

	function createBricks() @id `10` do
		var createBricks_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			bricks[y] = 0xFF
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					drawBrick(x, y)
				end
				x = x + 1
			end
			y = y + 1
		end
		do
			createBricks_log[0] = LogType : function_called
			createBricks_log[1] = DEBUG_BIN_ID
			createBricks_log[2] = 0x0A
			createBricks_log[3] = 0x00
			log!log(createBricks_log, 4)
		end
	end
	function bricksLeft() : UInt8 @id `11` do
		var bricksLeft_log : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
		var result : UInt8 = 0
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					result = result + 1
				end
				x = x + 1
			end
			y = y + 1
		end
		readonly var return_4 : UInt8 = result
		do
			bricksLeft_log[0] = LogType : function_called
			bricksLeft_log[1] = DEBUG_BIN_ID
			bricksLeft_log[2] = 0x0B
			bricksLeft_log[4] = return_4 as Byte
			bricksLeft_log[3] = 0x05
		end
		log!log(bricksLeft_log, 5)
		return return_4
	end
	function drawBrick(x : UInt8, y : UInt8) @id `12` do
		var drawBrick_log : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		readonly var w : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
		readonly var h : UInt8 = (BRICK_HEIGHT - 2) as UInt8
		do
			readonly var r_691 : UInt8 = 155
			readonly var g_692 : UInt8 = 103
			readonly var b_693 : UInt8 = 89
			display!setColor(r_691, g_692, b_693)
			var setColorsent_log_694 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_694[0] = LogType : message_sent
			setColorsent_log_694[1] = DEBUG_BIN_ID
			setColorsent_log_694[2] = 0x02
			setColorsent_log_694[3] = 0x07
			setColorsent_log_694[4] = r_691 as Byte
			setColorsent_log_694[5] = g_692 as Byte
			setColorsent_log_694[6] = b_693 as Byte
			log!log(setColorsent_log_694, 7)
		end
		do
			readonly var x_695 : UInt8 = bx
			readonly var y_696 : UInt8 = by
			readonly var width_697 : UInt8 = w
			readonly var height_698 : UInt8 = h
			display!fillRect(x_695, y_696, width_697, height_698)
			var fillRectsent_log_699 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_699[0] = LogType : message_sent
			fillRectsent_log_699[1] = DEBUG_BIN_ID
			fillRectsent_log_699[2] = 0x02
			fillRectsent_log_699[3] = 0x0A
			fillRectsent_log_699[4] = x_695 as Byte
			fillRectsent_log_699[5] = y_696 as Byte
			fillRectsent_log_699[6] = width_697 as Byte
			fillRectsent_log_699[7] = height_698 as Byte
			log!log(fillRectsent_log_699, 8)
		end
		do
			readonly var r_700 : UInt8 = 100
			readonly var g_701 : UInt8 = 56
			readonly var b_702 : UInt8 = 43
			display!setColor(r_700, g_701, b_702)
			var setColorsent_log_703 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_703[0] = LogType : message_sent
			setColorsent_log_703[1] = DEBUG_BIN_ID
			setColorsent_log_703[2] = 0x02
			setColorsent_log_703[3] = 0x07
			setColorsent_log_703[4] = r_700 as Byte
			setColorsent_log_703[5] = g_701 as Byte
			setColorsent_log_703[6] = b_702 as Byte
			log!log(setColorsent_log_703, 7)
		end
		do
			readonly var x_704 : UInt8 = bx
			readonly var y_705 : UInt8 = by
			readonly var width_706 : UInt8 = w
			readonly var height_707 : UInt8 = h
			display!drawRect(x_704, y_705, width_706, height_707)
			var drawRectsent_log_708 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			drawRectsent_log_708[0] = LogType : message_sent
			drawRectsent_log_708[1] = DEBUG_BIN_ID
			drawRectsent_log_708[2] = 0x02
			drawRectsent_log_708[3] = 0x09
			drawRectsent_log_708[4] = x_704 as Byte
			drawRectsent_log_708[5] = y_705 as Byte
			drawRectsent_log_708[6] = width_706 as Byte
			drawRectsent_log_708[7] = height_707 as Byte
			log!log(drawRectsent_log_708, 8)
		end
		do
			drawBrick_log[0] = LogType : function_called
			drawBrick_log[1] = DEBUG_BIN_ID
			drawBrick_log[2] = 0x0C
			drawBrick_log[3] = 0x00
			drawBrick_log[4] = x as Byte
			drawBrick_log[5] = y as Byte
			log!log(drawBrick_log, 6)
		end
	end
	function removeBrick(x : UInt8, y : UInt8) @id `13` do
		var removeBrick_log : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		do
			readonly var r_709 : UInt8 = bgcolor [0]
			readonly var g_710 : UInt8 = bgcolor [1]
			readonly var b_711 : UInt8 = bgcolor [2]
			display!setColor(r_709, g_710, b_711)
			var setColorsent_log_712 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_712[0] = LogType : message_sent
			setColorsent_log_712[1] = DEBUG_BIN_ID
			setColorsent_log_712[2] = 0x02
			setColorsent_log_712[3] = 0x07
			setColorsent_log_712[4] = r_709 as Byte
			setColorsent_log_712[5] = g_710 as Byte
			setColorsent_log_712[6] = b_711 as Byte
			log!log(setColorsent_log_712, 7)
		end
		do
			readonly var x_713 : UInt8 = bx
			readonly var y_714 : UInt8 = by
			readonly var width_715 : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
			readonly var height_716 : UInt8 = BRICK_HEIGHT - 2
			display!fillRect(x_713, y_714, width_715, height_716)
			var fillRectsent_log_717 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_717[0] = LogType : message_sent
			fillRectsent_log_717[1] = DEBUG_BIN_ID
			fillRectsent_log_717[2] = 0x02
			fillRectsent_log_717[3] = 0x0A
			fillRectsent_log_717[4] = x_713 as Byte
			fillRectsent_log_717[5] = y_714 as Byte
			fillRectsent_log_717[6] = width_715 as Byte
			fillRectsent_log_717[7] = height_716 as Byte
			log!log(fillRectsent_log_717, 8)
		end
		bricks[y] = unsetBit(bricks [y], x)
		do
			removeBrick_log[0] = LogType : function_called
			removeBrick_log[1] = DEBUG_BIN_ID
			removeBrick_log[2] = 0x0D
			removeBrick_log[3] = 0x00
			removeBrick_log[4] = x as Byte
			removeBrick_log[5] = y as Byte
			log!log(removeBrick_log, 6)
		end
	end
	function collideBrick(xpos : Int16, ypos : Int16) : Boolean @id `14` do
		var collideBrick_log : Byte [ 9 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
		var bry : Int16 = (ypos as Int16 - TOP - 20 * SCALE) / (BRICK_HEIGHT as Int16 * SCALE)
		var result : Boolean = false
		if (bry >= 0 and bry < BRICK_ROWS as Int16) do
			var brx : Int16 = (xpos as Int16 - LEFT) / ((RIGHT - LEFT) / 8)
			if (bitIsSet(bricks [bry], brx as UInt8)) do
				removeBrick(brx as UInt8, bry as UInt8)
				result = true
			end
		end
		readonly var return_4 : Boolean = result
		do
			collideBrick_log[0] = LogType : function_called
			collideBrick_log[1] = DEBUG_BIN_ID
			collideBrick_log[2] = 0x0E
			collideBrick_log[3] = 0x04
			collideBrick_log[4] = (`((` & xpos & ` >> 8) & 0xFF)`) as Byte
			collideBrick_log[6] = (`((` & ypos & ` >> 8) & 0xFF)`) as Byte
			collideBrick_log[7] = (`((` & ypos & ` >> 0) & 0xFF)`) as Byte
			var return_4_byte : Byte = 0
			if (return_4) return_4_byte = 1
			collideBrick_log[8] = return_4_byte
			collideBrick_log[5] = (`((` & xpos & ` >> 0) & 0xFF)`) as Byte
		end
		log!log(collideBrick_log, 9)
		return return_4
	end
	function drawLevel() @id `15` do
		var drawLevel_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var r_718 : UInt8 = 158
			readonly var g_719 : UInt8 = 209
			readonly var b_720 : UInt8 = 130
			display!setColor(r_718, g_719, b_720)
			var setColorsent_log_721 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_721[0] = LogType : message_sent
			setColorsent_log_721[1] = DEBUG_BIN_ID
			setColorsent_log_721[2] = 0x02
			setColorsent_log_721[3] = 0x07
			setColorsent_log_721[4] = r_718 as Byte
			setColorsent_log_721[5] = g_719 as Byte
			setColorsent_log_721[6] = b_720 as Byte
			log!log(setColorsent_log_721, 7)
		end
		do
			readonly var r_722 : UInt8 = fgcolor [0]
			readonly var g_723 : UInt8 = fgcolor [1]
			readonly var b_724 : UInt8 = fgcolor [2]
			display!setBGColor(r_722, g_723, b_724)
			var setBGColorsent_log_725 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setBGColorsent_log_725[0] = LogType : message_sent
			setBGColorsent_log_725[1] = DEBUG_BIN_ID
			setBGColorsent_log_725[2] = 0x02
			setBGColorsent_log_725[3] = 0x08
			setBGColorsent_log_725[4] = r_722 as Byte
			setBGColorsent_log_725[5] = g_723 as Byte
			setBGColorsent_log_725[6] = b_724 as Byte
			log!log(setBGColorsent_log_725, 7)
		end
		do
			readonly var r_726 : UInt8 = bgcolor [0]
			readonly var g_727 : UInt8 = bgcolor [1]
			readonly var b_728 : UInt8 = bgcolor [2]
			display!setColor(r_726, g_727, b_728)
			var setColorsent_log_729 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_729[0] = LogType : message_sent
			setColorsent_log_729[1] = DEBUG_BIN_ID
			setColorsent_log_729[2] = 0x02
			setColorsent_log_729[3] = 0x07
			setColorsent_log_729[4] = r_726 as Byte
			setColorsent_log_729[5] = g_727 as Byte
			setColorsent_log_729[6] = b_728 as Byte
			log!log(setColorsent_log_729, 7)
		end
		do
			readonly var x_730 : UInt8 = 6
			readonly var y_731 : UInt8 = 2
			readonly var v_732 : Int16 = level as Int16
			readonly var digits_733 : UInt8 = 2
			readonly var scale_734 : UInt8 = 2
			display!drawInteger(x_730, y_731, v_732, digits_733, scale_734)
			var drawIntegersent_log_735 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			drawIntegersent_log_735[0] = LogType : message_sent
			drawIntegersent_log_735[1] = DEBUG_BIN_ID
			drawIntegersent_log_735[2] = 0x02
			drawIntegersent_log_735[3] = 0x0B
			drawIntegersent_log_735[4] = x_730 as Byte
			drawIntegersent_log_735[5] = y_731 as Byte
			drawIntegersent_log_735[6] = (`((` & v_732 & ` >> 8) & 0xFF)`) as Byte
			drawIntegersent_log_735[7] = (`((` & v_732 & ` >> 0) & 0xFF)`) as Byte
			drawIntegersent_log_735[7] = digits_733 as Byte
			drawIntegersent_log_735[8] = scale_734 as Byte
			log!log(drawIntegersent_log_735, 10)
		end
		do
			drawLevel_log[0] = LogType : function_called
			drawLevel_log[1] = DEBUG_BIN_ID
			drawLevel_log[2] = 0x0F
			drawLevel_log[3] = 0x00
			log!log(drawLevel_log, 4)
		end
	end
	function incrementScore(diff : Int8) @id `16` do
		var incrementScore_log : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
		do
			readonly var old_score_12 : Int16 = score
			score = score + diff as Int16
			readonly var new_score_12 : Int16 = score
			var score_log_12 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			score_log_12[0] = LogType : property_changed
			score_log_12[1] = DEBUG_BIN_ID
			score_log_12[2] = 0x1C
			score_log_12[3] = (`((` & old_score_12 & ` >> 8) & 0xFF)`) as Byte
			score_log_12[4] = (`((` & old_score_12 & ` >> 0) & 0xFF)`) as Byte
			score_log_12[5] = (`((` & new_score_12 & ` >> 8) & 0xFF)`) as Byte
			score_log_12[6] = (`((` & new_score_12 & ` >> 0) & 0xFF)`) as Byte
			log!log(score_log_12, 7)
		end
		if (score < 0) do
			readonly var old_score_13 : Int16 = score
			score = 0
			readonly var new_score_13 : Int16 = score
			var score_log_13 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			score_log_13[0] = LogType : property_changed
			score_log_13[1] = DEBUG_BIN_ID
			score_log_13[2] = 0x1C
			score_log_13[3] = (`((` & old_score_13 & ` >> 8) & 0xFF)`) as Byte
			score_log_13[4] = (`((` & old_score_13 & ` >> 0) & 0xFF)`) as Byte
			score_log_13[5] = (`((` & new_score_13 & ` >> 8) & 0xFF)`) as Byte
			score_log_13[6] = (`((` & new_score_13 & ` >> 0) & 0xFF)`) as Byte
			log!log(score_log_13, 7)
		end
		drawScore()
		do
			incrementScore_log[0] = LogType : function_called
			incrementScore_log[1] = DEBUG_BIN_ID
			incrementScore_log[2] = 0x10
			incrementScore_log[3] = 0x00
			incrementScore_log[4] = diff as Byte
			log!log(incrementScore_log, 5)
		end
	end
	function drawScore() @id `17` do
		var drawScore_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var r_736 : UInt8 = 158
			readonly var g_737 : UInt8 = 209
			readonly var b_738 : UInt8 = 130
			display!setColor(r_736, g_737, b_738)
			var setColorsent_log_739 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_739[0] = LogType : message_sent
			setColorsent_log_739[1] = DEBUG_BIN_ID
			setColorsent_log_739[2] = 0x02
			setColorsent_log_739[3] = 0x07
			setColorsent_log_739[4] = r_736 as Byte
			setColorsent_log_739[5] = g_737 as Byte
			setColorsent_log_739[6] = b_738 as Byte
			log!log(setColorsent_log_739, 7)
		end
		do
			readonly var r_740 : UInt8 = fgcolor [0]
			readonly var g_741 : UInt8 = fgcolor [1]
			readonly var b_742 : UInt8 = fgcolor [2]
			display!setBGColor(r_740, g_741, b_742)
			var setBGColorsent_log_743 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setBGColorsent_log_743[0] = LogType : message_sent
			setBGColorsent_log_743[1] = DEBUG_BIN_ID
			setBGColorsent_log_743[2] = 0x02
			setBGColorsent_log_743[3] = 0x08
			setBGColorsent_log_743[4] = r_740 as Byte
			setBGColorsent_log_743[5] = g_741 as Byte
			setBGColorsent_log_743[6] = b_742 as Byte
			log!log(setBGColorsent_log_743, 7)
		end
		do
			readonly var x_744 : UInt8 = 58
			readonly var y_745 : UInt8 = 2
			readonly var v_746 : Int16 = score
			readonly var digits_747 : UInt8 = 5
			readonly var scale_748 : UInt8 = 2
			display!drawInteger(x_744, y_745, v_746, digits_747, scale_748)
			var drawIntegersent_log_749 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			drawIntegersent_log_749[0] = LogType : message_sent
			drawIntegersent_log_749[1] = DEBUG_BIN_ID
			drawIntegersent_log_749[2] = 0x02
			drawIntegersent_log_749[3] = 0x0B
			drawIntegersent_log_749[4] = x_744 as Byte
			drawIntegersent_log_749[5] = y_745 as Byte
			drawIntegersent_log_749[6] = (`((` & v_746 & ` >> 8) & 0xFF)`) as Byte
			drawIntegersent_log_749[7] = (`((` & v_746 & ` >> 0) & 0xFF)`) as Byte
			drawIntegersent_log_749[7] = digits_747 as Byte
			drawIntegersent_log_749[8] = scale_748 as Byte
			log!log(drawIntegersent_log_749, 10)
		end
		do
			drawScore_log[0] = LogType : function_called
			drawScore_log[1] = DEBUG_BIN_ID
			drawScore_log[2] = 0x11
			drawScore_log[3] = 0x00
			log!log(drawScore_log, 4)
		end
	end
	function drawLives() @id `18` do
		var drawLives_log : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
		do
			readonly var r_750 : UInt8 = fgcolor [0]
			readonly var g_751 : UInt8 = fgcolor [1]
			readonly var b_752 : UInt8 = fgcolor [2]
			display!setColor(r_750, g_751, b_752)
			var setColorsent_log_753 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_753[0] = LogType : message_sent
			setColorsent_log_753[1] = DEBUG_BIN_ID
			setColorsent_log_753[2] = 0x02
			setColorsent_log_753[3] = 0x07
			setColorsent_log_753[4] = r_750 as Byte
			setColorsent_log_753[5] = g_751 as Byte
			setColorsent_log_753[6] = b_752 as Byte
			log!log(setColorsent_log_753, 7)
		end
		do
			readonly var x_754 : UInt8 = 124
			readonly var y_755 : UInt8 = 4
			readonly var width_756 : UInt8 = 24 + 6
			readonly var height_757 : UInt8 = 6
			display!fillRect(x_754, y_755, width_756, height_757)
			var fillRectsent_log_758 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			fillRectsent_log_758[0] = LogType : message_sent
			fillRectsent_log_758[1] = DEBUG_BIN_ID
			fillRectsent_log_758[2] = 0x02
			fillRectsent_log_758[3] = 0x0A
			fillRectsent_log_758[4] = x_754 as Byte
			fillRectsent_log_758[5] = y_755 as Byte
			fillRectsent_log_758[6] = width_756 as Byte
			fillRectsent_log_758[7] = height_757 as Byte
			log!log(fillRectsent_log_758, 8)
		end
		do
			readonly var r_759 : UInt8 = 183
			readonly var g_760 : UInt8 = 199
			readonly var b_761 : UInt8 = 111
			display!setColor(r_759, g_760, b_761)
			var setColorsent_log_762 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			setColorsent_log_762[0] = LogType : message_sent
			setColorsent_log_762[1] = DEBUG_BIN_ID
			setColorsent_log_762[2] = 0x02
			setColorsent_log_762[3] = 0x07
			setColorsent_log_762[4] = r_759 as Byte
			setColorsent_log_762[5] = g_760 as Byte
			setColorsent_log_762[6] = b_761 as Byte
			log!log(setColorsent_log_762, 7)
		end
		var i : UInt8 = 0
		while (i < lives) do
			do
				readonly var x_763 : UInt8 = 124 + (2 - i) * 12
				readonly var y_764 : UInt8 = 4
				readonly var width_765 : UInt8 = 6
				readonly var height_766 : UInt8 = 6
				display!fillRect(x_763, y_764, width_765, height_766)
				var fillRectsent_log_767 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				fillRectsent_log_767[0] = LogType : message_sent
				fillRectsent_log_767[1] = DEBUG_BIN_ID
				fillRectsent_log_767[2] = 0x02
				fillRectsent_log_767[3] = 0x0A
				fillRectsent_log_767[4] = x_763 as Byte
				fillRectsent_log_767[5] = y_764 as Byte
				fillRectsent_log_767[6] = width_765 as Byte
				fillRectsent_log_767[7] = height_766 as Byte
				log!log(fillRectsent_log_767, 8)
			end
			i = i + 1
		end
		do
			drawLives_log[0] = LogType : function_called
			drawLives_log[1] = DEBUG_BIN_ID
			drawLives_log[2] = 0x12
			drawLives_log[3] = 0x00
			log!log(drawLives_log, 4)
		end
	end
	statechart SC init INIT @id `0` {
		state INIT @id `1` {
			on entry do
				startTime = timestamp()
				do
					readonly var xsize_768 : UInt8 = XDISPSIZE
					readonly var ysize_769 : UInt8 = YDISPSIZE
					display!create(xsize_768, ysize_769)
					var createsent_log_770 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
					createsent_log_770[0] = LogType : message_sent
					createsent_log_770[1] = DEBUG_BIN_ID
					createsent_log_770[2] = 0x02
					createsent_log_770[3] = 0x0D
					createsent_log_770[4] = xsize_768 as Byte
					createsent_log_770[5] = ysize_769 as Byte
					log!log(createsent_log_770, 6)
				end
			end
			transition -> LAUNCH
			event display?displayReady
			action do
				var displayReadyhandled_log_883 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				displayReadyhandled_log_883[0] = LogType : message_handled
				displayReadyhandled_log_883[1] = DEBUG_BIN_ID
				displayReadyhandled_log_883[2] = 0x02
				displayReadyhandled_log_883[3] = 0x10
				displayReadyhandled_log_883[4] = 0x01
				displayReadyhandled_log_883[5] = 0x02
				log!log(displayReadyhandled_log_883, 6)
				do
					do
						display!clear()
						var clearsent_log_771 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
						clearsent_log_771[0] = LogType : message_sent
						clearsent_log_771[1] = DEBUG_BIN_ID
						clearsent_log_771[2] = 0x02
						clearsent_log_771[3] = 0x06
						log!log(clearsent_log_771, 4)
					end
					initColors()
					do
						readonly var r_772 : UInt8 = bgcolor [0]
						readonly var g_773 : UInt8 = bgcolor [1]
						readonly var b_774 : UInt8 = bgcolor [2]
						display!setColor(r_772, g_773, b_774)
						var setColorsent_log_775 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						setColorsent_log_775[0] = LogType : message_sent
						setColorsent_log_775[1] = DEBUG_BIN_ID
						setColorsent_log_775[2] = 0x02
						setColorsent_log_775[3] = 0x07
						setColorsent_log_775[4] = r_772 as Byte
						setColorsent_log_775[5] = g_773 as Byte
						setColorsent_log_775[6] = b_774 as Byte
						log!log(setColorsent_log_775, 7)
					end
					do
						readonly var x_776 : UInt8 = 0
						readonly var y_777 : UInt8 = 0
						readonly var width_778 : UInt8 = XDISPSIZE
						readonly var height_779 : UInt8 = YDISPSIZE
						display!fillRect(x_776, y_777, width_778, height_779)
						var fillRectsent_log_780 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						fillRectsent_log_780[0] = LogType : message_sent
						fillRectsent_log_780[1] = DEBUG_BIN_ID
						fillRectsent_log_780[2] = 0x02
						fillRectsent_log_780[3] = 0x0A
						fillRectsent_log_780[4] = x_776 as Byte
						fillRectsent_log_780[5] = y_777 as Byte
						fillRectsent_log_780[6] = width_778 as Byte
						fillRectsent_log_780[7] = height_779 as Byte
						log!log(fillRectsent_log_780, 8)
					end
					do
						readonly var r_781 : UInt8 = fgcolor [0]
						readonly var g_782 : UInt8 = fgcolor [1]
						readonly var b_783 : UInt8 = fgcolor [2]
						display!setColor(r_781, g_782, b_783)
						var setColorsent_log_784 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						setColorsent_log_784[0] = LogType : message_sent
						setColorsent_log_784[1] = DEBUG_BIN_ID
						setColorsent_log_784[2] = 0x02
						setColorsent_log_784[3] = 0x07
						setColorsent_log_784[4] = r_781 as Byte
						setColorsent_log_784[5] = g_782 as Byte
						setColorsent_log_784[6] = b_783 as Byte
						log!log(setColorsent_log_784, 7)
					end
					do
						readonly var x_785 : UInt8 = 0
						readonly var y_786 : UInt8 = 0
						readonly var width_787 : UInt8 = XDISPSIZE
						readonly var height_788 : UInt8 = 14
						display!fillRect(x_785, y_786, width_787, height_788)
						var fillRectsent_log_789 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						fillRectsent_log_789[0] = LogType : message_sent
						fillRectsent_log_789[1] = DEBUG_BIN_ID
						fillRectsent_log_789[2] = 0x02
						fillRectsent_log_789[3] = 0x0A
						fillRectsent_log_789[4] = x_785 as Byte
						fillRectsent_log_789[5] = y_786 as Byte
						fillRectsent_log_789[6] = width_787 as Byte
						fillRectsent_log_789[7] = height_788 as Byte
						log!log(fillRectsent_log_789, 8)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
			end
		}
		state LAUNCH @id `2` {
			property countdown : UInt8 @id `31`
			on entry do
				do
					readonly var id_790 : UInt8 = 0
					readonly var time_791 : UInt16 = period
					clock!timer_start(id_790, time_791)
					var timer_startsent_log_792 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					timer_startsent_log_792[0] = LogType : message_sent
					timer_startsent_log_792[1] = DEBUG_BIN_ID
					timer_startsent_log_792[2] = 0x01
					timer_startsent_log_792[3] = 0x14
					timer_startsent_log_792[4] = id_790 as Byte
					timer_startsent_log_792[5] = (`((` & time_791 & ` >> 8) & 0xFF)`) as Byte
					timer_startsent_log_792[6] = (`((` & time_791 & ` >> 0) & 0xFF)`) as Byte
					log!log(timer_startsent_log_792, 7)
				end
				do
					readonly var old_countdown_20 : UInt8 = countdown
					countdown = 3
					readonly var new_countdown_20 : UInt8 = countdown
					var countdown_log_20 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					countdown_log_20[0] = LogType : property_changed
					countdown_log_20[1] = DEBUG_BIN_ID
					countdown_log_20[2] = 0x1F
					countdown_log_20[3] = old_countdown_20 as Byte
					countdown_log_20[4] = new_countdown_20 as Byte
					log!log(countdown_log_20, 5)
				end
				drawScore()
				drawLives()
				do
					display!update()
					var updatesent_log_793 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
					updatesent_log_793[0] = LogType : message_sent
					updatesent_log_793[1] = DEBUG_BIN_ID
					updatesent_log_793[2] = 0x02
					updatesent_log_793[3] = 0x0F
					log!log(updatesent_log_793, 4)
				end
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0 and countdown > 0
			action do
				var timer_timeouthandled_log_879 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_879[0] = LogType : message_handled
				timer_timeouthandled_log_879[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_879[2] = 0x01
				timer_timeouthandled_log_879[3] = 0x16
				timer_timeouthandled_log_879[4] = 0x02
				timer_timeouthandled_log_879[5] = 0x00
				readonly var ref_id880 : UInt8 = t.id
				timer_timeouthandled_log_879[6] = ref_id880 as Byte
				log!log(timer_timeouthandled_log_879, 7)
				do
					do
						readonly var id_794 : UInt8 = 0
						readonly var time_795 : UInt16 = period
						clock!timer_start(id_794, time_795)
						var timer_startsent_log_796 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						timer_startsent_log_796[0] = LogType : message_sent
						timer_startsent_log_796[1] = DEBUG_BIN_ID
						timer_startsent_log_796[2] = 0x01
						timer_startsent_log_796[3] = 0x14
						timer_startsent_log_796[4] = id_794 as Byte
						timer_startsent_log_796[5] = (`((` & time_795 & ` >> 8) & 0xFF)`) as Byte
						timer_startsent_log_796[6] = (`((` & time_795 & ` >> 0) & 0xFF)`) as Byte
						log!log(timer_startsent_log_796, 7)
					end
					drawPad()
					if ((countdown % 30) == 0) drawCountDown(countdown as Int16 / 30)
					do
						readonly var old_countdown_21 : UInt8 = countdown
						countdown = countdown - 1
						readonly var new_countdown_21 : UInt8 = countdown
						var countdown_log_21 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
						countdown_log_21[0] = LogType : property_changed
						countdown_log_21[1] = DEBUG_BIN_ID
						countdown_log_21[2] = 0x1F
						countdown_log_21[3] = old_countdown_21 as Byte
						countdown_log_21[4] = new_countdown_21 as Byte
						log!log(countdown_log_21, 5)
					end
					do
						display!update()
						var updatesent_log_797 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
						updatesent_log_797[0] = LogType : message_sent
						updatesent_log_797[1] = DEBUG_BIN_ID
						updatesent_log_797[2] = 0x02
						updatesent_log_797[3] = 0x0F
						log!log(updatesent_log_797, 4)
					end
				end
			end
			transition -> PLAY
			event t : clock?timer_timeout
			guard t.id == 0 and countdown == 0
			action do
				var timer_timeouthandled_log_877 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_877[0] = LogType : message_handled
				timer_timeouthandled_log_877[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_877[2] = 0x01
				timer_timeouthandled_log_877[3] = 0x16
				timer_timeouthandled_log_877[4] = 0x02
				timer_timeouthandled_log_877[5] = 0x03
				readonly var ref_id878 : UInt8 = t.id
				timer_timeouthandled_log_877[6] = ref_id878 as Byte
				log!log(timer_timeouthandled_log_877, 7)
				do
					drawCountDown(0)
					resetBall()
					do
						display!update()
						var updatesent_log_798 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
						updatesent_log_798[0] = LogType : message_sent
						updatesent_log_798[1] = DEBUG_BIN_ID
						updatesent_log_798[2] = 0x02
						updatesent_log_798[3] = 0x0F
						log!log(updatesent_log_798, 4)
					end
				end
			end
		}
		state PLAY @id `3` {
			on entry do
				do
					readonly var id_799 : UInt8 = 0
					readonly var time_800 : UInt16 = period
					clock!timer_start(id_799, time_800)
					var timer_startsent_log_801 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					timer_startsent_log_801[0] = LogType : message_sent
					timer_startsent_log_801[1] = DEBUG_BIN_ID
					timer_startsent_log_801[2] = 0x01
					timer_startsent_log_801[3] = 0x14
					timer_startsent_log_801[4] = id_799 as Byte
					timer_startsent_log_801[5] = (`((` & time_800 & ` >> 8) & 0xFF)`) as Byte
					timer_startsent_log_801[6] = (`((` & time_800 & ` >> 0) & 0xFF)`) as Byte
					log!log(timer_startsent_log_801, 7)
				end
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				var timer_timeouthandled_log_873 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_873[0] = LogType : message_handled
				timer_timeouthandled_log_873[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_873[2] = 0x01
				timer_timeouthandled_log_873[3] = 0x16
				timer_timeouthandled_log_873[4] = 0x03
				timer_timeouthandled_log_873[5] = 0x00
				readonly var ref_id874 : UInt8 = t.id
				timer_timeouthandled_log_873[6] = ref_id874 as Byte
				log!log(timer_timeouthandled_log_873, 7)
				do
					do
						readonly var old_bx_5 : Int16 = bx
						bx = bx + dx
						readonly var new_bx_5 : Int16 = bx
						var bx_log_5 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						bx_log_5[0] = LogType : property_changed
						bx_log_5[1] = DEBUG_BIN_ID
						bx_log_5[2] = 0x0B
						bx_log_5[3] = (`((` & old_bx_5 & ` >> 8) & 0xFF)`) as Byte
						bx_log_5[4] = (`((` & old_bx_5 & ` >> 0) & 0xFF)`) as Byte
						bx_log_5[5] = (`((` & new_bx_5 & ` >> 8) & 0xFF)`) as Byte
						bx_log_5[6] = (`((` & new_bx_5 & ` >> 0) & 0xFF)`) as Byte
						log!log(bx_log_5, 7)
					end
					do
						readonly var old_by_9 : Int16 = by
						by = by + dy
						readonly var new_by_9 : Int16 = by
						var by_log_9 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						by_log_9[0] = LogType : property_changed
						by_log_9[1] = DEBUG_BIN_ID
						by_log_9[2] = 0x0C
						by_log_9[3] = (`((` & old_by_9 & ` >> 8) & 0xFF)`) as Byte
						by_log_9[4] = (`((` & old_by_9 & ` >> 0) & 0xFF)`) as Byte
						by_log_9[5] = (`((` & new_by_9 & ` >> 8) & 0xFF)`) as Byte
						by_log_9[6] = (`((` & new_by_9 & ` >> 0) & 0xFF)`) as Byte
						log!log(by_log_9, 7)
					end
					var wl : Int16 = LEFT + br
					var wr : Int16 = RIGHT - br
					var wt : Int16 = TOP + br
					var wb : Int16 = BOTTOM - br
					if (bx < wl) do
						do
							readonly var old_dx_30 : Int16 = dx
							dx = -dx
							readonly var new_dx_30 : Int16 = dx
							var dx_log_30 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							dx_log_30[0] = LogType : property_changed
							dx_log_30[1] = DEBUG_BIN_ID
							dx_log_30[2] = 0x0D
							dx_log_30[3] = (`((` & old_dx_30 & ` >> 8) & 0xFF)`) as Byte
							dx_log_30[4] = (`((` & old_dx_30 & ` >> 0) & 0xFF)`) as Byte
							dx_log_30[5] = (`((` & new_dx_30 & ` >> 8) & 0xFF)`) as Byte
							dx_log_30[6] = (`((` & new_dx_30 & ` >> 0) & 0xFF)`) as Byte
							log!log(dx_log_30, 7)
						end
						do
							readonly var old_bx_6 : Int16 = bx
							bx = 2 * wl - bx
							readonly var new_bx_6 : Int16 = bx
							var bx_log_6 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							bx_log_6[0] = LogType : property_changed
							bx_log_6[1] = DEBUG_BIN_ID
							bx_log_6[2] = 0x0B
							bx_log_6[3] = (`((` & old_bx_6 & ` >> 8) & 0xFF)`) as Byte
							bx_log_6[4] = (`((` & old_bx_6 & ` >> 0) & 0xFF)`) as Byte
							bx_log_6[5] = (`((` & new_bx_6 & ` >> 8) & 0xFF)`) as Byte
							bx_log_6[6] = (`((` & new_bx_6 & ` >> 0) & 0xFF)`) as Byte
							log!log(bx_log_6, 7)
						end
						incrementScore(-1)
					end
					else if (bx > wr) do
						do
							readonly var old_dx_31 : Int16 = dx
							dx = -dx
							readonly var new_dx_31 : Int16 = dx
							var dx_log_31 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							dx_log_31[0] = LogType : property_changed
							dx_log_31[1] = DEBUG_BIN_ID
							dx_log_31[2] = 0x0D
							dx_log_31[3] = (`((` & old_dx_31 & ` >> 8) & 0xFF)`) as Byte
							dx_log_31[4] = (`((` & old_dx_31 & ` >> 0) & 0xFF)`) as Byte
							dx_log_31[5] = (`((` & new_dx_31 & ` >> 8) & 0xFF)`) as Byte
							dx_log_31[6] = (`((` & new_dx_31 & ` >> 0) & 0xFF)`) as Byte
							log!log(dx_log_31, 7)
						end
						do
							readonly var old_bx_7 : Int16 = bx
							bx = 2 * wr - bx
							readonly var new_bx_7 : Int16 = bx
							var bx_log_7 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							bx_log_7[0] = LogType : property_changed
							bx_log_7[1] = DEBUG_BIN_ID
							bx_log_7[2] = 0x0B
							bx_log_7[3] = (`((` & old_bx_7 & ` >> 8) & 0xFF)`) as Byte
							bx_log_7[4] = (`((` & old_bx_7 & ` >> 0) & 0xFF)`) as Byte
							bx_log_7[5] = (`((` & new_bx_7 & ` >> 8) & 0xFF)`) as Byte
							bx_log_7[6] = (`((` & new_bx_7 & ` >> 0) & 0xFF)`) as Byte
							log!log(bx_log_7, 7)
						end
						incrementScore(-1)
					end
					if (by < wt) do
						do
							readonly var old_dy_16 : Int16 = dy
							dy = -dy
							readonly var new_dy_16 : Int16 = dy
							var dy_log_16 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							dy_log_16[0] = LogType : property_changed
							dy_log_16[1] = DEBUG_BIN_ID
							dy_log_16[2] = 0x0E
							dy_log_16[3] = (`((` & old_dy_16 & ` >> 8) & 0xFF)`) as Byte
							dy_log_16[4] = (`((` & old_dy_16 & ` >> 0) & 0xFF)`) as Byte
							dy_log_16[5] = (`((` & new_dy_16 & ` >> 8) & 0xFF)`) as Byte
							dy_log_16[6] = (`((` & new_dy_16 & ` >> 0) & 0xFF)`) as Byte
							log!log(dy_log_16, 7)
						end
						do
							readonly var old_by_10 : Int16 = by
							by = 2 * wt - by
							readonly var new_by_10 : Int16 = by
							var by_log_10 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							by_log_10[0] = LogType : property_changed
							by_log_10[1] = DEBUG_BIN_ID
							by_log_10[2] = 0x0C
							by_log_10[3] = (`((` & old_by_10 & ` >> 8) & 0xFF)`) as Byte
							by_log_10[4] = (`((` & old_by_10 & ` >> 0) & 0xFF)`) as Byte
							by_log_10[5] = (`((` & new_by_10 & ` >> 8) & 0xFF)`) as Byte
							by_log_10[6] = (`((` & new_by_10 & ` >> 0) & 0xFF)`) as Byte
							log!log(by_log_10, 7)
						end
						incrementScore(-1)
					end
					else if (by > wb) do
						do
							game!lostBall()
							var lostBallsent_log_802 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
							lostBallsent_log_802[0] = LogType : message_sent
							lostBallsent_log_802[1] = DEBUG_BIN_ID
							lostBallsent_log_802[2] = 0x05
							lostBallsent_log_802[3] = 0x01
							log!log(lostBallsent_log_802, 4)
						end
						do
							req_game!lostBall()
							var lostBallsent_log_803 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
							lostBallsent_log_803[0] = LogType : message_sent
							lostBallsent_log_803[1] = DEBUG_BIN_ID
							lostBallsent_log_803[2] = 0x06
							lostBallsent_log_803[3] = 0x01
							log!log(lostBallsent_log_803, 4)
						end
					end
					if (dy > 0) do
						if (by > pady - br and by < pady + br) do
							if (bx > padx - padlen / 2 and bx < padx + padlen / 2) do
								do
									readonly var old_dy_17 : Int16 = dy
									dy = -dy
									readonly var new_dy_17 : Int16 = dy
									var dy_log_17 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
									dy_log_17[0] = LogType : property_changed
									dy_log_17[1] = DEBUG_BIN_ID
									dy_log_17[2] = 0x0E
									dy_log_17[3] = (`((` & old_dy_17 & ` >> 8) & 0xFF)`) as Byte
									dy_log_17[4] = (`((` & old_dy_17 & ` >> 0) & 0xFF)`) as Byte
									dy_log_17[5] = (`((` & new_dy_17 & ` >> 8) & 0xFF)`) as Byte
									dy_log_17[6] = (`((` & new_dy_17 & ` >> 0) & 0xFF)`) as Byte
									log!log(dy_log_17, 7)
								end
								do
									readonly var old_by_11 : Int16 = by
									by = 2 * (pady - br) - by
									readonly var new_by_11 : Int16 = by
									var by_log_11 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
									by_log_11[0] = LogType : property_changed
									by_log_11[1] = DEBUG_BIN_ID
									by_log_11[2] = 0x0C
									by_log_11[3] = (`((` & old_by_11 & ` >> 8) & 0xFF)`) as Byte
									by_log_11[4] = (`((` & old_by_11 & ` >> 0) & 0xFF)`) as Byte
									by_log_11[5] = (`((` & new_by_11 & ` >> 8) & 0xFF)`) as Byte
									by_log_11[6] = (`((` & new_by_11 & ` >> 0) & 0xFF)`) as Byte
									log!log(by_log_11, 7)
								end
								do
									readonly var old_dx_32 : Int16 = dx
									dx = dx / 4 + (bx - padx) / 4
									readonly var new_dx_32 : Int16 = dx
									var dx_log_32 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
									dx_log_32[0] = LogType : property_changed
									dx_log_32[1] = DEBUG_BIN_ID
									dx_log_32[2] = 0x0D
									dx_log_32[3] = (`((` & old_dx_32 & ` >> 8) & 0xFF)`) as Byte
									dx_log_32[4] = (`((` & old_dx_32 & ` >> 0) & 0xFF)`) as Byte
									dx_log_32[5] = (`((` & new_dx_32 & ` >> 8) & 0xFF)`) as Byte
									dx_log_32[6] = (`((` & new_dx_32 & ` >> 0) & 0xFF)`) as Byte
									log!log(dx_log_32, 7)
								end
							end
						end
					end
					var collision : Boolean = collideBrick(bx - br, by - br)or collideBrick(bx + br, by - br)or collideBrick(bx + br, by + br)or collideBrick(bx - br, by + br)
					if (collision) do
						do
							readonly var old_dy_18 : Int16 = dy
							dy = -dy
							readonly var new_dy_18 : Int16 = dy
							var dy_log_18 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
							dy_log_18[0] = LogType : property_changed
							dy_log_18[1] = DEBUG_BIN_ID
							dy_log_18[2] = 0x0E
							dy_log_18[3] = (`((` & old_dy_18 & ` >> 8) & 0xFF)`) as Byte
							dy_log_18[4] = (`((` & old_dy_18 & ` >> 0) & 0xFF)`) as Byte
							dy_log_18[5] = (`((` & new_dy_18 & ` >> 8) & 0xFF)`) as Byte
							dy_log_18[6] = (`((` & new_dy_18 & ` >> 0) & 0xFF)`) as Byte
							log!log(dy_log_18, 7)
						end
						incrementScore(10)
						if (bricksLeft()== 0) do
							do
								game!nextLevel()
								var nextLevelsent_log_804 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
								nextLevelsent_log_804[0] = LogType : message_sent
								nextLevelsent_log_804[1] = DEBUG_BIN_ID
								nextLevelsent_log_804[2] = 0x05
								nextLevelsent_log_804[3] = 0x02
								log!log(nextLevelsent_log_804, 4)
							end
							do
								req_game!nextLevel()
								var nextLevelsent_log_805 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
								nextLevelsent_log_805[0] = LogType : message_sent
								nextLevelsent_log_805[1] = DEBUG_BIN_ID
								nextLevelsent_log_805[2] = 0x06
								nextLevelsent_log_805[3] = 0x02
								log!log(nextLevelsent_log_805, 4)
							end
						end
					end
					drawBall()
					drawPad()
					do
						readonly var ballx_806 : Int16 = bx
						readonly var bally_807 : Int16 = by
						readonly var padx_808 : Int16 = padx
						readonly var pady_809 : Int16 = pady
						ia!updateIA(ballx_806, bally_807, padx_808, pady_809)
						var updateIAsent_log_810 : Byte [ 12 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						updateIAsent_log_810[0] = LogType : message_sent
						updateIAsent_log_810[1] = DEBUG_BIN_ID
						updateIAsent_log_810[2] = 0x04
						updateIAsent_log_810[3] = 0x13
						updateIAsent_log_810[4] = (`((` & ballx_806 & ` >> 8) & 0xFF)`) as Byte
						updateIAsent_log_810[5] = (`((` & ballx_806 & ` >> 0) & 0xFF)`) as Byte
						updateIAsent_log_810[5] = (`((` & bally_807 & ` >> 8) & 0xFF)`) as Byte
						updateIAsent_log_810[6] = (`((` & bally_807 & ` >> 0) & 0xFF)`) as Byte
						updateIAsent_log_810[6] = (`((` & padx_808 & ` >> 8) & 0xFF)`) as Byte
						updateIAsent_log_810[7] = (`((` & padx_808 & ` >> 0) & 0xFF)`) as Byte
						updateIAsent_log_810[7] = (`((` & pady_809 & ` >> 8) & 0xFF)`) as Byte
						updateIAsent_log_810[8] = (`((` & pady_809 & ` >> 0) & 0xFF)`) as Byte
						log!log(updateIAsent_log_810, 12)
					end
					do
						display!update()
						var updatesent_log_811 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
						updatesent_log_811[0] = LogType : message_sent
						updatesent_log_811[1] = DEBUG_BIN_ID
						updatesent_log_811[2] = 0x02
						updatesent_log_811[3] = 0x0F
						log!log(updatesent_log_811, 4)
					end
					log(false)
					do
						readonly var id_812 : UInt8 = 0
						readonly var time_813 : UInt16 = period
						clock!timer_start(id_812, time_813)
						var timer_startsent_log_814 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
						timer_startsent_log_814[0] = LogType : message_sent
						timer_startsent_log_814[1] = DEBUG_BIN_ID
						timer_startsent_log_814[2] = 0x01
						timer_startsent_log_814[3] = 0x14
						timer_startsent_log_814[4] = id_812 as Byte
						timer_startsent_log_814[5] = (`((` & time_813 & ` >> 8) & 0xFF)`) as Byte
						timer_startsent_log_814[6] = (`((` & time_813 & ` >> 0) & 0xFF)`) as Byte
						log!log(timer_startsent_log_814, 7)
					end
				end
			end
			transition -> LOSTBALL
			event game?lostBall
			action do
				var lostBallhandled_log_868 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				lostBallhandled_log_868[0] = LogType : message_handled
				lostBallhandled_log_868[1] = DEBUG_BIN_ID
				lostBallhandled_log_868[2] = 0x05
				lostBallhandled_log_868[3] = 0x01
				lostBallhandled_log_868[4] = 0x03
				lostBallhandled_log_868[5] = 0x04
				log!log(lostBallhandled_log_868, 6)
				do
					readonly var id_815 : UInt8 = 0
					clock!timer_cancel(id_815)
					var timer_cancelsent_log_816 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					timer_cancelsent_log_816[0] = LogType : message_sent
					timer_cancelsent_log_816[1] = DEBUG_BIN_ID
					timer_cancelsent_log_816[2] = 0x01
					timer_cancelsent_log_816[3] = 0x15
					timer_cancelsent_log_816[4] = id_815 as Byte
					log!log(timer_cancelsent_log_816, 5)
				end
			end
			transition -> NEXTLEVEL
			event game?nextLevel
			action do
				var nextLevelhandled_log_867 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				nextLevelhandled_log_867[0] = LogType : message_handled
				nextLevelhandled_log_867[1] = DEBUG_BIN_ID
				nextLevelhandled_log_867[2] = 0x05
				nextLevelhandled_log_867[3] = 0x02
				nextLevelhandled_log_867[4] = 0x03
				nextLevelhandled_log_867[5] = 0x05
				log!log(nextLevelhandled_log_867, 6)
				do
					readonly var id_817 : UInt8 = 0
					clock!timer_cancel(id_817)
					var timer_cancelsent_log_818 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					timer_cancelsent_log_818[0] = LogType : message_sent
					timer_cancelsent_log_818[1] = DEBUG_BIN_ID
					timer_cancelsent_log_818[2] = 0x01
					timer_cancelsent_log_818[3] = 0x15
					timer_cancelsent_log_818[4] = id_817 as Byte
					log!log(timer_cancelsent_log_818, 5)
				end
			end
			transition -> LOSTBALL
			event pro_game?lostBall
			action do
				var lostBallhandled_log_882 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				lostBallhandled_log_882[0] = LogType : message_handled
				lostBallhandled_log_882[1] = DEBUG_BIN_ID
				lostBallhandled_log_882[2] = 0x07
				lostBallhandled_log_882[3] = 0x01
				lostBallhandled_log_882[4] = 0x03
				lostBallhandled_log_882[5] = 0x04
				log!log(lostBallhandled_log_882, 6)
				do
					readonly var id_819 : UInt8 = 0
					clock!timer_cancel(id_819)
					var timer_cancelsent_log_820 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					timer_cancelsent_log_820[0] = LogType : message_sent
					timer_cancelsent_log_820[1] = DEBUG_BIN_ID
					timer_cancelsent_log_820[2] = 0x01
					timer_cancelsent_log_820[3] = 0x15
					timer_cancelsent_log_820[4] = id_819 as Byte
					log!log(timer_cancelsent_log_820, 5)
				end
			end
			transition -> NEXTLEVEL
			event pro_game?nextLevel
			action do
				var nextLevelhandled_log_881 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
				nextLevelhandled_log_881[0] = LogType : message_handled
				nextLevelhandled_log_881[1] = DEBUG_BIN_ID
				nextLevelhandled_log_881[2] = 0x07
				nextLevelhandled_log_881[3] = 0x02
				nextLevelhandled_log_881[4] = 0x03
				nextLevelhandled_log_881[5] = 0x05
				log!log(nextLevelhandled_log_881, 6)
				do
					readonly var id_821 : UInt8 = 0
					clock!timer_cancel(id_821)
					var timer_cancelsent_log_822 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					timer_cancelsent_log_822[0] = LogType : message_sent
					timer_cancelsent_log_822[1] = DEBUG_BIN_ID
					timer_cancelsent_log_822[2] = 0x01
					timer_cancelsent_log_822[3] = 0x15
					timer_cancelsent_log_822[4] = id_821 as Byte
					log!log(timer_cancelsent_log_822, 5)
				end
			end
		}
		state LOSTBALL @id `4` {
			on entry do
				do
					readonly var id_823 : UInt8 = 0
					readonly var time_824 : UInt16 = period
					clock!timer_start(id_823, time_824)
					var timer_startsent_log_825 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					timer_startsent_log_825[0] = LogType : message_sent
					timer_startsent_log_825[1] = DEBUG_BIN_ID
					timer_startsent_log_825[2] = 0x01
					timer_startsent_log_825[3] = 0x14
					timer_startsent_log_825[4] = id_823 as Byte
					timer_startsent_log_825[5] = (`((` & time_824 & ` >> 8) & 0xFF)`) as Byte
					timer_startsent_log_825[6] = (`((` & time_824 & ` >> 0) & 0xFF)`) as Byte
					log!log(timer_startsent_log_825, 7)
				end
				do
					readonly var old_lives_3 : UInt8 = lives
					lives = lives - 1
					readonly var new_lives_3 : UInt8 = lives
					var lives_log_3 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					lives_log_3[0] = LogType : property_changed
					lives_log_3[1] = DEBUG_BIN_ID
					lives_log_3[2] = 0x1D
					lives_log_3[3] = old_lives_3 as Byte
					lives_log_3[4] = new_lives_3 as Byte
					log!log(lives_log_3, 5)
				end
				eraseBall()
				erasePad()
				drawLives()
				do
					display!update()
					var updatesent_log_826 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
					updatesent_log_826[0] = LogType : message_sent
					updatesent_log_826[1] = DEBUG_BIN_ID
					updatesent_log_826[2] = 0x02
					updatesent_log_826[3] = 0x0F
					log!log(updatesent_log_826, 4)
				end
				log(true)
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0 and lives > 0
			action do
				var timer_timeouthandled_log_869 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_869[0] = LogType : message_handled
				timer_timeouthandled_log_869[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_869[2] = 0x01
				timer_timeouthandled_log_869[3] = 0x16
				timer_timeouthandled_log_869[4] = 0x04
				timer_timeouthandled_log_869[5] = 0x02
				readonly var ref_id870 : UInt8 = t.id
				timer_timeouthandled_log_869[6] = ref_id870 as Byte
				log!log(timer_timeouthandled_log_869, 7)
			end
			transition -> GAMEOVER
			event t : clock?timer_timeout
			guard t.id == 0 and lives == 0
			action do
				var timer_timeouthandled_log_871 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_871[0] = LogType : message_handled
				timer_timeouthandled_log_871[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_871[2] = 0x01
				timer_timeouthandled_log_871[3] = 0x16
				timer_timeouthandled_log_871[4] = 0x04
				timer_timeouthandled_log_871[5] = 0x06
				readonly var ref_id872 : UInt8 = t.id
				timer_timeouthandled_log_871[6] = ref_id872 as Byte
				log!log(timer_timeouthandled_log_871, 7)
			end
		}
		state NEXTLEVEL @id `5` {
			on entry do
				do
					readonly var id_827 : UInt8 = 0
					readonly var time_828 : UInt16 = period
					clock!timer_start(id_827, time_828)
					var timer_startsent_log_829 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					timer_startsent_log_829[0] = LogType : message_sent
					timer_startsent_log_829[1] = DEBUG_BIN_ID
					timer_startsent_log_829[2] = 0x01
					timer_startsent_log_829[3] = 0x14
					timer_startsent_log_829[4] = id_827 as Byte
					timer_startsent_log_829[5] = (`((` & time_828 & ` >> 8) & 0xFF)`) as Byte
					timer_startsent_log_829[6] = (`((` & time_828 & ` >> 0) & 0xFF)`) as Byte
					log!log(timer_startsent_log_829, 7)
				end
				do
					readonly var old_level_0 : UInt8 = level
					level = level + 1
					readonly var new_level_0 : UInt8 = level
					var level_log_0 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
					level_log_0[0] = LogType : property_changed
					level_log_0[1] = DEBUG_BIN_ID
					level_log_0[2] = 0x1E
					level_log_0[3] = old_level_0 as Byte
					level_log_0[4] = new_level_0 as Byte
					log!log(level_log_0, 5)
				end
				drawLevel()
				eraseBall()
				erasePad()
				if ((level % 2) == 0 and padlen > 5 * SCALE) do
					readonly var old_padlen_2 : Int16 = padlen
					padlen = padlen - (4 * SCALE)
					readonly var new_padlen_2 : Int16 = padlen
					var padlen_log_2 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					padlen_log_2[0] = LogType : property_changed
					padlen_log_2[1] = DEBUG_BIN_ID
					padlen_log_2[2] = 0x11
					padlen_log_2[3] = (`((` & old_padlen_2 & ` >> 8) & 0xFF)`) as Byte
					padlen_log_2[4] = (`((` & old_padlen_2 & ` >> 0) & 0xFF)`) as Byte
					padlen_log_2[5] = (`((` & new_padlen_2 & ` >> 8) & 0xFF)`) as Byte
					padlen_log_2[6] = (`((` & new_padlen_2 & ` >> 0) & 0xFF)`) as Byte
					log!log(padlen_log_2, 7)
				end
				if ((level % 2) == 1) do
					readonly var old_dy_19 : Int16 = dy
					dy = (dy * 3) / 2
					readonly var new_dy_19 : Int16 = dy
					var dy_log_19 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					dy_log_19[0] = LogType : property_changed
					dy_log_19[1] = DEBUG_BIN_ID
					dy_log_19[2] = 0x0E
					dy_log_19[3] = (`((` & old_dy_19 & ` >> 8) & 0xFF)`) as Byte
					dy_log_19[4] = (`((` & old_dy_19 & ` >> 0) & 0xFF)`) as Byte
					dy_log_19[5] = (`((` & new_dy_19 & ` >> 8) & 0xFF)`) as Byte
					dy_log_19[6] = (`((` & new_dy_19 & ` >> 0) & 0xFF)`) as Byte
					log!log(dy_log_19, 7)
				end
				drawLives()
				createBricks()
				do
					display!update()
					var updatesent_log_830 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
					updatesent_log_830[0] = LogType : message_sent
					updatesent_log_830[1] = DEBUG_BIN_ID
					updatesent_log_830[2] = 0x02
					updatesent_log_830[3] = 0x0F
					log!log(updatesent_log_830, 4)
				end
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				var timer_timeouthandled_log_875 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
				timer_timeouthandled_log_875[0] = LogType : message_handled
				timer_timeouthandled_log_875[1] = DEBUG_BIN_ID
				timer_timeouthandled_log_875[2] = 0x01
				timer_timeouthandled_log_875[3] = 0x16
				timer_timeouthandled_log_875[4] = 0x05
				timer_timeouthandled_log_875[5] = 0x02
				readonly var ref_id876 : UInt8 = t.id
				timer_timeouthandled_log_875[6] = ref_id876 as Byte
				log!log(timer_timeouthandled_log_875, 7)
			end
		}
		final state GAMEOVER @id `6` {
			on entry do
				eraseBall()
				erasePad()
				do
					readonly var r_831 : UInt8 = 255
					readonly var g_832 : UInt8 = 255
					readonly var b_833 : UInt8 = 255
					display!setColor(r_831, g_832, b_833)
					var setColorsent_log_834 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					setColorsent_log_834[0] = LogType : message_sent
					setColorsent_log_834[1] = DEBUG_BIN_ID
					setColorsent_log_834[2] = 0x02
					setColorsent_log_834[3] = 0x07
					setColorsent_log_834[4] = r_831 as Byte
					setColorsent_log_834[5] = g_832 as Byte
					setColorsent_log_834[6] = b_833 as Byte
					log!log(setColorsent_log_834, 7)
				end
				do
					readonly var x_835 : UInt8 = 8
					readonly var y_836 : UInt8 = 30
					readonly var width_837 : UInt8 = 142
					readonly var height_838 : UInt8 = 76
					display!fillRect(x_835, y_836, width_837, height_838)
					var fillRectsent_log_839 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					fillRectsent_log_839[0] = LogType : message_sent
					fillRectsent_log_839[1] = DEBUG_BIN_ID
					fillRectsent_log_839[2] = 0x02
					fillRectsent_log_839[3] = 0x0A
					fillRectsent_log_839[4] = x_835 as Byte
					fillRectsent_log_839[5] = y_836 as Byte
					fillRectsent_log_839[6] = width_837 as Byte
					fillRectsent_log_839[7] = height_838 as Byte
					log!log(fillRectsent_log_839, 8)
				end
				do
					readonly var r_840 : UInt8 = fgcolor [0]
					readonly var g_841 : UInt8 = fgcolor [1]
					readonly var b_842 : UInt8 = fgcolor [2]
					display!setColor(r_840, g_841, b_842)
					var setColorsent_log_843 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					setColorsent_log_843[0] = LogType : message_sent
					setColorsent_log_843[1] = DEBUG_BIN_ID
					setColorsent_log_843[2] = 0x02
					setColorsent_log_843[3] = 0x07
					setColorsent_log_843[4] = r_840 as Byte
					setColorsent_log_843[5] = g_841 as Byte
					setColorsent_log_843[6] = b_842 as Byte
					log!log(setColorsent_log_843, 7)
				end
				do
					readonly var x_844 : UInt8 = 9
					readonly var y_845 : UInt8 = 31
					readonly var width_846 : UInt8 = 140
					readonly var height_847 : UInt8 = 50
					display!fillRect(x_844, y_845, width_846, height_847)
					var fillRectsent_log_848 : Byte [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					fillRectsent_log_848[0] = LogType : message_sent
					fillRectsent_log_848[1] = DEBUG_BIN_ID
					fillRectsent_log_848[2] = 0x02
					fillRectsent_log_848[3] = 0x0A
					fillRectsent_log_848[4] = x_844 as Byte
					fillRectsent_log_848[5] = y_845 as Byte
					fillRectsent_log_848[6] = width_846 as Byte
					fillRectsent_log_848[7] = height_847 as Byte
					log!log(fillRectsent_log_848, 8)
				end
				do
					readonly var r_849 : UInt8 = fgcolor [0]
					readonly var g_850 : UInt8 = fgcolor [1]
					readonly var b_851 : UInt8 = fgcolor [2]
					display!setBGColor(r_849, g_850, b_851)
					var setBGColorsent_log_852 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					setBGColorsent_log_852[0] = LogType : message_sent
					setBGColorsent_log_852[1] = DEBUG_BIN_ID
					setBGColorsent_log_852[2] = 0x02
					setBGColorsent_log_852[3] = 0x08
					setBGColorsent_log_852[4] = r_849 as Byte
					setBGColorsent_log_852[5] = g_850 as Byte
					setBGColorsent_log_852[6] = b_851 as Byte
					log!log(setBGColorsent_log_852, 7)
				end
				do
					readonly var r_853 : UInt8 = 158
					readonly var g_854 : UInt8 = 209
					readonly var b_855 : UInt8 = 130
					display!setColor(r_853, g_854, b_855)
					var setColorsent_log_856 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					setColorsent_log_856[0] = LogType : message_sent
					setColorsent_log_856[1] = DEBUG_BIN_ID
					setColorsent_log_856[2] = 0x02
					setColorsent_log_856[3] = 0x07
					setColorsent_log_856[4] = r_853 as Byte
					setColorsent_log_856[5] = g_854 as Byte
					setColorsent_log_856[6] = b_855 as Byte
					log!log(setColorsent_log_856, 7)
				end
				do
					readonly var x_857 : UInt8 = 23
					readonly var y_858 : UInt8 = 40
					readonly var v_859 : Int16 = score
					readonly var digits_860 : UInt8 = 5
					readonly var scale_861 : UInt8 = 6
					display!drawInteger(x_857, y_858, v_859, digits_860, scale_861)
					var drawIntegersent_log_862 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					drawIntegersent_log_862[0] = LogType : message_sent
					drawIntegersent_log_862[1] = DEBUG_BIN_ID
					drawIntegersent_log_862[2] = 0x02
					drawIntegersent_log_862[3] = 0x0B
					drawIntegersent_log_862[4] = x_857 as Byte
					drawIntegersent_log_862[5] = y_858 as Byte
					drawIntegersent_log_862[6] = (`((` & v_859 & ` >> 8) & 0xFF)`) as Byte
					drawIntegersent_log_862[7] = (`((` & v_859 & ` >> 0) & 0xFF)`) as Byte
					drawIntegersent_log_862[7] = digits_860 as Byte
					drawIntegersent_log_862[8] = scale_861 as Byte
					log!log(drawIntegersent_log_862, 10)
				end
				do
					readonly var x_863 : UInt8 = 26
					readonly var y_864 : UInt8 = 87
					display!drawThingML(x_863, y_864)
					var drawThingMLsent_log_865 : Byte [ 6 ] = { 0 , 0 , 0 , 0 , 0 , 0 }
					drawThingMLsent_log_865[0] = LogType : message_sent
					drawThingMLsent_log_865[1] = DEBUG_BIN_ID
					drawThingMLsent_log_865[2] = 0x02
					drawThingMLsent_log_865[3] = 0x0C
					drawThingMLsent_log_865[4] = x_863 as Byte
					drawThingMLsent_log_865[5] = y_864 as Byte
					log!log(drawThingMLsent_log_865, 6)
				end
				do
					display!update()
					var updatesent_log_866 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
					updatesent_log_866[0] = LogType : message_sent
					updatesent_log_866[1] = DEBUG_BIN_ID
					updatesent_log_866[2] = 0x02
					updatesent_log_866[3] = 0x0F
					log!log(updatesent_log_866, 4)
				end
				log(true)
				stopTime = timestamp()
				quit()
			end
		}
		internal
		event e : controller?position
		action do
			var positionhandled_log_884 : Byte [ 10 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }
			positionhandled_log_884[0] = LogType : message_handled
			positionhandled_log_884[1] = DEBUG_BIN_ID
			positionhandled_log_884[2] = 0x03
			positionhandled_log_884[3] = 0x12
			positionhandled_log_884[4] = 0x00
			positionhandled_log_884[5] = 0x00
			readonly var ref_x885 : Int16 = e.x
			positionhandled_log_884[6] = (`((` & ref_x885 & ` >> 8) & 0xFF)`) as Byte
			positionhandled_log_884[7] = (`((` & ref_x885 & ` >> 0) & 0xFF)`) as Byte
			readonly var ref_y886 : Int16 = e.y
			positionhandled_log_884[8] = (`((` & ref_y886 & ` >> 8) & 0xFF)`) as Byte
			positionhandled_log_884[9] = (`((` & ref_y886 & ` >> 0) & 0xFF)`) as Byte
			log!log(positionhandled_log_884, 10)
			do
				var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
				center = e.x as Int32 * center
				center = center / 200
				do
					readonly var old_padx_22 : Int16 = padx
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
					readonly var new_padx_22 : Int16 = padx
					var padx_log_22 : Byte [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 }
					padx_log_22[0] = LogType : property_changed
					padx_log_22[1] = DEBUG_BIN_ID
					padx_log_22[2] = 0x0F
					padx_log_22[3] = (`((` & old_padx_22 & ` >> 8) & 0xFF)`) as Byte
					padx_log_22[4] = (`((` & old_padx_22 & ` >> 0) & 0xFF)`) as Byte
					padx_log_22[5] = (`((` & new_padx_22 & ` >> 8) & 0xFF)`) as Byte
					padx_log_22[6] = (`((` & new_padx_22 & ` >> 0) & 0xFF)`) as Byte
					log!log(padx_log_22, 7)
				end
			end
		end
		internal
		event e : clock?timer_timeout
		guard true
		action do
			var timer_timeoutlost_log_887 : Byte [ 5 ] = { 0 , 0 , 0 , 0 , 0 }
			timer_timeoutlost_log_887[0] = LogType : message_lost
			timer_timeoutlost_log_887[1] = DEBUG_BIN_ID
			timer_timeoutlost_log_887[2] = 0x01
			timer_timeoutlost_log_887[3] = 0x16
			readonly var ref_id888 : UInt8 = e.id
			timer_timeoutlost_log_887[4] = ref_id888 as Byte
			log!log(timer_timeoutlost_log_887, 5)
		end
		internal
		event e : display?displayReady
		guard true
		action do
			var displayReadylost_log_889 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			displayReadylost_log_889[0] = LogType : message_lost
			displayReadylost_log_889[1] = DEBUG_BIN_ID
			displayReadylost_log_889[2] = 0x02
			displayReadylost_log_889[3] = 0x10
			log!log(displayReadylost_log_889, 4)
		end
		internal
		event e : game?lostBall
		guard true
		action do
			var lostBalllost_log_890 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			lostBalllost_log_890[0] = LogType : message_lost
			lostBalllost_log_890[1] = DEBUG_BIN_ID
			lostBalllost_log_890[2] = 0x05
			lostBalllost_log_890[3] = 0x01
			log!log(lostBalllost_log_890, 4)
		end
		internal
		event e : game?nextLevel
		guard true
		action do
			var nextLevellost_log_891 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			nextLevellost_log_891[0] = LogType : message_lost
			nextLevellost_log_891[1] = DEBUG_BIN_ID
			nextLevellost_log_891[2] = 0x05
			nextLevellost_log_891[3] = 0x02
			log!log(nextLevellost_log_891, 4)
		end
		internal
		event e : pro_game?lostBall
		guard true
		action do
			var lostBalllost_log_892 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			lostBalllost_log_892[0] = LogType : message_lost
			lostBalllost_log_892[1] = DEBUG_BIN_ID
			lostBalllost_log_892[2] = 0x07
			lostBalllost_log_892[3] = 0x01
			log!log(lostBalllost_log_892, 4)
		end
		internal
		event e : pro_game?nextLevel
		guard true
		action do
			var nextLevellost_log_893 : Byte [ 4 ] = { 0 , 0 , 0 , 0 }
			nextLevellost_log_893[0] = LogType : message_lost
			nextLevellost_log_893[1] = DEBUG_BIN_ID
			nextLevellost_log_893[2] = 0x07
			nextLevellost_log_893[3] = 0x02
			log!log(nextLevellost_log_893, 4)
		end
	}
}
enumeration LogType as Byte @id `1`
	{
	function_called = 0
	property_changed = 1
	message_lost = 2
	message_sent = 3
	message_handled = 4
}
thing fragment LogMsgs {
	message log_on()
	@id `3`
	message log_off()
	@id `4`
	message log(payload : Byte [ ], size : UInt8)
	@id `5`
}
thing fragment WithBinaryLog includes LogMsgs {
	required port log @sync_send `true` @id `8` {
		sends log
	}
	readonly property DEBUG_BIN_ID : Byte @id `32`
}
thing fragment Logger includes LogMsgs {
	provided port log @id `9` {
		receives log_on receives log_off receives log
	}
	readonly property ACTIVATE_ON_STARTUP : Boolean @id `33`
	readonly property HAS_SIGNED_BYTE : Boolean @id `34`
	abstract function do_log(payload : Byte [ ], size : UInt8)

	statechart init STARTUP @id `7` {
		state STARTUP @id `8` {
			transition -> ON guard ACTIVATE_ON_STARTUP
			transition -> OFF guard not ACTIVATE_ON_STARTUP
		}
		state ON @id `9` {
			internal
			event d : log?log
			action do_log(d.payload, d.size)
			transition -> OFF
			event log?log_off
		}
		state OFF @id `10` {
			transition -> ON
			event log?log_on
		}
	}
}
thing ConsoleLogger includes Logger @stdout_sync `true` {
	readonly property QUIET : Boolean = true @id `35`
	function do_log(payload : Byte [ ], size : UInt8) @id `19` do
		if (not QUIET) do
			readonly var log_type : Byte = payload [0]
			if (log_type == LogType : function_called) print "log: function_called  ["
			else if (log_type == LogType : property_changed) print "log: property_changed ["
			else if (log_type == LogType : message_lost) print "log: message_lost     ["
			else if (log_type == LogType : message_sent) print "log: message_sent     ["
			else if (log_type == LogType : message_handled) print "log: message_handled  ["
			else print "log: unknown          ["
		end
		var i : UInt8 = 0
		while (i < size) do
			readonly var v : Byte = payload [i]
			if (HAS_SIGNED_BYTE) print (`` & v & ` & 0xFF`) as UInt8
			else print v
			if (not QUIET) print ","
			i ++
		end
		if (not QUIET) println "]"
		else println ""
	end
}
thing fragment DisplayMsgs {
	message clear()
	@id `6`
	message setColor(r : UInt8, g : UInt8, b : UInt8)
	@id `7`
	message setBGColor(r : UInt8, g : UInt8, b : UInt8)
	@id `8`
	message drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	@id `9`
	message fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	@id `10`
	message drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8)
	@id `11`
	message drawThingML(x : UInt8, y : UInt8)
	@id `12`
	message create(xsize : UInt8, ysize : UInt8)
	@id `13`
	message destroy()
	@id `14`
	message update()
	@id `15`
	message displayReady()
	@id `16`
}
thing HeadlessDisplay includes DisplayMsgs @stdout_sync `true` {
	provided port display @id `10` {
		sends displayReady receives create receives destroy receives update receives clear receives setColor receives setBGColor receives drawRect receives fillRect receives drawInteger receives drawThingML
	}
	function mock() @id `20` do
	end
	statechart init INIT @id `11` {
		state INIT @id `12` {
			on entry display!displayReady()
			transition -> MOCK
		}
		state MOCK @id `13` {
			internal
			event display?create
			action mock()
			internal
			event display?destroy
			action mock()
			internal
			event display?update
			action mock()
			internal
			event display?clear
			action mock()
			internal
			event display?setColor
			action mock()
			internal
			event display?setBGColor
			action mock()
			internal
			event display?drawRect
			action mock()
			internal
			event display?fillRect
			action mock()
			internal
			event display?drawInteger
			action mock()
			internal
			event display?drawThingML
			action mock()
		}
	}
}
thing fragment ControllerMsgs {
	message velocity(dx : Int16, dy : Int16)
	@id `17` message position(x : Int16, y : Int16)
	@id `18`
}
thing fragment Controller includes ControllerMsgs {
	provided port controls @id `11` {
		sends position
	}
}
thing fragment IAControllerMsg {
	message updateIA(ballx : Int16, bally : Int16, padx : Int16, pady : Int16)
	@id `19`
}
thing fragment IAController includes Controller , IAControllerMsg {
	required port game @id `12` {
		receives updateIA
	}
}
thing BasicIAController includes IAController @stdout_sync `true` {
	property ctrlx : Int16 = 0 @id `36`
	statechart SC init Following @id `14` {
		state Following @id `15` {
			on entry controls!position(ctrlx, 0)
			transition -> Following
			event e : game?updateIA
			action do
				if (e.ballx > e.padx + 400) ctrlx = ctrlx + 4
				else if (e.ballx < e.padx - 400) ctrlx = ctrlx - 4
				if (ctrlx < -100) ctrlx = -100
				else if (ctrlx > 100) ctrlx = 100
			end
		}
	}
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
	@id `2`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
	@id `3`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
	@id `4`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
	@id `5`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
	@id `6`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
	@id `7`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
	@id `8`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
	@id `9`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
	@id `10`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
	@id `11`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
	@id `12`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
	@id `13`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
	@id `14`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
	@id `15`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
	@id `16`
object String
	@serializable
	@c_type `char *`
	@arduino_type `String`
	@java_type `String`
	@js_type `String`
	@go_type `string`
	@id `17`
enumeration DigitalState as UInt8 @id `18`
	{
	LOW = 0
	HIGH = 1
}
thing fragment TimerMsgs @stl {
	message timer_start(id : UInt8, time : UInt16)
	@id `20`
	message timer_cancel(id : UInt8)
	@id `21`
	message timer_timeout(id : UInt8)
	@id `22`
}
thing fragment TimerClientPort includes TimerMsgs @stl {
	required port timer @id `13` {
		sends timer_start sends timer_cancel receives timer_timeout
	}
}
thing fragment Timer includes TimerMsgs @stl {
	provided port timer @id `14` {
		sends timer_timeout receives timer_start receives timer_cancel
	}
}
thing TimerJava includes Timer @stl @java_import `import java.util.*;` @java_features `
	Hashtable<Integer, TimerTask> tasks = new Hashtable<Integer, TimerTask>();
	Timer timer = new java.util.Timer();` {
	function startTimer(id : UInt8, delay : UInt16) @id `21` do
		cancel(id)
		`final int t_id = ` & id & `;`
	`TimerTask t =  new TimerTask() { public void run(){`
		timer!timer_timeout(`t_id` as UInt8)
		`
        } };
        tasks.put(t_id, t);
        timer.schedule(t, ` & delay & `);`
	end
	function cancel(id : UInt8) @id `22` do
		`TimerTask t = tasks.get(` & id & `);`
	`if (t != null) t.cancel();`
	`timer.purge();`
	end
	statechart SoftTimer init default @id `16` {
		state default @id `17` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object JSArray @id `19`
thing TimerJS includes Timer @stl {
	property Timeouts : JSArray = `{}` as JSArray @id `37`
	function startTimer(id : UInt8, delay : UInt16) @id `23` do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = setTimeout(() => {
        `
		timer!timer_timeout(id)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) @id `24` do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          clearTimeout(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default @id `18` {
		state default @id `19` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object DriftLess @id `20`
thing TimerNodeJS includes Timer @stl @js_dep `driftless:2.0.3` {
	property Timeouts : JSArray = `{}` as JSArray @id `38`
	readonly property driftless : DriftLess = `require('driftless')` as DriftLess @id `39`
	function startTimer(id : UInt8, delay : UInt16) @id `25` do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = ` & driftless & `.setDriftlessTimeout(() => {
        `
		timer!timer_timeout(id)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) @id `26` do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          ` & driftless & `.clearDriftless(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default @id `20` {
		state default @id `21` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
thing TimerPosix includes Timer @stl @c_header `
#include <time.h>
#include <unistd.h>
#include <pthread.h>

#define NB_SOFT_TIMERS 16
` @c_global `uint32_t Timer_timeouts[NB_SOFT_TIMERS];
uint8_t  Timer_wraps[NB_SOFT_TIMERS];
uint32_t Timer_prev;
pthread_mutex_t Timer_mut;` {
	readonly property NB_SOFT_TIMERS : UInt16 = `NB_SOFT_TIMERS` as UInt16 @id `40`
	readonly property SOFT_TIMER_PERIOD : UInt16 = 50 @id `41`
	function time_ms() : UInt32 @id `27` do
	`struct timespec current;
		int res;
		uint32_t millis = 0;
		
		res = clock_gettime(CLOCK_MONOTONIC, &current);
		if (res != 0) {
			  perror("[ERROR]: Could not get current time : ");
		 } else {
			  millis  =  current.tv_sec * 1000;
			  millis += current.tv_nsec / 1000000;
		}`
		return `millis` as UInt32
	end
	function sleep_ms(timeout_ms : UInt16) @id `28` do
		`struct timeval tv;
        tv.tv_sec = ` & timeout_ms & `/1000;
        tv.tv_usec = (` & timeout_ms & `%1000) * 1000;
        select(0, NULL, NULL, NULL, &tv);`
	end
	function initialize() @id `29` do
		`pthread_mutex_init(&Timer_mut, NULL);
	    uint8_t i;
	    for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	        Timer_timeouts[i] = 0;
	        Timer_wraps[i] = 0;
	    }`
		start_soft_timer_process()
	end
	function start_soft_timer_process() @fork_linux_thread `true` @id `30` do
		`Timer_prev = ` & time_ms()& `;`
		while (true) do
			sleep_ms(SOFT_TIMER_PERIOD)
			`pthread_mutex_lock(&Timer_mut);
	        uint32_t current = ` & time_ms()& `;
	        uint8_t i;
	        for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	            if (Timer_timeouts[i] > 0) {
	                if (current >= Timer_prev) {
	                    // Normal time progression
	                    if (current > Timer_timeouts[i] && Timer_wraps[i] == 0) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                        Timer_wraps[i] = 0;
	                    }
	                } else {
	                    // A wraparound has occurred
	                    if (Timer_wraps[i] == 0) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                    } else {
	                        Timer_wraps[i] = 0;
	                        if (current > Timer_timeouts[i]) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                        }
	                    }
	                }
	            }
	        }
	        Timer_prev = current;
	        pthread_mutex_unlock(&Timer_mut);`
		end
	end
	function startTimer(id : UInt8, delay : UInt16) @id `31` do
		`
    	if (` & id & ` < NB_SOFT_TIMERS) {
	        uint32_t current = ` & time_ms()& `;
	        uint32_t timeout = current + ` & delay & `;
	        if (timeout == 0) timeout = 1;
	
	        pthread_mutex_lock(&Timer_mut);
	        Timer_timeouts[` & id & `] = timeout;
	        Timer_wraps[` & id & `] = (timeout > current) ? 0 : 1;
	        pthread_mutex_unlock(&Timer_mut);
	    }
    `
	end
	function cancel(id : UInt8) @id `32` do
		`
        if (` & id & ` < NB_SOFT_TIMERS) {
	        pthread_mutex_lock(&Timer_mut);
	        Timer_timeouts[` & id & `] = 0;
	        Timer_wraps[` & id & `] = 0;
	        pthread_mutex_unlock(&Timer_mut);
	    }
      `
	end
	statechart SoftTimer init default @id `22` {
		on entry start_soft_timer_process()
		state default @id `23` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
thing TimerArduino includes Timer @stl @c_header `
#define NB_SOFT_TIMERS 32
` @c_global `uint32_t Timer_timeouts[NB_SOFT_TIMERS];
uint8_t  Timer_wraps[NB_SOFT_TIMERS];
uint32_t Timer_prev;` {
	readonly property NB_SOFT_TIMERS : UInt16 = `NB_SOFT_TIMERS` as UInt16 @id `42`
	function time_ms() : UInt32 @id `33` do
		return `millis()` as UInt32
	end
	function init_arrays() @id `34` do
		`uint8_t i;
	    for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	        Timer_timeouts[i] = 0;
	        Timer_wraps[i] = 0;
	    }
	    Timer_prev = ` & time_ms()& `;`
	end
	function poll_soft_timers() @scheduler_polling `true` @id `35` do
		`uint32_t current = ` & time_ms()& `;
		uint8_t i;
		for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
		    if (Timer_timeouts[i] > 0) {
		        if (current >= Timer_prev) {
		            // Normal time progression
		            if (current > Timer_timeouts[i] && Timer_wraps[i] == 0) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		                Timer_wraps[i] = 0;
		            }
		        } else {
		            // A wraparound has occurred
		            if (Timer_wraps[i] == 0) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		            } else {
		                Timer_wraps[i] = 0;
		                if (current > Timer_timeouts[i]) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		                }
		            }
		        }
		    }
		}`
	end
	function startTimer(id : UInt8, delay : UInt16) @id `36` do
		`
    	if (` & id & ` < NB_SOFT_TIMERS) {
	        uint32_t current = ` & time_ms()& `;
	        uint32_t timeout = current + ` & delay & `;
	        if (timeout == 0) timeout = 1;
	
	        Timer_timeouts[` & id & `] = timeout;
	        Timer_wraps[` & id & `] = (timeout > current) ? 0 : 1;
	    }
    `
	end
	function cancel(id : UInt8) @id `37` do
		`
        if (` & id & ` < NB_SOFT_TIMERS) {
	        Timer_timeouts[` & id & `] = 0;
	        Timer_wraps[` & id & `] = 0;
	    }
      `
	end
	statechart SoftTimer init default @id `24` {
		on entry init_arrays()
		state default @id `25` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object TimerMap
	@go_type `map[uint8]*time.Timer`
	@id `21`
thing TimerGo includes TimerMsgs @stl @go_import `time` {
	provided port timer @id `15` {
		sends timer_timeout receives timer_start receives timer_cancel
	}
	property Timers : TimerMap @id `43`
	function initialize() @id `38` do
		Timers = `make(map[uint8]*time.Timer)` as TimerMap
	end
	function startTimer(id : UInt8, delay : UInt16) @id `39` do
		cancel(id)
		`
    	` & Timers & `[` & id & `] = time.AfterFunc(time.Millisecond*time.Duration(` & delay & `), func() {
    		`
		timer!timer_timeout(id)
	`
    	})
    `
	end
	function cancel(id : UInt8) @id `40` do
		`
    	if t, ok := ` & Timers & `[` & id & `]; ok {
    		t.Stop()
    		delete(` & Timers & `, ` & id & `)
    	}
    `
	end
	statechart SoftTimer init default @id `26` {
		on entry initialize()
		state default @id `27` {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
configuration test @arduino_stdout `Serial` @arduino_stdout_baudrate `115200` {
	instance game : BreakoutGameArduino
	set game.DEBUG_BIN_ID = 0
	instance log : ConsoleLogger
	set log.ACTIVATE_ON_STARTUP = true
	set log.HAS_SIGNED_BYTE = false
	connector game.log => log.log		
	instance disp : HeadlessDisplay
	instance timer : TimerArduino
	instance ctrl : BasicIAController
	connector game.clock => timer . timer
	connector game.display => disp . display
	connector game.req_game => game . pro_game
	connector game.controller => ctrl . controls
	connector ctrl.game => game . ia
}
