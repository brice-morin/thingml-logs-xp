/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : BreakoutGameJava
 **/
public class BreakoutGameJava extends Component implements IBreakoutGameJava_display, IBreakoutGameJava_game, IBreakoutGameJava_pro_game, IBreakoutGameJava_controller, IBreakoutGameJava_clock {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tstartTime = " + BreakoutGame_startTime_var;
result += "\tstopTime = " + BreakoutGame_stopTime_var;
result += "\tlastTimestamp = " + BreakoutGame_lastTimestamp_var;
result += "\tcounter = " + BreakoutGame_counter_var;
result += "\tXDISPSIZE = " + BreakoutGame_XDISPSIZE_var;
result += "\tYDISPSIZE = " + BreakoutGame_YDISPSIZE_var;
result += "\tSCALE = " + BreakoutGame_SCALE_var;
result += "\tXMAX = " + BreakoutGame_XMAX_var;
result += "\tYMAX = " + BreakoutGame_YMAX_var;
result += "\tTOP = " + BreakoutGame_TOP_var;
result += "\tBOTTOM = " + BreakoutGame_BOTTOM_var;
result += "\tLEFT = " + BreakoutGame_LEFT_var;
result += "\tRIGHT = " + BreakoutGame_RIGHT_var;
result += "\tbr = " + BreakoutGame_br_var;
result += "\tbx = " + BreakoutGame_bx_var;
result += "\tby = " + BreakoutGame_by_var;
result += "\tdx = " + BreakoutGame_dx_var;
result += "\tdy = " + BreakoutGame_dy_var;
result += "\tpadx = " + BreakoutGame_padx_var;
result += "\tpady = " + BreakoutGame_pady_var;
result += "\tpadlen = " + BreakoutGame_padlen_var;
result += "\tprevBX = " + BreakoutGame_prevBX_var;
result += "\tprevBY = " + BreakoutGame_prevBY_var;
result += "\tbgcolor = " + BreakoutGame_bgcolor_var;
result += "\tfgcolor = " + BreakoutGame_fgcolor_var;
result += "\tperiod = " + BreakoutGame_period_var;
result += "\tprevPX = " + BreakoutGame_prevPX_var;
result += "\tprevPY = " + BreakoutGame_prevPY_var;
result += "\tBRICK_ROWS = " + BreakoutGame_BRICK_ROWS_var;
result += "\tBRICK_HEIGHT = " + BreakoutGame_BRICK_HEIGHT_var;
result += "\tbricks = " + BreakoutGame_bricks_var;
result += "\tscore = " + BreakoutGame_score_var;
result += "\tlives = " + BreakoutGame_lives_var;
result += "\tlevel = " + BreakoutGame_level_var;
result += "";
return result;
}

public synchronized void timer_timeout_via_clock(int TimerMsgs_timer_timeout_id_var){
final Event _msg = timer_timeoutType.instantiate(TimerMsgs_timer_timeout_id_var);
_msg.setPort(clock_port);
receive(_msg);
}

public synchronized void displayReady_via_display(){
final Event _msg = displayReadyType.instantiate();
_msg.setPort(display_port);
receive(_msg);
}

public synchronized void position_via_controller(int ControllerMsgs_position_x_var, int ControllerMsgs_position_y_var){
final Event _msg = positionType.instantiate(ControllerMsgs_position_x_var, ControllerMsgs_position_y_var);
_msg.setPort(controller_port);
receive(_msg);
}

public synchronized void lostBall_via_game(){
final Event _msg = lostBallType.instantiate();
_msg.setPort(game_port);
receive(_msg);
}

public synchronized void nextLevel_via_game(){
final Event _msg = nextLevelType.instantiate();
_msg.setPort(game_port);
receive(_msg);
}

public synchronized void lostBall_via_pro_game(){
final Event _msg = lostBallType.instantiate();
_msg.setPort(pro_game_port);
receive(_msg);
}

public synchronized void nextLevel_via_pro_game(){
final Event _msg = nextLevelType.instantiate();
_msg.setPort(pro_game_port);
receive(_msg);
}

private void sendTimer_start_via_clock(int TimerMsgs_timer_start_id_var, int TimerMsgs_timer_start_time_var){
clock_port.send(timer_startType.instantiate(TimerMsgs_timer_start_id_var, TimerMsgs_timer_start_time_var));
}

private void sendTimer_cancel_via_clock(int TimerMsgs_timer_cancel_id_var){
clock_port.send(timer_cancelType.instantiate(TimerMsgs_timer_cancel_id_var));
}

private void sendCreate_via_display(int DisplayMsgs_create_xsize_var, int DisplayMsgs_create_ysize_var){
display_port.send(createType.instantiate(DisplayMsgs_create_xsize_var, DisplayMsgs_create_ysize_var));
}

private void sendFillRect_via_display(int DisplayMsgs_fillRect_x_var, int DisplayMsgs_fillRect_y_var, int DisplayMsgs_fillRect_width_var, int DisplayMsgs_fillRect_height_var){
display_port.send(fillRectType.instantiate(DisplayMsgs_fillRect_x_var, DisplayMsgs_fillRect_y_var, DisplayMsgs_fillRect_width_var, DisplayMsgs_fillRect_height_var));
}

private void sendDrawRect_via_display(int DisplayMsgs_drawRect_x_var, int DisplayMsgs_drawRect_y_var, int DisplayMsgs_drawRect_width_var, int DisplayMsgs_drawRect_height_var){
display_port.send(drawRectType.instantiate(DisplayMsgs_drawRect_x_var, DisplayMsgs_drawRect_y_var, DisplayMsgs_drawRect_width_var, DisplayMsgs_drawRect_height_var));
}

private void sendClear_via_display(){
display_port.send(clearType.instantiate());
}

private void sendSetColor_via_display(int DisplayMsgs_setColor_r_var, int DisplayMsgs_setColor_g_var, int DisplayMsgs_setColor_b_var){
display_port.send(setColorType.instantiate(DisplayMsgs_setColor_r_var, DisplayMsgs_setColor_g_var, DisplayMsgs_setColor_b_var));
}

private void sendSetBGColor_via_display(int DisplayMsgs_setBGColor_r_var, int DisplayMsgs_setBGColor_g_var, int DisplayMsgs_setBGColor_b_var){
display_port.send(setBGColorType.instantiate(DisplayMsgs_setBGColor_r_var, DisplayMsgs_setBGColor_g_var, DisplayMsgs_setBGColor_b_var));
}

private void sendDrawInteger_via_display(int DisplayMsgs_drawInteger_x_var, int DisplayMsgs_drawInteger_y_var, int DisplayMsgs_drawInteger_v_var, int DisplayMsgs_drawInteger_digits_var, int DisplayMsgs_drawInteger_scale_var){
display_port.send(drawIntegerType.instantiate(DisplayMsgs_drawInteger_x_var, DisplayMsgs_drawInteger_y_var, DisplayMsgs_drawInteger_v_var, DisplayMsgs_drawInteger_digits_var, DisplayMsgs_drawInteger_scale_var));
}

private void sendUpdate_via_display(){
display_port.send(updateType.instantiate());
}

private void sendDrawThingML_via_display(int DisplayMsgs_drawThingML_x_var, int DisplayMsgs_drawThingML_y_var){
display_port.send(drawThingMLType.instantiate(DisplayMsgs_drawThingML_x_var, DisplayMsgs_drawThingML_y_var));
}

private void sendUpdateIA_via_ia(int IAControllerMsg_updateIA_ballx_var, int IAControllerMsg_updateIA_bally_var, int IAControllerMsg_updateIA_padx_var, int IAControllerMsg_updateIA_pady_var){
ia_port.send(updateIAType.instantiate(IAControllerMsg_updateIA_ballx_var, IAControllerMsg_updateIA_bally_var, IAControllerMsg_updateIA_padx_var, IAControllerMsg_updateIA_pady_var));
}

private void sendLostBall_via_game(){
game_port.send(lostBallType.instantiate());
}

private void sendNextLevel_via_game(){
game_port.send(nextLevelType.instantiate());
}

private void sendLostBall_via_req_game(){
req_game_port.send(lostBallType.instantiate());
}

private void sendNextLevel_via_req_game(){
req_game_port.send(nextLevelType.instantiate());
}

//Attributes
private int BreakoutGame_LEFT_var;
private int BreakoutGame_XMAX_var;
private int BreakoutGame_SCALE_var;
private int BreakoutGame_br_var;
private long BreakoutGame_stopTime_var;
private int BreakoutGame_dy_var;
private int BreakoutGame_dx_var;
private int BreakoutGame_padx_var;
private int BreakoutGame_period_var;
private int BreakoutGame_padlen_var;
private long BreakoutGame_lastTimestamp_var;
private int BreakoutGame_prevBY_var;
private int BreakoutGame_bx_var;
private int BreakoutGame_counter_var;
private int BreakoutGame_BRICK_ROWS_var;
private int BreakoutGame_prevBX_var;
private int BreakoutGame_TOP_var;
private int BreakoutGame_prevPY_var;
private int BreakoutGame_prevPX_var;
private int BreakoutGame_YDISPSIZE_var;
private int[] BreakoutGame_bgcolor_var;
private int[] BreakoutGame_fgcolor_var;
private int[] BreakoutGame_bricks_var;
private int BreakoutGame_XDISPSIZE_var;
private int BreakoutGame_YMAX_var;
private long BreakoutGame_startTime_var;
private int BreakoutGame_BRICK_HEIGHT_var;
private int BreakoutGame_by_var;
private int BreakoutGame_score_var;
private int BreakoutGame_pady_var;
private int BreakoutGame_lives_var;
private int BreakoutGame_BOTTOM_var;
private int BreakoutGame_RIGHT_var;
private int BreakoutGame_level_var;
private int BreakoutGame_SC_LAUNCH_countdown_var;
//Ports
private Port clock_port;
private Port display_port;
private Port controller_port;
private Port ia_port;
private Port game_port;
private Port req_game_port;
private Port pro_game_port;
//Message types
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
protected final ClearMessageType clearType = new ClearMessageType();
protected final SetColorMessageType setColorType = new SetColorMessageType();
protected final SetBGColorMessageType setBGColorType = new SetBGColorMessageType();
protected final DrawRectMessageType drawRectType = new DrawRectMessageType();
protected final FillRectMessageType fillRectType = new FillRectMessageType();
protected final DrawIntegerMessageType drawIntegerType = new DrawIntegerMessageType();
protected final DrawThingMLMessageType drawThingMLType = new DrawThingMLMessageType();
protected final CreateMessageType createType = new CreateMessageType();
protected final DestroyMessageType destroyType = new DestroyMessageType();
protected final UpdateMessageType updateType = new UpdateMessageType();
protected final DisplayReadyMessageType displayReadyType = new DisplayReadyMessageType();
protected final VelocityMessageType velocityType = new VelocityMessageType();
protected final PositionMessageType positionType = new PositionMessageType();
protected final UpdateIAMessageType updateIAType = new UpdateIAMessageType();
protected final LostBallMessageType lostBallType = new LostBallMessageType();
protected final NextLevelMessageType nextLevelType = new NextLevelMessageType();
//Empty Constructor
public BreakoutGameJava() {
super();
}

//Getters and Setters for non readonly/final attributes
public int getBreakoutGame_LEFT_var() {
return BreakoutGame_LEFT_var;
}

public BreakoutGameJava initBreakoutGame_LEFT_var(int BreakoutGame_LEFT_var) {
this.BreakoutGame_LEFT_var = BreakoutGame_LEFT_var;
return this;
}

public int getBreakoutGame_XMAX_var() {
return BreakoutGame_XMAX_var;
}

public BreakoutGameJava initBreakoutGame_XMAX_var(int BreakoutGame_XMAX_var) {
this.BreakoutGame_XMAX_var = BreakoutGame_XMAX_var;
return this;
}

public int getBreakoutGame_SCALE_var() {
return BreakoutGame_SCALE_var;
}

public BreakoutGameJava initBreakoutGame_SCALE_var(int BreakoutGame_SCALE_var) {
this.BreakoutGame_SCALE_var = BreakoutGame_SCALE_var;
return this;
}

public int getBreakoutGame_br_var() {
return BreakoutGame_br_var;
}

public BreakoutGameJava initBreakoutGame_br_var(int BreakoutGame_br_var) {
this.BreakoutGame_br_var = BreakoutGame_br_var;
return this;
}

public long getBreakoutGame_stopTime_var() {
return BreakoutGame_stopTime_var;
}

public void setBreakoutGame_stopTime_var(long BreakoutGame_stopTime_var) {
this.BreakoutGame_stopTime_var = BreakoutGame_stopTime_var;
}

public BreakoutGameJava initBreakoutGame_stopTime_var(long BreakoutGame_stopTime_var) {
this.BreakoutGame_stopTime_var = BreakoutGame_stopTime_var;
return this;
}

public int getBreakoutGame_dy_var() {
return BreakoutGame_dy_var;
}

public void setBreakoutGame_dy_var(int BreakoutGame_dy_var) {
this.BreakoutGame_dy_var = BreakoutGame_dy_var;
}

public BreakoutGameJava initBreakoutGame_dy_var(int BreakoutGame_dy_var) {
this.BreakoutGame_dy_var = BreakoutGame_dy_var;
return this;
}

public int getBreakoutGame_dx_var() {
return BreakoutGame_dx_var;
}

public void setBreakoutGame_dx_var(int BreakoutGame_dx_var) {
this.BreakoutGame_dx_var = BreakoutGame_dx_var;
}

public BreakoutGameJava initBreakoutGame_dx_var(int BreakoutGame_dx_var) {
this.BreakoutGame_dx_var = BreakoutGame_dx_var;
return this;
}

public int getBreakoutGame_padx_var() {
return BreakoutGame_padx_var;
}

public void setBreakoutGame_padx_var(int BreakoutGame_padx_var) {
this.BreakoutGame_padx_var = BreakoutGame_padx_var;
}

public BreakoutGameJava initBreakoutGame_padx_var(int BreakoutGame_padx_var) {
this.BreakoutGame_padx_var = BreakoutGame_padx_var;
return this;
}

public int getBreakoutGame_period_var() {
return BreakoutGame_period_var;
}

public BreakoutGameJava initBreakoutGame_period_var(int BreakoutGame_period_var) {
this.BreakoutGame_period_var = BreakoutGame_period_var;
return this;
}

public int getBreakoutGame_padlen_var() {
return BreakoutGame_padlen_var;
}

public void setBreakoutGame_padlen_var(int BreakoutGame_padlen_var) {
this.BreakoutGame_padlen_var = BreakoutGame_padlen_var;
}

public BreakoutGameJava initBreakoutGame_padlen_var(int BreakoutGame_padlen_var) {
this.BreakoutGame_padlen_var = BreakoutGame_padlen_var;
return this;
}

public long getBreakoutGame_lastTimestamp_var() {
return BreakoutGame_lastTimestamp_var;
}

public void setBreakoutGame_lastTimestamp_var(long BreakoutGame_lastTimestamp_var) {
this.BreakoutGame_lastTimestamp_var = BreakoutGame_lastTimestamp_var;
}

public BreakoutGameJava initBreakoutGame_lastTimestamp_var(long BreakoutGame_lastTimestamp_var) {
this.BreakoutGame_lastTimestamp_var = BreakoutGame_lastTimestamp_var;
return this;
}

public int getBreakoutGame_prevBY_var() {
return BreakoutGame_prevBY_var;
}

public void setBreakoutGame_prevBY_var(int BreakoutGame_prevBY_var) {
this.BreakoutGame_prevBY_var = BreakoutGame_prevBY_var;
}

public BreakoutGameJava initBreakoutGame_prevBY_var(int BreakoutGame_prevBY_var) {
this.BreakoutGame_prevBY_var = BreakoutGame_prevBY_var;
return this;
}

public int getBreakoutGame_bx_var() {
return BreakoutGame_bx_var;
}

public void setBreakoutGame_bx_var(int BreakoutGame_bx_var) {
this.BreakoutGame_bx_var = BreakoutGame_bx_var;
}

public BreakoutGameJava initBreakoutGame_bx_var(int BreakoutGame_bx_var) {
this.BreakoutGame_bx_var = BreakoutGame_bx_var;
return this;
}

public int getBreakoutGame_counter_var() {
return BreakoutGame_counter_var;
}

public void setBreakoutGame_counter_var(int BreakoutGame_counter_var) {
this.BreakoutGame_counter_var = BreakoutGame_counter_var;
}

public BreakoutGameJava initBreakoutGame_counter_var(int BreakoutGame_counter_var) {
this.BreakoutGame_counter_var = BreakoutGame_counter_var;
return this;
}

public int getBreakoutGame_BRICK_ROWS_var() {
return BreakoutGame_BRICK_ROWS_var;
}

public BreakoutGameJava initBreakoutGame_BRICK_ROWS_var(int BreakoutGame_BRICK_ROWS_var) {
this.BreakoutGame_BRICK_ROWS_var = BreakoutGame_BRICK_ROWS_var;
return this;
}

public int getBreakoutGame_prevBX_var() {
return BreakoutGame_prevBX_var;
}

public void setBreakoutGame_prevBX_var(int BreakoutGame_prevBX_var) {
this.BreakoutGame_prevBX_var = BreakoutGame_prevBX_var;
}

public BreakoutGameJava initBreakoutGame_prevBX_var(int BreakoutGame_prevBX_var) {
this.BreakoutGame_prevBX_var = BreakoutGame_prevBX_var;
return this;
}

public int getBreakoutGame_TOP_var() {
return BreakoutGame_TOP_var;
}

public BreakoutGameJava initBreakoutGame_TOP_var(int BreakoutGame_TOP_var) {
this.BreakoutGame_TOP_var = BreakoutGame_TOP_var;
return this;
}

public int getBreakoutGame_prevPY_var() {
return BreakoutGame_prevPY_var;
}

public void setBreakoutGame_prevPY_var(int BreakoutGame_prevPY_var) {
this.BreakoutGame_prevPY_var = BreakoutGame_prevPY_var;
}

public BreakoutGameJava initBreakoutGame_prevPY_var(int BreakoutGame_prevPY_var) {
this.BreakoutGame_prevPY_var = BreakoutGame_prevPY_var;
return this;
}

public int getBreakoutGame_prevPX_var() {
return BreakoutGame_prevPX_var;
}

public void setBreakoutGame_prevPX_var(int BreakoutGame_prevPX_var) {
this.BreakoutGame_prevPX_var = BreakoutGame_prevPX_var;
}

public BreakoutGameJava initBreakoutGame_prevPX_var(int BreakoutGame_prevPX_var) {
this.BreakoutGame_prevPX_var = BreakoutGame_prevPX_var;
return this;
}

public int getBreakoutGame_YDISPSIZE_var() {
return BreakoutGame_YDISPSIZE_var;
}

public BreakoutGameJava initBreakoutGame_YDISPSIZE_var(int BreakoutGame_YDISPSIZE_var) {
this.BreakoutGame_YDISPSIZE_var = BreakoutGame_YDISPSIZE_var;
return this;
}

public int[] getBreakoutGame_bgcolor_var() {
return BreakoutGame_bgcolor_var;
}

public void setBreakoutGame_bgcolor_var(int[] BreakoutGame_bgcolor_var) {
this.BreakoutGame_bgcolor_var = BreakoutGame_bgcolor_var;
}

public BreakoutGameJava initBreakoutGame_bgcolor_var(int[] BreakoutGame_bgcolor_var) {
this.BreakoutGame_bgcolor_var = BreakoutGame_bgcolor_var;
return this;
}

public int[] getBreakoutGame_fgcolor_var() {
return BreakoutGame_fgcolor_var;
}

public void setBreakoutGame_fgcolor_var(int[] BreakoutGame_fgcolor_var) {
this.BreakoutGame_fgcolor_var = BreakoutGame_fgcolor_var;
}

public BreakoutGameJava initBreakoutGame_fgcolor_var(int[] BreakoutGame_fgcolor_var) {
this.BreakoutGame_fgcolor_var = BreakoutGame_fgcolor_var;
return this;
}

public int[] getBreakoutGame_bricks_var() {
return BreakoutGame_bricks_var;
}

public void setBreakoutGame_bricks_var(int[] BreakoutGame_bricks_var) {
this.BreakoutGame_bricks_var = BreakoutGame_bricks_var;
}

public BreakoutGameJava initBreakoutGame_bricks_var(int[] BreakoutGame_bricks_var) {
this.BreakoutGame_bricks_var = BreakoutGame_bricks_var;
return this;
}

public int getBreakoutGame_XDISPSIZE_var() {
return BreakoutGame_XDISPSIZE_var;
}

public BreakoutGameJava initBreakoutGame_XDISPSIZE_var(int BreakoutGame_XDISPSIZE_var) {
this.BreakoutGame_XDISPSIZE_var = BreakoutGame_XDISPSIZE_var;
return this;
}

public int getBreakoutGame_YMAX_var() {
return BreakoutGame_YMAX_var;
}

public BreakoutGameJava initBreakoutGame_YMAX_var(int BreakoutGame_YMAX_var) {
this.BreakoutGame_YMAX_var = BreakoutGame_YMAX_var;
return this;
}

public long getBreakoutGame_startTime_var() {
return BreakoutGame_startTime_var;
}

public void setBreakoutGame_startTime_var(long BreakoutGame_startTime_var) {
this.BreakoutGame_startTime_var = BreakoutGame_startTime_var;
}

public BreakoutGameJava initBreakoutGame_startTime_var(long BreakoutGame_startTime_var) {
this.BreakoutGame_startTime_var = BreakoutGame_startTime_var;
return this;
}

public int getBreakoutGame_BRICK_HEIGHT_var() {
return BreakoutGame_BRICK_HEIGHT_var;
}

public BreakoutGameJava initBreakoutGame_BRICK_HEIGHT_var(int BreakoutGame_BRICK_HEIGHT_var) {
this.BreakoutGame_BRICK_HEIGHT_var = BreakoutGame_BRICK_HEIGHT_var;
return this;
}

public int getBreakoutGame_by_var() {
return BreakoutGame_by_var;
}

public void setBreakoutGame_by_var(int BreakoutGame_by_var) {
this.BreakoutGame_by_var = BreakoutGame_by_var;
}

public BreakoutGameJava initBreakoutGame_by_var(int BreakoutGame_by_var) {
this.BreakoutGame_by_var = BreakoutGame_by_var;
return this;
}

public int getBreakoutGame_score_var() {
return BreakoutGame_score_var;
}

public void setBreakoutGame_score_var(int BreakoutGame_score_var) {
this.BreakoutGame_score_var = BreakoutGame_score_var;
}

public BreakoutGameJava initBreakoutGame_score_var(int BreakoutGame_score_var) {
this.BreakoutGame_score_var = BreakoutGame_score_var;
return this;
}

public int getBreakoutGame_pady_var() {
return BreakoutGame_pady_var;
}

public void setBreakoutGame_pady_var(int BreakoutGame_pady_var) {
this.BreakoutGame_pady_var = BreakoutGame_pady_var;
}

public BreakoutGameJava initBreakoutGame_pady_var(int BreakoutGame_pady_var) {
this.BreakoutGame_pady_var = BreakoutGame_pady_var;
return this;
}

public int getBreakoutGame_lives_var() {
return BreakoutGame_lives_var;
}

public void setBreakoutGame_lives_var(int BreakoutGame_lives_var) {
this.BreakoutGame_lives_var = BreakoutGame_lives_var;
}

public BreakoutGameJava initBreakoutGame_lives_var(int BreakoutGame_lives_var) {
this.BreakoutGame_lives_var = BreakoutGame_lives_var;
return this;
}

public int getBreakoutGame_BOTTOM_var() {
return BreakoutGame_BOTTOM_var;
}

public BreakoutGameJava initBreakoutGame_BOTTOM_var(int BreakoutGame_BOTTOM_var) {
this.BreakoutGame_BOTTOM_var = BreakoutGame_BOTTOM_var;
return this;
}

public int getBreakoutGame_RIGHT_var() {
return BreakoutGame_RIGHT_var;
}

public BreakoutGameJava initBreakoutGame_RIGHT_var(int BreakoutGame_RIGHT_var) {
this.BreakoutGame_RIGHT_var = BreakoutGame_RIGHT_var;
return this;
}

public int getBreakoutGame_level_var() {
return BreakoutGame_level_var;
}

public void setBreakoutGame_level_var(int BreakoutGame_level_var) {
this.BreakoutGame_level_var = BreakoutGame_level_var;
}

public BreakoutGameJava initBreakoutGame_level_var(int BreakoutGame_level_var) {
this.BreakoutGame_level_var = BreakoutGame_level_var;
return this;
}

public int getBreakoutGame_SC_LAUNCH_countdown_var() {
return BreakoutGame_SC_LAUNCH_countdown_var;
}

public void setBreakoutGame_SC_LAUNCH_countdown_var(int BreakoutGame_SC_LAUNCH_countdown_var) {
this.BreakoutGame_SC_LAUNCH_countdown_var = BreakoutGame_SC_LAUNCH_countdown_var;
}

public BreakoutGameJava initBreakoutGame_SC_LAUNCH_countdown_var(int BreakoutGame_SC_LAUNCH_countdown_var) {
this.BreakoutGame_SC_LAUNCH_countdown_var = BreakoutGame_SC_LAUNCH_countdown_var;
return this;
}

//Getters for Ports
public Port getClock_port() {
return clock_port;
}
public Port getDisplay_port() {
return display_port;
}
public Port getController_port() {
return controller_port;
}
public Port getIa_port() {
return ia_port;
}
public Port getGame_port() {
return game_port;
}
public Port getReq_game_port() {
return req_game_port;
}
public Port getPro_game_port() {
return pro_game_port;
}
private CompositeState buildBreakoutGame_SC(){
final AtomicState state_BreakoutGame_SC_INIT = new AtomicState("INIT");
state_BreakoutGame_SC_INIT.onEntry(()->{
BreakoutGame_startTime_var = (long) (timestamp());
sendCreate_via_display((int) (getBreakoutGame_XDISPSIZE_var()), (int) (getBreakoutGame_YDISPSIZE_var()));
});
final AtomicState state_BreakoutGame_SC_LAUNCH = new AtomicState("LAUNCH");
state_BreakoutGame_SC_LAUNCH.onEntry(()->{
sendTimer_start_via_clock((int) (0), (int) (getBreakoutGame_period_var()));
BreakoutGame_SC_LAUNCH_countdown_var = (int) (3);
drawScore();
drawLives();
sendUpdate_via_display();
});
final AtomicState state_BreakoutGame_SC_PLAY = new AtomicState("PLAY");
state_BreakoutGame_SC_PLAY.onEntry(()->{
sendTimer_start_via_clock((int) (0), (int) (getBreakoutGame_period_var()));
});
final AtomicState state_BreakoutGame_SC_LOSTBALL = new AtomicState("LOSTBALL");
state_BreakoutGame_SC_LOSTBALL.onEntry(()->{
sendTimer_start_via_clock((int) (0), (int) (getBreakoutGame_period_var()));
BreakoutGame_lives_var = (int) (getBreakoutGame_lives_var() - 1);
eraseBall();
erasePad();
drawLives();
sendUpdate_via_display();
log((boolean) (true));
});
final AtomicState state_BreakoutGame_SC_NEXTLEVEL = new AtomicState("NEXTLEVEL");
state_BreakoutGame_SC_NEXTLEVEL.onEntry(()->{
sendTimer_start_via_clock((int) (0), (int) (getBreakoutGame_period_var()));
BreakoutGame_level_var = (int) (getBreakoutGame_level_var() + 1);
drawLevel();
eraseBall();
erasePad();
if((getBreakoutGame_level_var() % 2) == 0 && getBreakoutGame_padlen_var() > 5 * getBreakoutGame_SCALE_var()) {
BreakoutGame_padlen_var = (int) (getBreakoutGame_padlen_var() - (4 * getBreakoutGame_SCALE_var()));

}
if((getBreakoutGame_level_var() % 2) == 1) {
BreakoutGame_dy_var = (int) ((getBreakoutGame_dy_var() * 3) / 2);

}
drawLives();
createBricks();
sendUpdate_via_display();
});
final FinalState state_BreakoutGame_SC_GAMEOVER = new FinalState("GAMEOVER");
state_BreakoutGame_SC_GAMEOVER.onEntry(()->{
eraseBall();
erasePad();
sendSetColor_via_display((int) (255), (int) (255), (int) (255));
sendFillRect_via_display((int) (8), (int) (30), (int) (142), (int) (76));
sendSetColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
sendFillRect_via_display((int) (9), (int) (31), (int) (140), (int) (50));
sendSetBGColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
sendSetColor_via_display((int) (158), (int) (209), (int) (130));
sendDrawInteger_via_display((int) (23), (int) (40), (int) (getBreakoutGame_score_var()), (int) (5), (int) (6));
sendDrawThingML_via_display((int) (26), (int) (87));
sendUpdate_via_display();
log((boolean) (true));
BreakoutGame_stopTime_var = (long) (timestamp());
quit();
stop();
delete();
});
Transition h855501888 = new Transition();
h855501888.from(state_BreakoutGame_SC_INIT).to(state_BreakoutGame_SC_LAUNCH);
h855501888.event(displayReadyType);
h855501888.port(display_port);
h855501888.action((Event e)->{
sendClear_via_display();
initColors();
sendSetColor_via_display((int) (BreakoutGame_bgcolor_var[0]
), (int) (BreakoutGame_bgcolor_var[1]
), (int) (BreakoutGame_bgcolor_var[2]
));
sendFillRect_via_display((int) (0), (int) (0), (int) (getBreakoutGame_XDISPSIZE_var()), (int) (getBreakoutGame_YDISPSIZE_var()));
sendSetColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
sendFillRect_via_display((int) (0), (int) (0), (int) (getBreakoutGame_XDISPSIZE_var()), (int) (14));
drawWalls();
createBricks();
drawLevel();
});

Handler h1093441885 = new Handler();
h1093441885.from(state_BreakoutGame_SC_LAUNCH);
h1093441885.event(timer_timeoutType);
h1093441885.guard((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == 0 && getBreakoutGame_SC_LAUNCH_countdown_var() > 0;
});

h1093441885.port(clock_port);
h1093441885.action((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
sendTimer_start_via_clock((int) (0), (int) (getBreakoutGame_period_var()));
drawPad();
if((getBreakoutGame_SC_LAUNCH_countdown_var() % 30) == 0) {
drawCountDown((int) (getBreakoutGame_SC_LAUNCH_countdown_var() / 30));

}
BreakoutGame_SC_LAUNCH_countdown_var = (int) (getBreakoutGame_SC_LAUNCH_countdown_var() - 1);
sendUpdate_via_display();
});

Transition h2076829355 = new Transition();
h2076829355.from(state_BreakoutGame_SC_LAUNCH).to(state_BreakoutGame_SC_PLAY);
h2076829355.event(timer_timeoutType);
h2076829355.guard((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == 0 && getBreakoutGame_SC_LAUNCH_countdown_var() == 0;
});

h2076829355.port(clock_port);
h2076829355.action((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
drawCountDown((int) (0));
resetBall();
sendUpdate_via_display();
});

Handler h1649498695 = new Handler();
h1649498695.from(state_BreakoutGame_SC_PLAY);
h1649498695.event(timer_timeoutType);
h1649498695.guard((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == 0;
});

h1649498695.port(clock_port);
h1649498695.action((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
BreakoutGame_bx_var = (int) (getBreakoutGame_bx_var() + getBreakoutGame_dx_var());
BreakoutGame_by_var = (int) (getBreakoutGame_by_var() + getBreakoutGame_dy_var());
int wl_var = (int) (getBreakoutGame_LEFT_var() + getBreakoutGame_br_var());

int wr_var = (int) (getBreakoutGame_RIGHT_var() - getBreakoutGame_br_var());

int wt_var = (int) (getBreakoutGame_TOP_var() + getBreakoutGame_br_var());

int wb_var = (int) (getBreakoutGame_BOTTOM_var() - getBreakoutGame_br_var());

if(getBreakoutGame_bx_var() < wl_var) {
BreakoutGame_dx_var = (int) ( -getBreakoutGame_dx_var());
BreakoutGame_bx_var = (int) (2 * wl_var - getBreakoutGame_bx_var());
incrementScore((int) ( -1));

} else {
if(getBreakoutGame_bx_var() > wr_var) {
BreakoutGame_dx_var = (int) ( -getBreakoutGame_dx_var());
BreakoutGame_bx_var = (int) (2 * wr_var - getBreakoutGame_bx_var());
incrementScore((int) ( -1));

}

}
if(getBreakoutGame_by_var() < wt_var) {
BreakoutGame_dy_var = (int) ( -getBreakoutGame_dy_var());
BreakoutGame_by_var = (int) (2 * wt_var - getBreakoutGame_by_var());
incrementScore((int) ( -1));

} else {
if(getBreakoutGame_by_var() > wb_var) {
sendLostBall_via_game();
sendLostBall_via_req_game();

}

}
if(getBreakoutGame_dy_var() > 0) {
if(getBreakoutGame_by_var() > getBreakoutGame_pady_var() - getBreakoutGame_br_var() && getBreakoutGame_by_var() < getBreakoutGame_pady_var() + getBreakoutGame_br_var()) {
if(getBreakoutGame_bx_var() > getBreakoutGame_padx_var() - getBreakoutGame_padlen_var() / 2 && getBreakoutGame_bx_var() < getBreakoutGame_padx_var() + getBreakoutGame_padlen_var() / 2) {
BreakoutGame_dy_var = (int) ( -getBreakoutGame_dy_var());
BreakoutGame_by_var = (int) (2 * (getBreakoutGame_pady_var() - getBreakoutGame_br_var()) - getBreakoutGame_by_var());
BreakoutGame_dx_var = (int) (getBreakoutGame_dx_var() / 4 + (getBreakoutGame_bx_var() - getBreakoutGame_padx_var()) / 4);

}

}

}
boolean collision_var = (boolean) (collideBrick((int) (getBreakoutGame_bx_var() - getBreakoutGame_br_var()), (int) (getBreakoutGame_by_var() - getBreakoutGame_br_var())) || collideBrick((int) (getBreakoutGame_bx_var() + getBreakoutGame_br_var()), (int) (getBreakoutGame_by_var() - getBreakoutGame_br_var())) || collideBrick((int) (getBreakoutGame_bx_var() + getBreakoutGame_br_var()), (int) (getBreakoutGame_by_var() + getBreakoutGame_br_var())) || collideBrick((int) (getBreakoutGame_bx_var() - getBreakoutGame_br_var()), (int) (getBreakoutGame_by_var() + getBreakoutGame_br_var())));

if(collision_var) {
BreakoutGame_dy_var = (int) ( -getBreakoutGame_dy_var());
incrementScore((int) (10));
if(bricksLeft() == 0) {
sendNextLevel_via_game();
sendNextLevel_via_req_game();

}

}
drawBall();
drawPad();
sendUpdateIA_via_ia((int) (getBreakoutGame_bx_var()), (int) (getBreakoutGame_by_var()), (int) (getBreakoutGame_padx_var()), (int) (getBreakoutGame_pady_var()));
sendUpdate_via_display();
log((boolean) (false));
sendTimer_start_via_clock((int) (0), (int) (getBreakoutGame_period_var()));
});

Transition h1555793073 = new Transition();
h1555793073.from(state_BreakoutGame_SC_PLAY).to(state_BreakoutGame_SC_LOSTBALL);
h1555793073.event(lostBallType);
h1555793073.port(game_port);
h1555793073.action((Event e)->{
sendTimer_cancel_via_clock((int) (0));
});

Transition h1747721875 = new Transition();
h1747721875.from(state_BreakoutGame_SC_PLAY).to(state_BreakoutGame_SC_NEXTLEVEL);
h1747721875.event(nextLevelType);
h1747721875.port(game_port);
h1747721875.action((Event e)->{
sendTimer_cancel_via_clock((int) (0));
});

Transition h1220524164 = new Transition();
h1220524164.from(state_BreakoutGame_SC_PLAY).to(state_BreakoutGame_SC_LOSTBALL);
h1220524164.event(lostBallType);
h1220524164.port(pro_game_port);
h1220524164.action((Event e)->{
sendTimer_cancel_via_clock((int) (0));
});

Transition h385784873 = new Transition();
h385784873.from(state_BreakoutGame_SC_PLAY).to(state_BreakoutGame_SC_NEXTLEVEL);
h385784873.event(nextLevelType);
h385784873.port(pro_game_port);
h385784873.action((Event e)->{
sendTimer_cancel_via_clock((int) (0));
});

Transition h922992444 = new Transition();
h922992444.from(state_BreakoutGame_SC_LOSTBALL).to(state_BreakoutGame_SC_LAUNCH);
h922992444.event(timer_timeoutType);
h922992444.guard((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == 0 && getBreakoutGame_lives_var() > 0;
});

h922992444.port(clock_port);
Transition h1682157864 = new Transition();
h1682157864.from(state_BreakoutGame_SC_LOSTBALL).to(state_BreakoutGame_SC_GAMEOVER);
h1682157864.event(timer_timeoutType);
h1682157864.guard((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == 0 && getBreakoutGame_lives_var() == 0;
});

h1682157864.port(clock_port);
Transition h570422884 = new Transition();
h570422884.from(state_BreakoutGame_SC_NEXTLEVEL).to(state_BreakoutGame_SC_LAUNCH);
h570422884.event(timer_timeoutType);
h570422884.guard((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == 0;
});

h570422884.port(clock_port);
final CompositeState state_BreakoutGame_SC = new CompositeState("SC");
Handler h1677984391 = new Handler();
h1677984391.from(state_BreakoutGame_SC);
h1677984391.event(positionType);
h1677984391.port(controller_port);
h1677984391.action((Event e)->{
final PositionMessageType.PositionMessage position = (PositionMessageType.PositionMessage) e;
long center_var = (long) ((getBreakoutGame_RIGHT_var() - getBreakoutGame_LEFT_var() - getBreakoutGame_padlen_var()));

center_var = (long) (position.x * center_var);
center_var = (long) (center_var / 200);
BreakoutGame_padx_var = (int) ((getBreakoutGame_LEFT_var() + center_var + (getBreakoutGame_RIGHT_var() - getBreakoutGame_LEFT_var()) / 2));
});

state_BreakoutGame_SC.add(state_BreakoutGame_SC_INIT);
state_BreakoutGame_SC.add(state_BreakoutGame_SC_LAUNCH);
state_BreakoutGame_SC.add(state_BreakoutGame_SC_PLAY);
state_BreakoutGame_SC.add(state_BreakoutGame_SC_LOSTBALL);
state_BreakoutGame_SC.add(state_BreakoutGame_SC_NEXTLEVEL);
state_BreakoutGame_SC.add(state_BreakoutGame_SC_GAMEOVER);
state_BreakoutGame_SC.initial(state_BreakoutGame_SC_INIT);
return state_BreakoutGame_SC;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
clock_port = new Port("clock", this);
display_port = new Port("display", this);
controller_port = new Port("controller", this);
ia_port = new Port("ia", this);
game_port = new Port("game", this);
req_game_port = new Port("req_game", this);
pro_game_port = new Port("pro_game", this);
} else {
clock_port = ((BreakoutGameJava)root).clock_port;
display_port = ((BreakoutGameJava)root).display_port;
controller_port = ((BreakoutGameJava)root).controller_port;
ia_port = ((BreakoutGameJava)root).ia_port;
game_port = ((BreakoutGameJava)root).game_port;
req_game_port = ((BreakoutGameJava)root).req_game_port;
pro_game_port = ((BreakoutGameJava)root).pro_game_port;
}
if (session == null){
//Init state machine
behavior = buildBreakoutGame_SC();
}
return this;
}

 void log(final boolean BreakoutGame_log_logMem_var) {
if(getBreakoutGame_counter_var() == 0 || BreakoutGame_log_logMem_var) {
long ts_var = 0;
if(getBreakoutGame_lastTimestamp_var() == 0) {
ts_var = (long) (0);
BreakoutGame_lastTimestamp_var = (long) (timestamp());

} else {
long t_var = (long) (timestamp());

ts_var = (long) (t_var - getBreakoutGame_lastTimestamp_var());
BreakoutGame_lastTimestamp_var = (long) (t_var);

}
synchronized(System.out) {
System.out.println(""+("ts:")+(ts_var)+(",lives:")+(getBreakoutGame_lives_var())+(",score:")+(getBreakoutGame_score_var())+(",level:")+(getBreakoutGame_level_var())+(",bx:")+(getBreakoutGame_bx_var())+(",by:")+(getBreakoutGame_by_var())+(",padx:")+(getBreakoutGame_padx_var()));
}
synchronized(System.out) {
System.out.println(""+("#usedMem:")+(usedMemory()));
}

}
setBreakoutGame_counter_var((int)(getBreakoutGame_counter_var() + 1));
if(getBreakoutGame_counter_var() == 33) {
BreakoutGame_counter_var = (int) (0);

}
}
 void initColors() {
BreakoutGame_bgcolor_var[0] = (int) (53);
BreakoutGame_bgcolor_var[1] = (int) (40);
BreakoutGame_bgcolor_var[2] = (int) (120);
BreakoutGame_fgcolor_var[0] = (int) (107);
BreakoutGame_fgcolor_var[1] = (int) (94);
BreakoutGame_fgcolor_var[2] = (int) (174);
sendSetBGColor_via_display((int) (BreakoutGame_bgcolor_var[0]
), (int) (BreakoutGame_bgcolor_var[1]
), (int) (BreakoutGame_bgcolor_var[2]
));
sendSetColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
}
 void resetBall() {
BreakoutGame_bx_var = (int) (getBreakoutGame_padx_var() - getBreakoutGame_br_var() / getBreakoutGame_SCALE_var());
BreakoutGame_by_var = (int) (getBreakoutGame_pady_var() - getBreakoutGame_br_var() / getBreakoutGame_SCALE_var());
BreakoutGame_dx_var = (int) ((getBreakoutGame_padx_var() + getBreakoutGame_prevBX_var() + getBreakoutGame_prevBY_var()) % 300 - 150);
if(getBreakoutGame_dy_var() > 0) {
BreakoutGame_dy_var = (int) ( -getBreakoutGame_dy_var());

}
BreakoutGame_prevBX_var = (int) ( -1);
BreakoutGame_prevBY_var = (int) ( -1);
}
 void eraseBall() {
int bs_var = (int) ((getBreakoutGame_br_var() * 2) / getBreakoutGame_SCALE_var());

if(getBreakoutGame_prevBX_var() > 0) {
sendSetColor_via_display((int) (BreakoutGame_bgcolor_var[0]
), (int) (BreakoutGame_bgcolor_var[1]
), (int) (BreakoutGame_bgcolor_var[2]
));
sendFillRect_via_display((int) (getBreakoutGame_prevBX_var()), (int) (getBreakoutGame_prevBY_var()), (int) (bs_var), (int) (bs_var));

}
BreakoutGame_prevBX_var = (int) ( -1);
BreakoutGame_prevBY_var = (int) ( -1);
}
 void drawBall() {
int bs_var = (int) ((getBreakoutGame_br_var() * 2) / getBreakoutGame_SCALE_var());

eraseBall();
BreakoutGame_prevBX_var = (int) ((getBreakoutGame_bx_var() - getBreakoutGame_br_var()) / getBreakoutGame_SCALE_var());
BreakoutGame_prevBY_var = (int) ((getBreakoutGame_by_var() - getBreakoutGame_br_var()) / getBreakoutGame_SCALE_var());
sendSetColor_via_display((int) (183), (int) (199), (int) (111));
sendFillRect_via_display((int) (getBreakoutGame_prevBX_var()), (int) (getBreakoutGame_prevBY_var()), (int) (bs_var), (int) (bs_var));
}
 void erasePad() {
int ps_var = (int) (getBreakoutGame_padlen_var() / getBreakoutGame_SCALE_var());

if(getBreakoutGame_prevPX_var() > 0) {
sendSetColor_via_display((int) (BreakoutGame_bgcolor_var[0]
), (int) (BreakoutGame_bgcolor_var[1]
), (int) (BreakoutGame_bgcolor_var[2]
));
sendFillRect_via_display((int) (getBreakoutGame_prevPX_var()), (int) (getBreakoutGame_prevPY_var()), (int) (ps_var), (int) (4));

}
}
 void drawPad() {
int ps_var = (int) (getBreakoutGame_padlen_var() / getBreakoutGame_SCALE_var());

erasePad();
BreakoutGame_prevPX_var = (int) ((getBreakoutGame_padx_var() - (getBreakoutGame_padlen_var() / 2)) / getBreakoutGame_SCALE_var());
BreakoutGame_prevPY_var = (int) (getBreakoutGame_pady_var() / getBreakoutGame_SCALE_var());
sendSetColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
sendFillRect_via_display((int) (getBreakoutGame_prevPX_var()), (int) (getBreakoutGame_prevPY_var()), (int) (ps_var), (int) (4));
}
 void drawCountDown(final int BreakoutGame_drawCountDown_c_var) {
sendSetColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
if(BreakoutGame_drawCountDown_c_var > 0) {
sendSetColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
sendSetBGColor_via_display((int) (BreakoutGame_bgcolor_var[0]
), (int) (BreakoutGame_bgcolor_var[1]
), (int) (BreakoutGame_bgcolor_var[2]
));
sendDrawInteger_via_display((int) (80 - 6), (int) (90), (int) (BreakoutGame_drawCountDown_c_var), (int) (1), (int) (4));

} else {
sendSetColor_via_display((int) (BreakoutGame_bgcolor_var[0]
), (int) (BreakoutGame_bgcolor_var[1]
), (int) (BreakoutGame_bgcolor_var[2]
));
sendFillRect_via_display((int) (80 - 6), (int) (90), (int) (12), (int) (20));

}
}
 void drawWalls() {
sendSetColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
final int left_var = (int) ((getBreakoutGame_LEFT_var() / getBreakoutGame_SCALE_var()));

final int right_var = (int) ((getBreakoutGame_RIGHT_var() / getBreakoutGame_SCALE_var()));

final int top_var = (int) ((getBreakoutGame_TOP_var() / getBreakoutGame_SCALE_var()));

final int bottom_var = (int) ((getBreakoutGame_BOTTOM_var() / getBreakoutGame_SCALE_var()));

final int xcenter_var = (int) (((getBreakoutGame_RIGHT_var() - getBreakoutGame_LEFT_var()) / getBreakoutGame_SCALE_var()));

final int ycenter_var = (int) (((getBreakoutGame_BOTTOM_var() - getBreakoutGame_TOP_var()) / getBreakoutGame_SCALE_var()));

sendFillRect_via_display((int) (left_var - 1), (int) (top_var - 1), (int) (xcenter_var + 1), (int) (1));
sendFillRect_via_display((int) (left_var - 1), (int) (bottom_var), (int) (xcenter_var + 1), (int) (1));
sendFillRect_via_display((int) (left_var - 1), (int) (top_var), (int) (1), (int) (ycenter_var));
sendFillRect_via_display((int) (right_var), (int) (top_var), (int) (1), (int) (ycenter_var));
}
 boolean bitIsSet(final int BreakoutGame_bitIsSet_variable_var, final int BreakoutGame_bitIsSet_bit_var) {
return (boolean) ((((1 << BreakoutGame_bitIsSet_bit_var) & BreakoutGame_bitIsSet_variable_var) != 0));
}
 void createBricks() {
int y_var = (int) (0);

while(y_var < getBreakoutGame_BRICK_ROWS_var()) {
BreakoutGame_bricks_var[y_var] = (int) (0xFF);
int x_var = (int) (0);

while(x_var < 8) {
if(bitIsSet((int) (BreakoutGame_bricks_var[y_var]
), (int) (x_var))) {
drawBrick((int) (x_var), (int) (y_var));

}
x_var = (int) (x_var + 1);

}
y_var = (int) (y_var + 1);

}
}
 int bricksLeft() {
int result_var = (int) (0);

int y_var = (int) (0);

while(y_var < getBreakoutGame_BRICK_ROWS_var()) {
int x_var = (int) (0);

while(x_var < 8) {
if(bitIsSet((int) (BreakoutGame_bricks_var[y_var]
), (int) (x_var))) {
result_var = (int) (result_var + 1);

}
x_var = (int) (x_var + 1);

}
y_var = (int) (y_var + 1);

}
return (int) (result_var);
}
 void drawBrick(final int BreakoutGame_drawBrick_x_var, final int BreakoutGame_drawBrick_y_var) {
final int bx_var = (int) (((getBreakoutGame_LEFT_var() + ((getBreakoutGame_RIGHT_var() - getBreakoutGame_LEFT_var()) / 8) * BreakoutGame_drawBrick_x_var) / getBreakoutGame_SCALE_var() + 1));

final int by_var = (int) (((getBreakoutGame_TOP_var() + 20 * getBreakoutGame_SCALE_var() + getBreakoutGame_BRICK_HEIGHT_var() * BreakoutGame_drawBrick_y_var * getBreakoutGame_SCALE_var()) / getBreakoutGame_SCALE_var() + 1));

final int w_var = (int) ((((getBreakoutGame_RIGHT_var() - getBreakoutGame_LEFT_var()) / 8) / getBreakoutGame_SCALE_var() - 2));

final int h_var = (int) ((getBreakoutGame_BRICK_HEIGHT_var() - 2));

sendSetColor_via_display((int) (155), (int) (103), (int) (89));
sendFillRect_via_display((int) (bx_var), (int) (by_var), (int) (w_var), (int) (h_var));
sendSetColor_via_display((int) (100), (int) (56), (int) (43));
sendDrawRect_via_display((int) (bx_var), (int) (by_var), (int) (w_var), (int) (h_var));
}
 void removeBrick(final int BreakoutGame_removeBrick_x_var, final int BreakoutGame_removeBrick_y_var) {
final int bx_var = (int) (((getBreakoutGame_LEFT_var() + ((getBreakoutGame_RIGHT_var() - getBreakoutGame_LEFT_var()) / 8) * BreakoutGame_removeBrick_x_var) / getBreakoutGame_SCALE_var() + 1));

final int by_var = (int) (((getBreakoutGame_TOP_var() + 20 * getBreakoutGame_SCALE_var() + getBreakoutGame_BRICK_HEIGHT_var() * BreakoutGame_removeBrick_y_var * getBreakoutGame_SCALE_var()) / getBreakoutGame_SCALE_var() + 1));

sendSetColor_via_display((int) (BreakoutGame_bgcolor_var[0]
), (int) (BreakoutGame_bgcolor_var[1]
), (int) (BreakoutGame_bgcolor_var[2]
));
sendFillRect_via_display((int) (bx_var), (int) (by_var), (int) ((((getBreakoutGame_RIGHT_var() - getBreakoutGame_LEFT_var()) / 8) / getBreakoutGame_SCALE_var() - 2)), (int) (getBreakoutGame_BRICK_HEIGHT_var() - 2));
BreakoutGame_bricks_var[BreakoutGame_removeBrick_y_var] = (int) (unsetBit((int) (BreakoutGame_bricks_var[BreakoutGame_removeBrick_y_var]
), (int) (BreakoutGame_removeBrick_x_var)));
}
 boolean collideBrick(final int BreakoutGame_collideBrick_xpos_var, final int BreakoutGame_collideBrick_ypos_var) {
int bry_var = (int) ((BreakoutGame_collideBrick_ypos_var - getBreakoutGame_TOP_var() - 20 * getBreakoutGame_SCALE_var()) / (getBreakoutGame_BRICK_HEIGHT_var() * getBreakoutGame_SCALE_var()));

boolean result_var = (boolean) (false);

if(bry_var >= 0 && bry_var < getBreakoutGame_BRICK_ROWS_var()) {
int brx_var = (int) ((BreakoutGame_collideBrick_xpos_var - getBreakoutGame_LEFT_var()) / ((getBreakoutGame_RIGHT_var() - getBreakoutGame_LEFT_var()) / 8));

if(bitIsSet((int) (BreakoutGame_bricks_var[bry_var]
), (int) (brx_var))) {
removeBrick((int) (brx_var), (int) (bry_var));
result_var = (boolean) (true);

}

}
return (boolean) (result_var);
}
 void drawLevel() {
sendSetColor_via_display((int) (158), (int) (209), (int) (130));
sendSetBGColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
sendSetColor_via_display((int) (BreakoutGame_bgcolor_var[0]
), (int) (BreakoutGame_bgcolor_var[1]
), (int) (BreakoutGame_bgcolor_var[2]
));
sendDrawInteger_via_display((int) (6), (int) (2), (int) (getBreakoutGame_level_var()), (int) (2), (int) (2));
}
 void incrementScore(final int BreakoutGame_incrementScore_diff_var) {
BreakoutGame_score_var = (int) (getBreakoutGame_score_var() + BreakoutGame_incrementScore_diff_var);
if(getBreakoutGame_score_var() < 0) {
BreakoutGame_score_var = (int) (0);

}
drawScore();
}
 void drawScore() {
sendSetColor_via_display((int) (158), (int) (209), (int) (130));
sendSetBGColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
sendDrawInteger_via_display((int) (58), (int) (2), (int) (getBreakoutGame_score_var()), (int) (5), (int) (2));
}
 void drawLives() {
sendSetColor_via_display((int) (BreakoutGame_fgcolor_var[0]
), (int) (BreakoutGame_fgcolor_var[1]
), (int) (BreakoutGame_fgcolor_var[2]
));
sendFillRect_via_display((int) (124), (int) (4), (int) (24 + 6), (int) (6));
sendSetColor_via_display((int) (183), (int) (199), (int) (111));
int i_var = (int) (0);

while(i_var < getBreakoutGame_lives_var()) {
sendFillRect_via_display((int) (124 + (2 - i_var) * 12), (int) (4), (int) (6), (int) (6));
i_var = (int) (i_var + 1);

}
}
 void quit() {
System.gc();
synchronized(System.out) {
System.out.println(""+(">done in ")+(getBreakoutGame_stopTime_var() - getBreakoutGame_startTime_var())+("ms!"));
}
log((boolean) (true));
System.exit(0);
}
 long timestamp() {
return (long) (System.currentTimeMillis());
}
 long usedMemory() {
System.gc();
return (long) (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory());
}
 int unsetBit(final int BreakoutGameJava_unsetBit_variable_var, final int BreakoutGameJava_unsetBit_bit_var) {
return (int) ((BreakoutGameJava_unsetBit_variable_var & ~(1 << BreakoutGameJava_unsetBit_bit_var)));
}
}
