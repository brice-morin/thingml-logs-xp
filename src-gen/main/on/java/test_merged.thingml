thing BreakoutGameJava includes BreakoutGame @stdout_sync `true` {
	function quit() do
	`System.gc();`
		println ">done in " , stopTime - startTime , "ms!"
		log(true)
	`System.exit(0);`
	end
	function timestamp() : UInt32 return `System.currentTimeMillis()` as UInt32
	function usedMemory() : UInt32 do
	`System.gc();`
		return `Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()` as UInt32
	end
	function unsetBit(variable : UInt8, bit : UInt8) : UInt8 return (`` & variable & ` & ~(1 << ` & bit & `)`) as UInt8
}
thing fragment BreakoutGame includes TimerMsgs , DisplayMsgs , ControllerMsgs , IAControllerMsg , WithLog @stdout_sync `true` @monitor `functions` @monitor `properties` @monitor `events` {
	message lostBall()
	message nextLevel()
	required port clock {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	optional required port display @sync_send `true` {
		sends create sends fillRect sends drawRect sends clear sends setColor sends setBGColor sends drawInteger sends update sends drawThingML receives displayReady
	}
	required port controller {
		receives position
	}
	provided port ia {
		sends updateIA
	}
	internal port game {
		sends lostBall sends nextLevel receives lostBall receives nextLevel
	}
	optional required port req_game {
		sends lostBall sends nextLevel
	}
	provided port pro_game {
		receives lostBall receives nextLevel
	}
	property startTime : UInt32
	property stopTime : UInt32
	property lastTimestamp : UInt32 = 0
	property counter : UInt8 = 0
	readonly property XDISPSIZE : UInt8 = 160
	readonly property YDISPSIZE : UInt8 = 128
	readonly property SCALE : Int16 = 64
	readonly property XMAX : Int16 = XDISPSIZE as Int16 * SCALE
	readonly property YMAX : Int16 = YDISPSIZE as Int16 * SCALE
	readonly property TOP : Int16 = 14 * SCALE
	readonly property BOTTOM : Int16 = YMAX + 8 * SCALE
	readonly property LEFT : Int16 = 1 * SCALE
	readonly property RIGHT : Int16 = XMAX - 1 * SCALE
	readonly property br : Int16 = 3 * SCALE
	property bx : Int16 = XMAX / 2
	property by : Int16 = YMAX
	property dx : Int16 = XMAX / 98
	property dy : Int16 = -XMAX / 65
	property padx : Int16 = YMAX / 2
	property pady : Int16 = YMAX - 6 * SCALE
	property padlen : Int16 = 25 * SCALE
	property prevBX : Int16 = -1
	property prevBY : Int16 = -1
	property bgcolor : UInt8 [ 3 ]
	property fgcolor : UInt8 [ 3 ]
	readonly property period : UInt16 = 3
	property prevPX : Int16 = -1
	property prevPY : Int16 = -1
	readonly property BRICK_ROWS : UInt8 = 5
	readonly property BRICK_HEIGHT : UInt8 = 9
	property bricks : UInt8 [ BRICK_ROWS ]
	property score : Int16 = 0
	property lives : UInt8 = 3
	property level : UInt8 = 1
	abstract function quit()

	abstract function timestamp() : UInt32

	abstract function usedMemory() : UInt32

	function log(logMem : Boolean) do
		do
			readonly var params : String = "" + ("logMem=" + (logMem as String + ","))
			log!function_called(DEBUG_ID, "log", "void_", "", params)
		end
		if (counter == 0 or logMem) do
			var ts : UInt32
			if (lastTimestamp == 0) do
				ts = 0
				do
					readonly var old_lastTimestamp_9 : String = "" + lastTimestamp as String
					lastTimestamp = timestamp()
					readonly var new_lastTimestamp_9 : String = "" + lastTimestamp as String
					log!property_changed(DEBUG_ID, "lastTimestamp", "UInt32", old_lastTimestamp_9, new_lastTimestamp_9)
				end
			end
			else do
				var t : UInt32 = timestamp()
				ts = t - lastTimestamp
				do
					readonly var old_lastTimestamp_10 : String = "" + lastTimestamp as String
					lastTimestamp = t
					readonly var new_lastTimestamp_10 : String = "" + lastTimestamp as String
					log!property_changed(DEBUG_ID, "lastTimestamp", "UInt32", old_lastTimestamp_10, new_lastTimestamp_10)
				end
			end
			println "ts:" , ts , ",lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
			println "#usedMem:" , usedMemory()
		end
		do
			readonly var old_counter_37 : String = "" + counter as String
			counter ++
			readonly var new_counter_37 : String = "" + counter as String
			log!property_changed(DEBUG_ID, "counter", "UInt8", old_counter_37, new_counter_37)
		end
		if (counter == 33) do
			readonly var old_counter_38 : String = "" + counter as String
			counter = 0
			readonly var new_counter_38 : String = "" + counter as String
			log!property_changed(DEBUG_ID, "counter", "UInt8", old_counter_38, new_counter_38)
		end
	end
	function initColors() do
		log!function_called(DEBUG_ID, "initColors", "void_", "", "")
		bgcolor[0] = 53
		bgcolor[1] = 40
		bgcolor[2] = 120
		fgcolor[0] = 107
		fgcolor[1] = 94
		fgcolor[2] = 174
		do
			readonly var r_0 : UInt8 = bgcolor [0]
			readonly var g_1 : UInt8 = bgcolor [1]
			readonly var b_2 : UInt8 = bgcolor [2]
			display!setBGColor(r_0, g_1, b_2)
			readonly var params_3 : String = "" + ("r=" + (r_0 as String + ",")) + ("g=" + (g_1 as String + ",")) + ("b=" + (b_2 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setBGColor", params_3)
		end
		do
			readonly var r_4 : UInt8 = fgcolor [0]
			readonly var g_5 : UInt8 = fgcolor [1]
			readonly var b_6 : UInt8 = fgcolor [2]
			display!setColor(r_4, g_5, b_6)
			readonly var params_7 : String = "" + ("r=" + (r_4 as String + ",")) + ("g=" + (g_5 as String + ",")) + ("b=" + (b_6 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_7)
		end
	end
	function resetBall() do
		log!function_called(DEBUG_ID, "resetBall", "void_", "", "")
		do
			readonly var old_bx_23 : String = "" + bx as String
			bx = padx - br / SCALE
			readonly var new_bx_23 : String = "" + bx as String
			log!property_changed(DEBUG_ID, "bx", "Int16", old_bx_23, new_bx_23)
		end
		do
			readonly var old_by_2 : String = "" + by as String
			by = pady - br / SCALE
			readonly var new_by_2 : String = "" + by as String
			log!property_changed(DEBUG_ID, "by", "Int16", old_by_2, new_by_2)
		end
		do
			readonly var old_dx_15 : String = "" + dx as String
			dx = (padx + prevBX + prevBY) % 300 - 150
			readonly var new_dx_15 : String = "" + dx as String
			log!property_changed(DEBUG_ID, "dx", "Int16", old_dx_15, new_dx_15)
		end
		if (dy > 0) do
			readonly var old_dy_27 : String = "" + dy as String
			dy = -dy
			readonly var new_dy_27 : String = "" + dy as String
			log!property_changed(DEBUG_ID, "dy", "Int16", old_dy_27, new_dy_27)
		end
		do
			readonly var old_prevBX_19 : String = "" + prevBX as String
			prevBX = -1
			readonly var new_prevBX_19 : String = "" + prevBX as String
			log!property_changed(DEBUG_ID, "prevBX", "Int16", old_prevBX_19, new_prevBX_19)
		end
		do
			readonly var old_prevBY_34 : String = "" + prevBY as String
			prevBY = -1
			readonly var new_prevBY_34 : String = "" + prevBY as String
			log!property_changed(DEBUG_ID, "prevBY", "Int16", old_prevBY_34, new_prevBY_34)
		end
	end
	function eraseBall() do
		log!function_called(DEBUG_ID, "eraseBall", "void_", "", "")
		var bs : Int16 = (br * 2) / SCALE
		if (prevBX > 0) do
			do
				readonly var r_8 : UInt8 = bgcolor [0]
				readonly var g_9 : UInt8 = bgcolor [1]
				readonly var b_10 : UInt8 = bgcolor [2]
				display!setColor(r_8, g_9, b_10)
				readonly var params_11 : String = "" + ("r=" + (r_8 as String + ",")) + ("g=" + (g_9 as String + ",")) + ("b=" + (b_10 as String + ","))
				log!message_sent(DEBUG_ID, "display", "setColor", params_11)
			end
			do
				readonly var x_12 : UInt8 = prevBX as UInt8
				readonly var y_13 : UInt8 = prevBY as UInt8
				readonly var width_14 : UInt8 = bs as UInt8
				readonly var height_15 : UInt8 = bs as UInt8
				display!fillRect(x_12, y_13, width_14, height_15)
				readonly var params_16 : String = "" + ("x=" + (x_12 as String + ",")) + ("y=" + (y_13 as String + ",")) + ("width=" + (width_14 as String + ",")) + ("height=" + (height_15 as String + ","))
				log!message_sent(DEBUG_ID, "display", "fillRect", params_16)
			end
		end
		do
			readonly var old_prevBX_20 : String = "" + prevBX as String
			prevBX = -1
			readonly var new_prevBX_20 : String = "" + prevBX as String
			log!property_changed(DEBUG_ID, "prevBX", "Int16", old_prevBX_20, new_prevBX_20)
		end
		do
			readonly var old_prevBY_35 : String = "" + prevBY as String
			prevBY = -1
			readonly var new_prevBY_35 : String = "" + prevBY as String
			log!property_changed(DEBUG_ID, "prevBY", "Int16", old_prevBY_35, new_prevBY_35)
		end
	end
	function drawBall() do
		log!function_called(DEBUG_ID, "drawBall", "void_", "", "")
		var bs : Int16 = (br * 2) / SCALE
		eraseBall()
		do
			readonly var old_prevBX_21 : String = "" + prevBX as String
			prevBX = (bx - br) / SCALE
			readonly var new_prevBX_21 : String = "" + prevBX as String
			log!property_changed(DEBUG_ID, "prevBX", "Int16", old_prevBX_21, new_prevBX_21)
		end
		do
			readonly var old_prevBY_36 : String = "" + prevBY as String
			prevBY = (by - br) / SCALE
			readonly var new_prevBY_36 : String = "" + prevBY as String
			log!property_changed(DEBUG_ID, "prevBY", "Int16", old_prevBY_36, new_prevBY_36)
		end
		do
			readonly var r_17 : UInt8 = 183
			readonly var g_18 : UInt8 = 199
			readonly var b_19 : UInt8 = 111
			display!setColor(r_17, g_18, b_19)
			readonly var params_20 : String = "" + ("r=" + (r_17 as String + ",")) + ("g=" + (g_18 as String + ",")) + ("b=" + (b_19 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_20)
		end
		do
			readonly var x_21 : UInt8 = prevBX as UInt8
			readonly var y_22 : UInt8 = prevBY as UInt8
			readonly var width_23 : UInt8 = bs as UInt8
			readonly var height_24 : UInt8 = bs as UInt8
			display!fillRect(x_21, y_22, width_23, height_24)
			readonly var params_25 : String = "" + ("x=" + (x_21 as String + ",")) + ("y=" + (y_22 as String + ",")) + ("width=" + (width_23 as String + ",")) + ("height=" + (height_24 as String + ","))
			log!message_sent(DEBUG_ID, "display", "fillRect", params_25)
		end
	end
	function erasePad() do
		log!function_called(DEBUG_ID, "erasePad", "void_", "", "")
		var ps : Int16 = padlen / SCALE
		if (prevPX > 0) do
			do
				readonly var r_26 : UInt8 = bgcolor [0]
				readonly var g_27 : UInt8 = bgcolor [1]
				readonly var b_28 : UInt8 = bgcolor [2]
				display!setColor(r_26, g_27, b_28)
				readonly var params_29 : String = "" + ("r=" + (r_26 as String + ",")) + ("g=" + (g_27 as String + ",")) + ("b=" + (b_28 as String + ","))
				log!message_sent(DEBUG_ID, "display", "setColor", params_29)
			end
			do
				readonly var x_30 : UInt8 = prevPX as UInt8
				readonly var y_31 : UInt8 = prevPY as UInt8
				readonly var width_32 : UInt8 = ps as UInt8
				readonly var height_33 : UInt8 = 4
				display!fillRect(x_30, y_31, width_32, height_33)
				readonly var params_34 : String = "" + ("x=" + (x_30 as String + ",")) + ("y=" + (y_31 as String + ",")) + ("width=" + (width_32 as String + ",")) + ("height=" + (height_33 as String + ","))
				log!message_sent(DEBUG_ID, "display", "fillRect", params_34)
			end
		end
	end
	function drawPad() do
		log!function_called(DEBUG_ID, "drawPad", "void_", "", "")
		var ps : Int16 = padlen / SCALE
		erasePad()
		do
			readonly var old_prevPX_11 : String = "" + prevPX as String
			prevPX = (padx - (padlen / 2)) / SCALE
			readonly var new_prevPX_11 : String = "" + prevPX as String
			log!property_changed(DEBUG_ID, "prevPX", "Int16", old_prevPX_11, new_prevPX_11)
		end
		do
			readonly var old_prevPY_22 : String = "" + prevPY as String
			prevPY = pady / SCALE
			readonly var new_prevPY_22 : String = "" + prevPY as String
			log!property_changed(DEBUG_ID, "prevPY", "Int16", old_prevPY_22, new_prevPY_22)
		end
		do
			readonly var r_35 : UInt8 = fgcolor [0]
			readonly var g_36 : UInt8 = fgcolor [1]
			readonly var b_37 : UInt8 = fgcolor [2]
			display!setColor(r_35, g_36, b_37)
			readonly var params_38 : String = "" + ("r=" + (r_35 as String + ",")) + ("g=" + (g_36 as String + ",")) + ("b=" + (b_37 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_38)
		end
		do
			readonly var x_39 : UInt8 = prevPX as UInt8
			readonly var y_40 : UInt8 = prevPY as UInt8
			readonly var width_41 : UInt8 = ps as UInt8
			readonly var height_42 : UInt8 = 4
			display!fillRect(x_39, y_40, width_41, height_42)
			readonly var params_43 : String = "" + ("x=" + (x_39 as String + ",")) + ("y=" + (y_40 as String + ",")) + ("width=" + (width_41 as String + ",")) + ("height=" + (height_42 as String + ","))
			log!message_sent(DEBUG_ID, "display", "fillRect", params_43)
		end
	end
	function drawCountDown(c : Int16) do
		do
			readonly var params : String = "" + ("c=" + (c as String + ","))
			log!function_called(DEBUG_ID, "drawCountDown", "void_", "", params)
		end
		do
			readonly var r_44 : UInt8 = fgcolor [0]
			readonly var g_45 : UInt8 = fgcolor [1]
			readonly var b_46 : UInt8 = fgcolor [2]
			display!setColor(r_44, g_45, b_46)
			readonly var params_47 : String = "" + ("r=" + (r_44 as String + ",")) + ("g=" + (g_45 as String + ",")) + ("b=" + (b_46 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_47)
		end
		if (c > 0) do
			do
				readonly var r_48 : UInt8 = fgcolor [0]
				readonly var g_49 : UInt8 = fgcolor [1]
				readonly var b_50 : UInt8 = fgcolor [2]
				display!setColor(r_48, g_49, b_50)
				readonly var params_51 : String = "" + ("r=" + (r_48 as String + ",")) + ("g=" + (g_49 as String + ",")) + ("b=" + (b_50 as String + ","))
				log!message_sent(DEBUG_ID, "display", "setColor", params_51)
			end
			do
				readonly var r_52 : UInt8 = bgcolor [0]
				readonly var g_53 : UInt8 = bgcolor [1]
				readonly var b_54 : UInt8 = bgcolor [2]
				display!setBGColor(r_52, g_53, b_54)
				readonly var params_55 : String = "" + ("r=" + (r_52 as String + ",")) + ("g=" + (g_53 as String + ",")) + ("b=" + (b_54 as String + ","))
				log!message_sent(DEBUG_ID, "display", "setBGColor", params_55)
			end
			do
				readonly var x_56 : UInt8 = 80 - 6
				readonly var y_57 : UInt8 = 90
				readonly var v_58 : Int16 = c
				readonly var digits_59 : UInt8 = 1
				readonly var scale_60 : UInt8 = 4
				display!drawInteger(x_56, y_57, v_58, digits_59, scale_60)
				readonly var params_61 : String = "" + ("x=" + (x_56 as String + ",")) + ("y=" + (y_57 as String + ",")) + ("v=" + (v_58 as String + ",")) + ("digits=" + (digits_59 as String + ",")) + ("scale=" + (scale_60 as String + ","))
				log!message_sent(DEBUG_ID, "display", "drawInteger", params_61)
			end
		end
		else do
			do
				readonly var r_62 : UInt8 = bgcolor [0]
				readonly var g_63 : UInt8 = bgcolor [1]
				readonly var b_64 : UInt8 = bgcolor [2]
				display!setColor(r_62, g_63, b_64)
				readonly var params_65 : String = "" + ("r=" + (r_62 as String + ",")) + ("g=" + (g_63 as String + ",")) + ("b=" + (b_64 as String + ","))
				log!message_sent(DEBUG_ID, "display", "setColor", params_65)
			end
			do
				readonly var x_66 : UInt8 = 80 - 6
				readonly var y_67 : UInt8 = 90
				readonly var width_68 : UInt8 = 12
				readonly var height_69 : UInt8 = 20
				display!fillRect(x_66, y_67, width_68, height_69)
				readonly var params_70 : String = "" + ("x=" + (x_66 as String + ",")) + ("y=" + (y_67 as String + ",")) + ("width=" + (width_68 as String + ",")) + ("height=" + (height_69 as String + ","))
				log!message_sent(DEBUG_ID, "display", "fillRect", params_70)
			end
		end
	end
	function drawWalls() do
		log!function_called(DEBUG_ID, "drawWalls", "void_", "", "")
		do
			readonly var r_71 : UInt8 = fgcolor [0]
			readonly var g_72 : UInt8 = fgcolor [1]
			readonly var b_73 : UInt8 = fgcolor [2]
			display!setColor(r_71, g_72, b_73)
			readonly var params_74 : String = "" + ("r=" + (r_71 as String + ",")) + ("g=" + (g_72 as String + ",")) + ("b=" + (b_73 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_74)
		end
		readonly var left : UInt8 = (LEFT / SCALE) as UInt8
		readonly var right : UInt8 = (RIGHT / SCALE) as UInt8
		readonly var top : UInt8 = (TOP / SCALE) as UInt8
		readonly var bottom : UInt8 = (BOTTOM / SCALE) as UInt8
		readonly var xcenter : UInt8 = ((RIGHT - LEFT) / SCALE) as UInt8
		readonly var ycenter : UInt8 = ((BOTTOM - TOP) / SCALE) as UInt8
		do
			readonly var x_75 : UInt8 = left - 1
			readonly var y_76 : UInt8 = top - 1
			readonly var width_77 : UInt8 = xcenter + 1
			readonly var height_78 : UInt8 = 1
			display!fillRect(x_75, y_76, width_77, height_78)
			readonly var params_79 : String = "" + ("x=" + (x_75 as String + ",")) + ("y=" + (y_76 as String + ",")) + ("width=" + (width_77 as String + ",")) + ("height=" + (height_78 as String + ","))
			log!message_sent(DEBUG_ID, "display", "fillRect", params_79)
		end
		do
			readonly var x_80 : UInt8 = left - 1
			readonly var y_81 : UInt8 = bottom
			readonly var width_82 : UInt8 = xcenter + 1
			readonly var height_83 : UInt8 = 1
			display!fillRect(x_80, y_81, width_82, height_83)
			readonly var params_84 : String = "" + ("x=" + (x_80 as String + ",")) + ("y=" + (y_81 as String + ",")) + ("width=" + (width_82 as String + ",")) + ("height=" + (height_83 as String + ","))
			log!message_sent(DEBUG_ID, "display", "fillRect", params_84)
		end
		do
			readonly var x_85 : UInt8 = left - 1
			readonly var y_86 : UInt8 = top
			readonly var width_87 : UInt8 = 1
			readonly var height_88 : UInt8 = ycenter
			display!fillRect(x_85, y_86, width_87, height_88)
			readonly var params_89 : String = "" + ("x=" + (x_85 as String + ",")) + ("y=" + (y_86 as String + ",")) + ("width=" + (width_87 as String + ",")) + ("height=" + (height_88 as String + ","))
			log!message_sent(DEBUG_ID, "display", "fillRect", params_89)
		end
		do
			readonly var x_90 : UInt8 = right
			readonly var y_91 : UInt8 = top
			readonly var width_92 : UInt8 = 1
			readonly var height_93 : UInt8 = ycenter
			display!fillRect(x_90, y_91, width_92, height_93)
			readonly var params_94 : String = "" + ("x=" + (x_90 as String + ",")) + ("y=" + (y_91 as String + ",")) + ("width=" + (width_92 as String + ",")) + ("height=" + (height_93 as String + ","))
			log!message_sent(DEBUG_ID, "display", "fillRect", params_94)
		end
	end
	function bitIsSet(variable : UInt8, bit : UInt8) : Boolean do
		readonly var return_0 : Boolean = (`((1 << ` & bit & `) & ` & variable & `) != 0`) as Boolean
		readonly var return_as_string0 : String = "" + (return_0 as String)
		do
			readonly var params : String = "" + ("variable=" + (variable as String + ",")) + ("bit=" + (bit as String + ","))
			log!function_called(DEBUG_ID, "bitIsSet", "Boolean", return_as_string0, params)
		end
		return return_0
	end
	abstract function unsetBit(variable : UInt8, bit : UInt8) : UInt8

	function createBricks() do
		log!function_called(DEBUG_ID, "createBricks", "void_", "", "")
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			bricks[y] = 0xFF
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					drawBrick(x, y)
				end
				x = x + 1
			end
			y = y + 1
		end
	end
	function bricksLeft() : UInt8 do
		var result : UInt8 = 0
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					result = result + 1
				end
				x = x + 1
			end
			y = y + 1
		end
		readonly var return_3 : UInt8 = result
		readonly var return_as_string3 : String = "" + (return_3 as String)
		log!function_called(DEBUG_ID, "bricksLeft", "UInt8", return_as_string3, "")
		return return_3
	end
	function drawBrick(x : UInt8, y : UInt8) do
		do
			readonly var params : String = "" + ("x=" + (x as String + ",")) + ("y=" + (y as String + ","))
			log!function_called(DEBUG_ID, "drawBrick", "void_", "", params)
		end
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		readonly var w : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
		readonly var h : UInt8 = (BRICK_HEIGHT - 2) as UInt8
		do
			readonly var r_95 : UInt8 = 155
			readonly var g_96 : UInt8 = 103
			readonly var b_97 : UInt8 = 89
			display!setColor(r_95, g_96, b_97)
			readonly var params_98 : String = "" + ("r=" + (r_95 as String + ",")) + ("g=" + (g_96 as String + ",")) + ("b=" + (b_97 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_98)
		end
		do
			readonly var x_99 : UInt8 = bx
			readonly var y_100 : UInt8 = by
			readonly var width_101 : UInt8 = w
			readonly var height_102 : UInt8 = h
			display!fillRect(x_99, y_100, width_101, height_102)
			readonly var params_103 : String = "" + ("x=" + (x_99 as String + ",")) + ("y=" + (y_100 as String + ",")) + ("width=" + (width_101 as String + ",")) + ("height=" + (height_102 as String + ","))
			log!message_sent(DEBUG_ID, "display", "fillRect", params_103)
		end
		do
			readonly var r_104 : UInt8 = 100
			readonly var g_105 : UInt8 = 56
			readonly var b_106 : UInt8 = 43
			display!setColor(r_104, g_105, b_106)
			readonly var params_107 : String = "" + ("r=" + (r_104 as String + ",")) + ("g=" + (g_105 as String + ",")) + ("b=" + (b_106 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_107)
		end
		do
			readonly var x_108 : UInt8 = bx
			readonly var y_109 : UInt8 = by
			readonly var width_110 : UInt8 = w
			readonly var height_111 : UInt8 = h
			display!drawRect(x_108, y_109, width_110, height_111)
			readonly var params_112 : String = "" + ("x=" + (x_108 as String + ",")) + ("y=" + (y_109 as String + ",")) + ("width=" + (width_110 as String + ",")) + ("height=" + (height_111 as String + ","))
			log!message_sent(DEBUG_ID, "display", "drawRect", params_112)
		end
	end
	function removeBrick(x : UInt8, y : UInt8) do
		do
			readonly var params : String = "" + ("x=" + (x as String + ",")) + ("y=" + (y as String + ","))
			log!function_called(DEBUG_ID, "removeBrick", "void_", "", params)
		end
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		do
			readonly var r_113 : UInt8 = bgcolor [0]
			readonly var g_114 : UInt8 = bgcolor [1]
			readonly var b_115 : UInt8 = bgcolor [2]
			display!setColor(r_113, g_114, b_115)
			readonly var params_116 : String = "" + ("r=" + (r_113 as String + ",")) + ("g=" + (g_114 as String + ",")) + ("b=" + (b_115 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_116)
		end
		do
			readonly var x_117 : UInt8 = bx
			readonly var y_118 : UInt8 = by
			readonly var width_119 : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
			readonly var height_120 : UInt8 = BRICK_HEIGHT - 2
			display!fillRect(x_117, y_118, width_119, height_120)
			readonly var params_121 : String = "" + ("x=" + (x_117 as String + ",")) + ("y=" + (y_118 as String + ",")) + ("width=" + (width_119 as String + ",")) + ("height=" + (height_120 as String + ","))
			log!message_sent(DEBUG_ID, "display", "fillRect", params_121)
		end
		bricks[y] = unsetBit(bricks [y], x)
	end
	function collideBrick(xpos : Int16, ypos : Int16) : Boolean do
		var bry : Int16 = (ypos as Int16 - TOP - 20 * SCALE) / (BRICK_HEIGHT as Int16 * SCALE)
		var result : Boolean = false
		if (bry >= 0 and bry < BRICK_ROWS as Int16) do
			var brx : Int16 = (xpos as Int16 - LEFT) / ((RIGHT - LEFT) / 8)
			if (bitIsSet(bricks [bry], brx as UInt8)) do
				removeBrick(brx as UInt8, bry as UInt8)
				result = true
			end
		end
		readonly var return_3 : Boolean = result
		readonly var return_as_string3 : String = "" + (return_3 as String)
		do
			readonly var params : String = "" + ("xpos=" + (xpos as String + ",")) + ("ypos=" + (ypos as String + ","))
			log!function_called(DEBUG_ID, "collideBrick", "Boolean", return_as_string3, params)
		end
		return return_3
	end
	function drawLevel() do
		log!function_called(DEBUG_ID, "drawLevel", "void_", "", "")
		do
			readonly var r_122 : UInt8 = 158
			readonly var g_123 : UInt8 = 209
			readonly var b_124 : UInt8 = 130
			display!setColor(r_122, g_123, b_124)
			readonly var params_125 : String = "" + ("r=" + (r_122 as String + ",")) + ("g=" + (g_123 as String + ",")) + ("b=" + (b_124 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_125)
		end
		do
			readonly var r_126 : UInt8 = fgcolor [0]
			readonly var g_127 : UInt8 = fgcolor [1]
			readonly var b_128 : UInt8 = fgcolor [2]
			display!setBGColor(r_126, g_127, b_128)
			readonly var params_129 : String = "" + ("r=" + (r_126 as String + ",")) + ("g=" + (g_127 as String + ",")) + ("b=" + (b_128 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setBGColor", params_129)
		end
		do
			readonly var r_130 : UInt8 = bgcolor [0]
			readonly var g_131 : UInt8 = bgcolor [1]
			readonly var b_132 : UInt8 = bgcolor [2]
			display!setColor(r_130, g_131, b_132)
			readonly var params_133 : String = "" + ("r=" + (r_130 as String + ",")) + ("g=" + (g_131 as String + ",")) + ("b=" + (b_132 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_133)
		end
		do
			readonly var x_134 : UInt8 = 6
			readonly var y_135 : UInt8 = 2
			readonly var v_136 : Int16 = level as Int16
			readonly var digits_137 : UInt8 = 2
			readonly var scale_138 : UInt8 = 2
			display!drawInteger(x_134, y_135, v_136, digits_137, scale_138)
			readonly var params_139 : String = "" + ("x=" + (x_134 as String + ",")) + ("y=" + (y_135 as String + ",")) + ("v=" + (v_136 as String + ",")) + ("digits=" + (digits_137 as String + ",")) + ("scale=" + (scale_138 as String + ","))
			log!message_sent(DEBUG_ID, "display", "drawInteger", params_139)
		end
	end
	function incrementScore(diff : Int8) do
		do
			readonly var params : String = "" + ("diff=" + (diff as String + ","))
			log!function_called(DEBUG_ID, "incrementScore", "void_", "", params)
		end
		do
			readonly var old_score_0 : String = "" + score as String
			score = score + diff as Int16
			readonly var new_score_0 : String = "" + score as String
			log!property_changed(DEBUG_ID, "score", "Int16", old_score_0, new_score_0)
		end
		if (score < 0) do
			readonly var old_score_1 : String = "" + score as String
			score = 0
			readonly var new_score_1 : String = "" + score as String
			log!property_changed(DEBUG_ID, "score", "Int16", old_score_1, new_score_1)
		end
		drawScore()
	end
	function drawScore() do
		log!function_called(DEBUG_ID, "drawScore", "void_", "", "")
		do
			readonly var r_140 : UInt8 = 158
			readonly var g_141 : UInt8 = 209
			readonly var b_142 : UInt8 = 130
			display!setColor(r_140, g_141, b_142)
			readonly var params_143 : String = "" + ("r=" + (r_140 as String + ",")) + ("g=" + (g_141 as String + ",")) + ("b=" + (b_142 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_143)
		end
		do
			readonly var r_144 : UInt8 = fgcolor [0]
			readonly var g_145 : UInt8 = fgcolor [1]
			readonly var b_146 : UInt8 = fgcolor [2]
			display!setBGColor(r_144, g_145, b_146)
			readonly var params_147 : String = "" + ("r=" + (r_144 as String + ",")) + ("g=" + (g_145 as String + ",")) + ("b=" + (b_146 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setBGColor", params_147)
		end
		do
			readonly var x_148 : UInt8 = 58
			readonly var y_149 : UInt8 = 2
			readonly var v_150 : Int16 = score
			readonly var digits_151 : UInt8 = 5
			readonly var scale_152 : UInt8 = 2
			display!drawInteger(x_148, y_149, v_150, digits_151, scale_152)
			readonly var params_153 : String = "" + ("x=" + (x_148 as String + ",")) + ("y=" + (y_149 as String + ",")) + ("v=" + (v_150 as String + ",")) + ("digits=" + (digits_151 as String + ",")) + ("scale=" + (scale_152 as String + ","))
			log!message_sent(DEBUG_ID, "display", "drawInteger", params_153)
		end
	end
	function drawLives() do
		log!function_called(DEBUG_ID, "drawLives", "void_", "", "")
		do
			readonly var r_154 : UInt8 = fgcolor [0]
			readonly var g_155 : UInt8 = fgcolor [1]
			readonly var b_156 : UInt8 = fgcolor [2]
			display!setColor(r_154, g_155, b_156)
			readonly var params_157 : String = "" + ("r=" + (r_154 as String + ",")) + ("g=" + (g_155 as String + ",")) + ("b=" + (b_156 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_157)
		end
		do
			readonly var x_158 : UInt8 = 124
			readonly var y_159 : UInt8 = 4
			readonly var width_160 : UInt8 = 24 + 6
			readonly var height_161 : UInt8 = 6
			display!fillRect(x_158, y_159, width_160, height_161)
			readonly var params_162 : String = "" + ("x=" + (x_158 as String + ",")) + ("y=" + (y_159 as String + ",")) + ("width=" + (width_160 as String + ",")) + ("height=" + (height_161 as String + ","))
			log!message_sent(DEBUG_ID, "display", "fillRect", params_162)
		end
		do
			readonly var r_163 : UInt8 = 183
			readonly var g_164 : UInt8 = 199
			readonly var b_165 : UInt8 = 111
			display!setColor(r_163, g_164, b_165)
			readonly var params_166 : String = "" + ("r=" + (r_163 as String + ",")) + ("g=" + (g_164 as String + ",")) + ("b=" + (b_165 as String + ","))
			log!message_sent(DEBUG_ID, "display", "setColor", params_166)
		end
		var i : UInt8 = 0
		while (i < lives) do
			do
				readonly var x_167 : UInt8 = 124 + (2 - i) * 12
				readonly var y_168 : UInt8 = 4
				readonly var width_169 : UInt8 = 6
				readonly var height_170 : UInt8 = 6
				display!fillRect(x_167, y_168, width_169, height_170)
				readonly var params_171 : String = "" + ("x=" + (x_167 as String + ",")) + ("y=" + (y_168 as String + ",")) + ("width=" + (width_169 as String + ",")) + ("height=" + (height_170 as String + ","))
				log!message_sent(DEBUG_ID, "display", "fillRect", params_171)
			end
			i = i + 1
		end
	end
	statechart SC init INIT {
		state INIT {
			on entry do
				do
					readonly var old_startTime_7 : String = "" + startTime as String
					startTime = timestamp()
					readonly var new_startTime_7 : String = "" + startTime as String
					log!property_changed(DEBUG_ID, "startTime", "UInt32", old_startTime_7, new_startTime_7)
				end
				do
					readonly var xsize_172 : UInt8 = XDISPSIZE
					readonly var ysize_173 : UInt8 = YDISPSIZE
					display!create(xsize_172, ysize_173)
					readonly var params_174 : String = "" + ("xsize=" + (xsize_172 as String + ",")) + ("ysize=" + (ysize_173 as String + ","))
					log!message_sent(DEBUG_ID, "display", "create", params_174)
				end
			end
			transition -> LAUNCH
			event display?displayReady
			action do
				log!message_handled(DEBUG_ID, "SC.INIT", "SC.LAUNCH", "display", "displayReady", "_")
				do
					do
						display!clear()
						log!message_sent(DEBUG_ID, "display", "clear", "")
					end
					initColors()
					do
						readonly var r_175 : UInt8 = bgcolor [0]
						readonly var g_176 : UInt8 = bgcolor [1]
						readonly var b_177 : UInt8 = bgcolor [2]
						display!setColor(r_175, g_176, b_177)
						readonly var params_178 : String = "" + ("r=" + (r_175 as String + ",")) + ("g=" + (g_176 as String + ",")) + ("b=" + (b_177 as String + ","))
						log!message_sent(DEBUG_ID, "display", "setColor", params_178)
					end
					do
						readonly var x_179 : UInt8 = 0
						readonly var y_180 : UInt8 = 0
						readonly var width_181 : UInt8 = XDISPSIZE
						readonly var height_182 : UInt8 = YDISPSIZE
						display!fillRect(x_179, y_180, width_181, height_182)
						readonly var params_183 : String = "" + ("x=" + (x_179 as String + ",")) + ("y=" + (y_180 as String + ",")) + ("width=" + (width_181 as String + ",")) + ("height=" + (height_182 as String + ","))
						log!message_sent(DEBUG_ID, "display", "fillRect", params_183)
					end
					do
						readonly var r_184 : UInt8 = fgcolor [0]
						readonly var g_185 : UInt8 = fgcolor [1]
						readonly var b_186 : UInt8 = fgcolor [2]
						display!setColor(r_184, g_185, b_186)
						readonly var params_187 : String = "" + ("r=" + (r_184 as String + ",")) + ("g=" + (g_185 as String + ",")) + ("b=" + (b_186 as String + ","))
						log!message_sent(DEBUG_ID, "display", "setColor", params_187)
					end
					do
						readonly var x_188 : UInt8 = 0
						readonly var y_189 : UInt8 = 0
						readonly var width_190 : UInt8 = XDISPSIZE
						readonly var height_191 : UInt8 = 14
						display!fillRect(x_188, y_189, width_190, height_191)
						readonly var params_192 : String = "" + ("x=" + (x_188 as String + ",")) + ("y=" + (y_189 as String + ",")) + ("width=" + (width_190 as String + ",")) + ("height=" + (height_191 as String + ","))
						log!message_sent(DEBUG_ID, "display", "fillRect", params_192)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
			end
		}
		state LAUNCH {
			property countdown : UInt8
			on entry do
				do
					readonly var id_193 : UInt8 = 0
					readonly var time_194 : UInt16 = period
					clock!timer_start(id_193, time_194)
					readonly var params_195 : String = "" + ("id=" + (id_193 as String + ",")) + ("time=" + (time_194 as String + ","))
					log!message_sent(DEBUG_ID, "clock", "timer_start", params_195)
				end
				do
					readonly var old_countdown_13 : String = "" + countdown as String
					countdown = 3
					readonly var new_countdown_13 : String = "" + countdown as String
					log!property_changed(DEBUG_ID, "countdown", "UInt8", old_countdown_13, new_countdown_13)
				end
				drawScore()
				drawLives()
				do
					display!update()
					log!message_sent(DEBUG_ID, "display", "update", "")
				end
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0 and countdown > 0
			action do
				readonly var params : String = "" + ("id=" + (t.id as String + ","))
				log!message_handled(DEBUG_ID, "SC.LAUNCH", "_", "clock", "timer_timeout", params)
				do
					do
						readonly var id_196 : UInt8 = 0
						readonly var time_197 : UInt16 = period
						clock!timer_start(id_196, time_197)
						readonly var params_198 : String = "" + ("id=" + (id_196 as String + ",")) + ("time=" + (time_197 as String + ","))
						log!message_sent(DEBUG_ID, "clock", "timer_start", params_198)
					end
					drawPad()
					if ((countdown % 30) == 0) drawCountDown(countdown as Int16 / 30)
					do
						readonly var old_countdown_14 : String = "" + countdown as String
						countdown = countdown - 1
						readonly var new_countdown_14 : String = "" + countdown as String
						log!property_changed(DEBUG_ID, "countdown", "UInt8", old_countdown_14, new_countdown_14)
					end
					do
						display!update()
						log!message_sent(DEBUG_ID, "display", "update", "")
					end
				end
			end
			transition -> PLAY
			event t : clock?timer_timeout
			guard t.id == 0 and countdown == 0
			action do
				readonly var params : String = "" + ("id=" + (t.id as String + ","))
				log!message_handled(DEBUG_ID, "SC.LAUNCH", "SC.PLAY", "clock", "timer_timeout", params)
				do
					drawCountDown(0)
					resetBall()
					do
						display!update()
						log!message_sent(DEBUG_ID, "display", "update", "")
					end
				end
			end
		}
		state PLAY {
			on entry do
				do
					readonly var id_199 : UInt8 = 0
					readonly var time_200 : UInt16 = period
					clock!timer_start(id_199, time_200)
					readonly var params_201 : String = "" + ("id=" + (id_199 as String + ",")) + ("time=" + (time_200 as String + ","))
					log!message_sent(DEBUG_ID, "clock", "timer_start", params_201)
				end
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				readonly var params : String = "" + ("id=" + (t.id as String + ","))
				log!message_handled(DEBUG_ID, "SC.PLAY", "_", "clock", "timer_timeout", params)
				do
					do
						readonly var old_bx_24 : String = "" + bx as String
						bx = bx + dx
						readonly var new_bx_24 : String = "" + bx as String
						log!property_changed(DEBUG_ID, "bx", "Int16", old_bx_24, new_bx_24)
					end
					do
						readonly var old_by_3 : String = "" + by as String
						by = by + dy
						readonly var new_by_3 : String = "" + by as String
						log!property_changed(DEBUG_ID, "by", "Int16", old_by_3, new_by_3)
					end
					var wl : Int16 = LEFT + br
					var wr : Int16 = RIGHT - br
					var wt : Int16 = TOP + br
					var wb : Int16 = BOTTOM - br
					if (bx < wl) do
						do
							readonly var old_dx_16 : String = "" + dx as String
							dx = -dx
							readonly var new_dx_16 : String = "" + dx as String
							log!property_changed(DEBUG_ID, "dx", "Int16", old_dx_16, new_dx_16)
						end
						do
							readonly var old_bx_25 : String = "" + bx as String
							bx = 2 * wl - bx
							readonly var new_bx_25 : String = "" + bx as String
							log!property_changed(DEBUG_ID, "bx", "Int16", old_bx_25, new_bx_25)
						end
						incrementScore(-1)
					end
					else if (bx > wr) do
						do
							readonly var old_dx_17 : String = "" + dx as String
							dx = -dx
							readonly var new_dx_17 : String = "" + dx as String
							log!property_changed(DEBUG_ID, "dx", "Int16", old_dx_17, new_dx_17)
						end
						do
							readonly var old_bx_26 : String = "" + bx as String
							bx = 2 * wr - bx
							readonly var new_bx_26 : String = "" + bx as String
							log!property_changed(DEBUG_ID, "bx", "Int16", old_bx_26, new_bx_26)
						end
						incrementScore(-1)
					end
					if (by < wt) do
						do
							readonly var old_dy_28 : String = "" + dy as String
							dy = -dy
							readonly var new_dy_28 : String = "" + dy as String
							log!property_changed(DEBUG_ID, "dy", "Int16", old_dy_28, new_dy_28)
						end
						do
							readonly var old_by_4 : String = "" + by as String
							by = 2 * wt - by
							readonly var new_by_4 : String = "" + by as String
							log!property_changed(DEBUG_ID, "by", "Int16", old_by_4, new_by_4)
						end
						incrementScore(-1)
					end
					else if (by > wb) do
						do
							game!lostBall()
							log!message_sent(DEBUG_ID, "game", "lostBall", "")
						end
						do
							req_game!lostBall()
							log!message_sent(DEBUG_ID, "req_game", "lostBall", "")
						end
					end
					if (dy > 0) do
						if (by > pady - br and by < pady + br) do
							if (bx > padx - padlen / 2 and bx < padx + padlen / 2) do
								do
									readonly var old_dy_29 : String = "" + dy as String
									dy = -dy
									readonly var new_dy_29 : String = "" + dy as String
									log!property_changed(DEBUG_ID, "dy", "Int16", old_dy_29, new_dy_29)
								end
								do
									readonly var old_by_5 : String = "" + by as String
									by = 2 * (pady - br) - by
									readonly var new_by_5 : String = "" + by as String
									log!property_changed(DEBUG_ID, "by", "Int16", old_by_5, new_by_5)
								end
								do
									readonly var old_dx_18 : String = "" + dx as String
									dx = dx / 4 + (bx - padx) / 4
									readonly var new_dx_18 : String = "" + dx as String
									log!property_changed(DEBUG_ID, "dx", "Int16", old_dx_18, new_dx_18)
								end
							end
						end
					end
					var collision : Boolean = collideBrick(bx - br, by - br)or collideBrick(bx + br, by - br)or collideBrick(bx + br, by + br)or collideBrick(bx - br, by + br)
					if (collision) do
						do
							readonly var old_dy_30 : String = "" + dy as String
							dy = -dy
							readonly var new_dy_30 : String = "" + dy as String
							log!property_changed(DEBUG_ID, "dy", "Int16", old_dy_30, new_dy_30)
						end
						incrementScore(10)
						if (bricksLeft()== 0) do
							do
								game!nextLevel()
								log!message_sent(DEBUG_ID, "game", "nextLevel", "")
							end
							do
								req_game!nextLevel()
								log!message_sent(DEBUG_ID, "req_game", "nextLevel", "")
							end
						end
					end
					drawBall()
					drawPad()
					do
						readonly var ballx_202 : Int16 = bx
						readonly var bally_203 : Int16 = by
						readonly var padx_204 : Int16 = padx
						readonly var pady_205 : Int16 = pady
						ia!updateIA(ballx_202, bally_203, padx_204, pady_205)
						readonly var params_206 : String = "" + ("ballx=" + (ballx_202 as String + ",")) + ("bally=" + (bally_203 as String + ",")) + ("padx=" + (padx_204 as String + ",")) + ("pady=" + (pady_205 as String + ","))
						log!message_sent(DEBUG_ID, "ia", "updateIA", params_206)
					end
					do
						display!update()
						log!message_sent(DEBUG_ID, "display", "update", "")
					end
					log(false)
					do
						readonly var id_207 : UInt8 = 0
						readonly var time_208 : UInt16 = period
						clock!timer_start(id_207, time_208)
						readonly var params_209 : String = "" + ("id=" + (id_207 as String + ",")) + ("time=" + (time_208 as String + ","))
						log!message_sent(DEBUG_ID, "clock", "timer_start", params_209)
					end
				end
			end
			transition -> LOSTBALL
			event game?lostBall
			action do
				log!message_handled(DEBUG_ID, "SC.PLAY", "SC.LOSTBALL", "game", "lostBall", "_")
				do
					readonly var id_210 : UInt8 = 0
					clock!timer_cancel(id_210)
					readonly var params_211 : String = "" + ("id=" + (id_210 as String + ","))
					log!message_sent(DEBUG_ID, "clock", "timer_cancel", params_211)
				end
			end
			transition -> NEXTLEVEL
			event game?nextLevel
			action do
				log!message_handled(DEBUG_ID, "SC.PLAY", "SC.NEXTLEVEL", "game", "nextLevel", "_")
				do
					readonly var id_212 : UInt8 = 0
					clock!timer_cancel(id_212)
					readonly var params_213 : String = "" + ("id=" + (id_212 as String + ","))
					log!message_sent(DEBUG_ID, "clock", "timer_cancel", params_213)
				end
			end
			transition -> LOSTBALL
			event pro_game?lostBall
			action do
				log!message_handled(DEBUG_ID, "SC.PLAY", "SC.LOSTBALL", "pro_game", "lostBall", "_")
				do
					readonly var id_214 : UInt8 = 0
					clock!timer_cancel(id_214)
					readonly var params_215 : String = "" + ("id=" + (id_214 as String + ","))
					log!message_sent(DEBUG_ID, "clock", "timer_cancel", params_215)
				end
			end
			transition -> NEXTLEVEL
			event pro_game?nextLevel
			action do
				log!message_handled(DEBUG_ID, "SC.PLAY", "SC.NEXTLEVEL", "pro_game", "nextLevel", "_")
				do
					readonly var id_216 : UInt8 = 0
					clock!timer_cancel(id_216)
					readonly var params_217 : String = "" + ("id=" + (id_216 as String + ","))
					log!message_sent(DEBUG_ID, "clock", "timer_cancel", params_217)
				end
			end
		}
		state LOSTBALL {
			on entry do
				do
					readonly var id_218 : UInt8 = 0
					readonly var time_219 : UInt16 = period
					clock!timer_start(id_218, time_219)
					readonly var params_220 : String = "" + ("id=" + (id_218 as String + ",")) + ("time=" + (time_219 as String + ","))
					log!message_sent(DEBUG_ID, "clock", "timer_start", params_220)
				end
				do
					readonly var old_lives_12 : String = "" + lives as String
					lives = lives - 1
					readonly var new_lives_12 : String = "" + lives as String
					log!property_changed(DEBUG_ID, "lives", "UInt8", old_lives_12, new_lives_12)
				end
				eraseBall()
				erasePad()
				drawLives()
				do
					display!update()
					log!message_sent(DEBUG_ID, "display", "update", "")
				end
				log(true)
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0 and lives > 0
			action do
				readonly var params : String = "" + ("id=" + (t.id as String + ","))
				log!message_handled(DEBUG_ID, "SC.LOSTBALL", "SC.LAUNCH", "clock", "timer_timeout", params)
			end
			transition -> GAMEOVER
			event t : clock?timer_timeout
			guard t.id == 0 and lives == 0
			action do
				readonly var params : String = "" + ("id=" + (t.id as String + ","))
				log!message_handled(DEBUG_ID, "SC.LOSTBALL", "SC.GAMEOVER", "clock", "timer_timeout", params)
			end
		}
		state NEXTLEVEL {
			on entry do
				do
					readonly var id_221 : UInt8 = 0
					readonly var time_222 : UInt16 = period
					clock!timer_start(id_221, time_222)
					readonly var params_223 : String = "" + ("id=" + (id_221 as String + ",")) + ("time=" + (time_222 as String + ","))
					log!message_sent(DEBUG_ID, "clock", "timer_start", params_223)
				end
				do
					readonly var old_level_8 : String = "" + level as String
					level = level + 1
					readonly var new_level_8 : String = "" + level as String
					log!property_changed(DEBUG_ID, "level", "UInt8", old_level_8, new_level_8)
				end
				drawLevel()
				eraseBall()
				erasePad()
				if ((level % 2) == 0 and padlen > 5 * SCALE) do
					readonly var old_padlen_6 : String = "" + padlen as String
					padlen = padlen - (4 * SCALE)
					readonly var new_padlen_6 : String = "" + padlen as String
					log!property_changed(DEBUG_ID, "padlen", "Int16", old_padlen_6, new_padlen_6)
				end
				if ((level % 2) == 1) do
					readonly var old_dy_31 : String = "" + dy as String
					dy = (dy * 3) / 2
					readonly var new_dy_31 : String = "" + dy as String
					log!property_changed(DEBUG_ID, "dy", "Int16", old_dy_31, new_dy_31)
				end
				drawLives()
				createBricks()
				do
					display!update()
					log!message_sent(DEBUG_ID, "display", "update", "")
				end
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				readonly var params : String = "" + ("id=" + (t.id as String + ","))
				log!message_handled(DEBUG_ID, "SC.NEXTLEVEL", "SC.LAUNCH", "clock", "timer_timeout", params)
			end
		}
		final state GAMEOVER {
			on entry do
				eraseBall()
				erasePad()
				do
					readonly var r_224 : UInt8 = 255
					readonly var g_225 : UInt8 = 255
					readonly var b_226 : UInt8 = 255
					display!setColor(r_224, g_225, b_226)
					readonly var params_227 : String = "" + ("r=" + (r_224 as String + ",")) + ("g=" + (g_225 as String + ",")) + ("b=" + (b_226 as String + ","))
					log!message_sent(DEBUG_ID, "display", "setColor", params_227)
				end
				do
					readonly var x_228 : UInt8 = 8
					readonly var y_229 : UInt8 = 30
					readonly var width_230 : UInt8 = 142
					readonly var height_231 : UInt8 = 76
					display!fillRect(x_228, y_229, width_230, height_231)
					readonly var params_232 : String = "" + ("x=" + (x_228 as String + ",")) + ("y=" + (y_229 as String + ",")) + ("width=" + (width_230 as String + ",")) + ("height=" + (height_231 as String + ","))
					log!message_sent(DEBUG_ID, "display", "fillRect", params_232)
				end
				do
					readonly var r_233 : UInt8 = fgcolor [0]
					readonly var g_234 : UInt8 = fgcolor [1]
					readonly var b_235 : UInt8 = fgcolor [2]
					display!setColor(r_233, g_234, b_235)
					readonly var params_236 : String = "" + ("r=" + (r_233 as String + ",")) + ("g=" + (g_234 as String + ",")) + ("b=" + (b_235 as String + ","))
					log!message_sent(DEBUG_ID, "display", "setColor", params_236)
				end
				do
					readonly var x_237 : UInt8 = 9
					readonly var y_238 : UInt8 = 31
					readonly var width_239 : UInt8 = 140
					readonly var height_240 : UInt8 = 50
					display!fillRect(x_237, y_238, width_239, height_240)
					readonly var params_241 : String = "" + ("x=" + (x_237 as String + ",")) + ("y=" + (y_238 as String + ",")) + ("width=" + (width_239 as String + ",")) + ("height=" + (height_240 as String + ","))
					log!message_sent(DEBUG_ID, "display", "fillRect", params_241)
				end
				do
					readonly var r_242 : UInt8 = fgcolor [0]
					readonly var g_243 : UInt8 = fgcolor [1]
					readonly var b_244 : UInt8 = fgcolor [2]
					display!setBGColor(r_242, g_243, b_244)
					readonly var params_245 : String = "" + ("r=" + (r_242 as String + ",")) + ("g=" + (g_243 as String + ",")) + ("b=" + (b_244 as String + ","))
					log!message_sent(DEBUG_ID, "display", "setBGColor", params_245)
				end
				do
					readonly var r_246 : UInt8 = 158
					readonly var g_247 : UInt8 = 209
					readonly var b_248 : UInt8 = 130
					display!setColor(r_246, g_247, b_248)
					readonly var params_249 : String = "" + ("r=" + (r_246 as String + ",")) + ("g=" + (g_247 as String + ",")) + ("b=" + (b_248 as String + ","))
					log!message_sent(DEBUG_ID, "display", "setColor", params_249)
				end
				do
					readonly var x_250 : UInt8 = 23
					readonly var y_251 : UInt8 = 40
					readonly var v_252 : Int16 = score
					readonly var digits_253 : UInt8 = 5
					readonly var scale_254 : UInt8 = 6
					display!drawInteger(x_250, y_251, v_252, digits_253, scale_254)
					readonly var params_255 : String = "" + ("x=" + (x_250 as String + ",")) + ("y=" + (y_251 as String + ",")) + ("v=" + (v_252 as String + ",")) + ("digits=" + (digits_253 as String + ",")) + ("scale=" + (scale_254 as String + ","))
					log!message_sent(DEBUG_ID, "display", "drawInteger", params_255)
				end
				do
					readonly var x_256 : UInt8 = 26
					readonly var y_257 : UInt8 = 87
					display!drawThingML(x_256, y_257)
					readonly var params_258 : String = "" + ("x=" + (x_256 as String + ",")) + ("y=" + (y_257 as String + ","))
					log!message_sent(DEBUG_ID, "display", "drawThingML", params_258)
				end
				do
					display!update()
					log!message_sent(DEBUG_ID, "display", "update", "")
				end
				log(true)
				do
					readonly var old_stopTime_33 : String = "" + stopTime as String
					stopTime = timestamp()
					readonly var new_stopTime_33 : String = "" + stopTime as String
					log!property_changed(DEBUG_ID, "stopTime", "UInt32", old_stopTime_33, new_stopTime_33)
				end
				quit()
			end
		}
		internal
		event e : controller?position
		action do
			readonly var params : String = "" + ("x=" + (e.x as String + ",")) + ("y=" + (e.y as String + ","))
			log!message_handled(DEBUG_ID, "SC", "_", "controller", "position", params)
			do
				var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
				center = e.x as Int32 * center
				center = center / 200
				do
					readonly var old_padx_32 : String = "" + padx as String
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
					readonly var new_padx_32 : String = "" + padx as String
					log!property_changed(DEBUG_ID, "padx", "Int16", old_padx_32, new_padx_32)
				end
			end
		end
		internal
		event e : clock?timer_timeout
		guard true
		action do
			readonly var params : String = "" + ("id=" + (e.id as String + ","))
			log!message_lost(DEBUG_ID, "clock", "timer_timeout", params)
		end
		internal
		event e : display?displayReady
		guard true
		action do
			log!message_lost(DEBUG_ID, "display", "displayReady", "")
		end
		internal
		event e : game?lostBall
		guard true
		action do
			log!message_lost(DEBUG_ID, "game", "lostBall", "")
		end
		internal
		event e : game?nextLevel
		guard true
		action do
			log!message_lost(DEBUG_ID, "game", "nextLevel", "")
		end
		internal
		event e : pro_game?lostBall
		guard true
		action do
			log!message_lost(DEBUG_ID, "pro_game", "lostBall", "")
		end
		internal
		event e : pro_game?nextLevel
		guard true
		action do
			log!message_lost(DEBUG_ID, "pro_game", "nextLevel", "")
		end
	}
}
thing fragment LogMsgs {
	message log_on()
	message log_off()
	message function_called(inst : String, fn_name : String, ty : String, returns : String, params : String)
	message property_changed(inst : String, prop_name : String, ty : String, old_value : String, new_value : String)
	message message_sent(inst : String, port_name : String, msg_name : String, params : String)
	message message_lost(inst : String, port_name : String, msg_name : String, params : String)
	message message_handled(inst : String, source : String, target : String, port_name : String, msg_name : String, params : String)
}
thing fragment WithLog includes LogMsgs {
	required port log @sync_send `true` {
		sends function_called sends property_changed sends message_lost sends message_handled sends message_sent
	}
	readonly property DEBUG_ID : String
}
thing fragment Logger includes LogMsgs {
	provided port log {
		receives function_called receives property_changed receives message_lost receives message_handled receives message_sent receives log_on receives log_off
	}
	readonly property ACTIVATE_ON_STARTUP : Boolean
	abstract function log_function_called(inst : String, fn_name : String, ty : String, returns : String, params : String)

	abstract function log_property_changed(inst : String, prop_name : String, ty : String, old : String, new : String)

	abstract function log_message_lost(inst : String, port_name : String, msg_name : String, params : String)

	abstract function log_message_sent(inst : String, port_name : String, msg_name : String, params : String)

	abstract function log_message_handled(inst : String, source : String, target : String, port_name : String, msg_name : String, params : String)

	statechart init STARTUP {
		state STARTUP {
			transition -> ON guard ACTIVATE_ON_STARTUP
			transition -> OFF guard not ACTIVATE_ON_STARTUP
		}
		state ON {
			internal
			event d : log?function_called
			action log_function_called(d.inst, d.fn_name, d.ty, d.returns, d.params)
			internal
			event d : log?property_changed
			action log_property_changed(d.inst, d.prop_name, d.ty, d.old_value, d.new_value)
			internal
			event d : log?message_lost
			action log_message_lost(d.inst, d.port_name, d.msg_name, d.params)
			internal
			event d : log?message_sent
			action log_message_sent(d.inst, d.port_name, d.msg_name, d.params)
			internal
			event d : log?message_handled
			action log_message_handled(d.inst, d.source, d.target, d.port_name, d.msg_name, d.params)
			transition -> OFF
			event log?log_off
		}
		state OFF {
			transition -> ON
			event log?log_on
		}
	}
}
thing ConsoleLogger includes Logger @stdout_sync `true` {
	function log_function_called(inst : String, fn_name : String, ty : String, returns : String, params : String) println "log: function_called(" , inst , ", " , fn_name , ", " , ty , ", " , returns , ", " , params , ")"
	function log_property_changed(inst : String, prop_name : String, ty : String, old : String, new : String) println "log: property_changed(" , inst , ", " , prop_name , ", " , ty , ", " , old , ", " , new , ")"
	function log_message_lost(inst : String, port_name : String, msg_name : String, params : String) println "log: message_lost(" , inst , ", " , port_name , ", " , msg_name , ", " , params , ")"
	function log_message_sent(inst : String, port_name : String, msg_name : String, params : String) println "log: message_sent(" , inst , ", " , port_name , ", " , msg_name , ", " , params , ")"
	function log_message_handled(inst : String, source : String, target : String, port_name : String, msg_name : String, params : String) println "log: message_handled(" , inst , ", " , source , ", " , target , ", " , port_name , ", " , msg_name , ", " , params , ")"
}
thing fragment DisplayMsgs {
	message clear()
	message setColor(r : UInt8, g : UInt8, b : UInt8)
	message setBGColor(r : UInt8, g : UInt8, b : UInt8)
	message drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	message fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	message drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8)
	message drawThingML(x : UInt8, y : UInt8)
	message create(xsize : UInt8, ysize : UInt8)
	message destroy()
	message update()
	message displayReady()
}
thing HeadlessDisplay includes DisplayMsgs @stdout_sync `true` {
	provided port display {
		sends displayReady receives create receives destroy receives update receives clear receives setColor receives setBGColor receives drawRect receives fillRect receives drawInteger receives drawThingML
	}
	function mock() do
	end
	statechart init INIT {
		state INIT {
			on entry display!displayReady()
			transition -> MOCK
		}
		state MOCK {
			internal
			event display?create
			action mock()
			internal
			event display?destroy
			action mock()
			internal
			event display?update
			action mock()
			internal
			event display?clear
			action mock()
			internal
			event display?setColor
			action mock()
			internal
			event display?setBGColor
			action mock()
			internal
			event display?drawRect
			action mock()
			internal
			event display?fillRect
			action mock()
			internal
			event display?drawInteger
			action mock()
			internal
			event display?drawThingML
			action mock()
		}
	}
}
thing fragment ControllerMsgs {
	message velocity(dx : Int16, dy : Int16)
	message position(x : Int16, y : Int16)
}
thing fragment Controller includes ControllerMsgs {
	provided port controls {
		sends position
	}
}
thing fragment IAControllerMsg {
	message updateIA(ballx : Int16, bally : Int16, padx : Int16, pady : Int16)
}
thing fragment IAController includes Controller , IAControllerMsg {
	required port game {
		receives updateIA
	}
}
thing BasicIAController includes IAController @stdout_sync `true` {
	property ctrlx : Int16 = 0
	statechart SC init Following {
		state Following {
			on entry controls!position(ctrlx, 0)
			transition -> Following
			event e : game?updateIA
			action do
				if (e.ballx > e.padx + 400) ctrlx = ctrlx + 4
				else if (e.ballx < e.padx - 400) ctrlx = ctrlx - 4
				if (ctrlx < -100) ctrlx = -100
				else if (ctrlx > 100) ctrlx = 100
			end
		}
	}
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
object String
	@serializable
	@c_type `char *`
	@java_type `String`
	@js_type `String`
	@go_type `string`
enumeration DigitalState as UInt8 {
	LOW = 0
	HIGH = 1
}
thing fragment TimerMsgs @stl {
	message timer_start(id : UInt8, time : UInt16)
	message timer_cancel(id : UInt8)
	message timer_timeout(id : UInt8)
}
thing fragment TimerClientPort includes TimerMsgs @stl {
	required port timer {
		sends timer_start sends timer_cancel receives timer_timeout
	}
}
thing fragment Timer includes TimerMsgs @stl {
	provided port timer {
		sends timer_timeout receives timer_start receives timer_cancel
	}
}
thing TimerJava includes Timer @stl @java_import `import java.util.*;` @java_features `
	Hashtable<Integer, TimerTask> tasks = new Hashtable<Integer, TimerTask>();
	Timer timer = new java.util.Timer();` {
	function startTimer(id : UInt8, delay : UInt16) do
		cancel(id)
		`final int t_id = ` & id & `;`
	`TimerTask t =  new TimerTask() { public void run(){`
		timer!timer_timeout(`t_id` as UInt8)
		`
        } };
        tasks.put(t_id, t);
        timer.schedule(t, ` & delay & `);`
	end
	function cancel(id : UInt8) do
		`TimerTask t = tasks.get(` & id & `);`
	`if (t != null) t.cancel();`
	`timer.purge();`
	end
	statechart SoftTimer init default {
		state default {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object JSArray
thing TimerJS includes Timer @stl {
	property Timeouts : JSArray = `{}` as JSArray
	function startTimer(id : UInt8, delay : UInt16) do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = setTimeout(() => {
        `
		timer!timer_timeout(id)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          clearTimeout(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default {
		state default {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object DriftLess
thing TimerNodeJS includes Timer @stl @js_dep `driftless:2.0.3` {
	property Timeouts : JSArray = `{}` as JSArray
	readonly property driftless : DriftLess = `require('driftless')` as DriftLess
	function startTimer(id : UInt8, delay : UInt16) do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = ` & driftless & `.setDriftlessTimeout(() => {
        `
		timer!timer_timeout(id)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          ` & driftless & `.clearDriftless(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default {
		state default {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
thing TimerPosix includes Timer @stl @c_header `
#include <time.h>
#include <unistd.h>
#include <pthread.h>

#define NB_SOFT_TIMERS 16
` @c_global `uint32_t Timer_timeouts[NB_SOFT_TIMERS];
uint8_t  Timer_wraps[NB_SOFT_TIMERS];
uint32_t Timer_prev;
pthread_mutex_t Timer_mut;` {
	readonly property NB_SOFT_TIMERS : UInt16 = `NB_SOFT_TIMERS` as UInt16
	readonly property SOFT_TIMER_PERIOD : UInt16 = 4
	function time_ms() : UInt32 do
	`struct timespec current;
		int res;
		uint32_t millis = 0;
		
		res = clock_gettime(CLOCK_MONOTONIC, &current);
		if (res != 0) {
			  perror("[ERROR]: Could not get current time : ");
		 } else {
			  millis  =  current.tv_sec * 1000;
			  millis += current.tv_nsec / 1000000;
		}`
		return `millis` as UInt32
	end
	function sleep_ms(timeout_ms : UInt16) do
		`struct timeval tv;
        tv.tv_sec = ` & timeout_ms & `/1000;
        tv.tv_usec = (` & timeout_ms & `%1000) * 1000;
        select(0, NULL, NULL, NULL, &tv);`
	end
	function start_soft_timer_process() @fork_linux_thread `true` do
		`pthread_mutex_init(&Timer_mut, NULL);
	    uint8_t i;
	    for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	        Timer_timeouts[i] = 0;
	        Timer_wraps[i] = 0;
	    }
	    Timer_prev = ` & time_ms()& `;`
		while (true) do
			sleep_ms(SOFT_TIMER_PERIOD)
			`pthread_mutex_lock(&Timer_mut);
	        uint32_t current = ` & time_ms()& `;
	        uint8_t i;
	        for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	            if (Timer_timeouts[i] > 0) {
	                if (current >= Timer_prev) {
	                    // Normal time progression
	                    if (current > Timer_timeouts[i] && Timer_wraps[i] == 0) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                        Timer_wraps[i] = 0;
	                    }
	                } else {
	                    // A wraparound has occurred
	                    if (Timer_wraps[i] == 0) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                    } else {
	                        Timer_wraps[i] = 0;
	                        if (current > Timer_timeouts[i]) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                        }
	                    }
	                }
	            }
	        }
	        Timer_prev = current;
	        pthread_mutex_unlock(&Timer_mut);`
		end
	end
	function startTimer(id : UInt8, delay : UInt16) do
		`
    	if (` & id & ` < NB_SOFT_TIMERS) {
	        uint32_t current = ` & time_ms()& `;
	        uint32_t timeout = current + ` & delay & `;
	        if (timeout == 0) timeout = 1;
	
	        pthread_mutex_lock(&Timer_mut);
	        Timer_timeouts[` & id & `] = timeout;
	        Timer_wraps[` & id & `] = (timeout > current) ? 0 : 1;
	        pthread_mutex_unlock(&Timer_mut);
	    }
    `
	end
	function cancel(id : UInt8) do
		`
        if (` & id & ` < NB_SOFT_TIMERS) {
	        pthread_mutex_lock(&Timer_mut);
	        Timer_timeouts[` & id & `] = 0;
	        Timer_wraps[` & id & `] = 0;
	        pthread_mutex_unlock(&Timer_mut);
	    }
      `
	end
	statechart SoftTimer init default {
		on entry start_soft_timer_process()
		state default {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
thing TimerArduino includes Timer @stl @c_header `
#define NB_SOFT_TIMERS 16
` @c_global `uint32_t Timer_timeouts[NB_SOFT_TIMERS];
uint8_t  Timer_wraps[NB_SOFT_TIMERS];
uint32_t Timer_prev;` {
	readonly property NB_SOFT_TIMERS : UInt16 = `NB_SOFT_TIMERS` as UInt16
	function time_ms() : UInt32 do
		return `millis()` as UInt32
	end
	function init_arrays() do
		`uint8_t i;
	    for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	        Timer_timeouts[i] = 0;
	        Timer_wraps[i] = 0;
	    }
	    Timer_prev = ` & time_ms()& `;`
	end
	function poll_soft_timers() @scheduler_polling `true` do
		`uint32_t current = ` & time_ms()& `;
		uint8_t i;
		for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
		    if (Timer_timeouts[i] > 0) {
		        if (current >= Timer_prev) {
		            // Normal time progression
		            if (current > Timer_timeouts[i] && Timer_wraps[i] == 0) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		                Timer_wraps[i] = 0;
		            }
		        } else {
		            // A wraparound has occurred
		            if (Timer_wraps[i] == 0) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		            } else {
		                Timer_wraps[i] = 0;
		                if (current > Timer_timeouts[i]) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		                }
		            }
		        }
		    }
		}`
	end
	function startTimer(id : UInt8, delay : UInt16) do
		`
    	if (` & id & ` < NB_SOFT_TIMERS) {
	        uint32_t current = ` & time_ms()& `;
	        uint32_t timeout = current + ` & delay & `;
	        if (timeout == 0) timeout = 1;
	
	        Timer_timeouts[` & id & `] = timeout;
	        Timer_wraps[` & id & `] = (timeout > current) ? 0 : 1;
	    }
    `
	end
	function cancel(id : UInt8) do
		`
        if (` & id & ` < NB_SOFT_TIMERS) {
	        Timer_timeouts[` & id & `] = 0;
	        Timer_wraps[` & id & `] = 0;
	    }
      `
	end
	statechart SoftTimer init default {
		on entry init_arrays()
		state default {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object TimerMap @go_type `map[uint8]*time.Timer`
thing TimerGo includes TimerMsgs @stl @go_import `time` {
	provided port timer {
		sends timer_timeout receives timer_start receives timer_cancel
	}
	property Timers : TimerMap
	function initialize() do
		Timers = `make(map[uint8]*time.Timer)` as TimerMap
	end
	function startTimer(id : UInt8, delay : UInt16) do
		cancel(id)
		`
    	` & Timers & `[` & id & `] = time.AfterFunc(time.Millisecond*time.Duration(` & delay & `), func() {
    		`
		timer!timer_timeout(id)
	`
    	})
    `
	end
	function cancel(id : UInt8) do
		`
    	if t, ok := ` & Timers & `[` & id & `]; ok {
    		t.Stop()
    		delete(` & Timers & `, ` & id & `)
    	}
    `
	end
	statechart SoftTimer init default {
		on entry initialize()
		state default {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
configuration test @docker {
	instance game : BreakoutGameJava
	instance disp : HeadlessDisplay
	instance timer : TimerJava
	instance ctrl : BasicIAController
	instance log : ConsoleLogger
	connector game.clock => timer . timer
	connector game.display => disp . display
	connector game.controller => ctrl . controls
	connector ctrl.game => game . ia
	connector game.log => log . log
	set game.period = 3
	set game.DEBUG_ID = "game"
	set log.ACTIVATE_ON_STARTUP = true
}
