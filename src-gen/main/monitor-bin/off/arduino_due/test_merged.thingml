thing Binary2StringLogger includes Logger {
	function get_byte(b : Byte) : Byte do
		if (HAS_SIGNED_BYTE) return (`` & b & ` & 0xFF`) as Byte
		else return b as Byte
	end
	function do_log(payload : Byte [ ], size : UInt8) do
		readonly var log_type : Byte = get_byte(payload [0])
		readonly var inst : Byte = get_byte(payload [1])
		if (log_type == LogType : function_called) do
			readonly var func_ : Byte = get_byte(payload [2])
			if (inst == 0) do
				if (func_ == 1) do
					println "function_called(BreakoutGame0, initColors, void" , ", _" , ")"
				end
				else if (func_ == 2) do
					println "function_called(BreakoutGame0, resetBall, void" , ", _" , ")"
				end
				else if (func_ == 3) do
					println "function_called(BreakoutGame0, eraseBall, void" , ", _" , ")"
				end
				else if (func_ == 4) do
					println "function_called(BreakoutGame0, drawBall, void" , ", _" , ")"
				end
				else if (func_ == 5) do
					println "function_called(BreakoutGame0, erasePad, void" , ", _" , ")"
				end
				else if (func_ == 6) do
					println "function_called(BreakoutGame0, drawPad, void" , ", _" , ")"
				end
				else if (func_ == 7) do
					println "function_called(BreakoutGame0, drawCountDown, void" , ", _" , ", c=" , ((`` & get_byte(payload [2])& ` << 8 | ` & get_byte(payload [3])& ` << 0`) as Int16) , ")"
				end
				else if (func_ == 8) do
					println "function_called(BreakoutGame0, drawWalls, void" , ", _" , ")"
				end
				else if (func_ == 9) do
					println "function_called(BreakoutGame0, bitIsSet, Boolean" , ", " , ((`` & get_byte(payload [4])& ` << 0`) as Integer != 0) , ", variable=" , ((`` & get_byte(payload [2])& ` << 0`) as UInt8) , ", bit=" , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ")"
				end
				else if (func_ == 10) do
					println "function_called(BreakoutGame0, createBricks, void" , ", _" , ")"
				end
				else if (func_ == 11) do
					println "function_called(BreakoutGame0, bricksLeft, UInt8" , ", " , ((`` & get_byte(payload [2])& ` << 0`) as UInt8) , ")"
				end
				else if (func_ == 12) do
					println "function_called(BreakoutGame0, drawBrick, void" , ", _" , ", x=" , ((`` & get_byte(payload [2])& ` << 0`) as UInt8) , ", y=" , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ")"
				end
				else if (func_ == 13) do
					println "function_called(BreakoutGame0, removeBrick, void" , ", _" , ", x=" , ((`` & get_byte(payload [2])& ` << 0`) as UInt8) , ", y=" , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ")"
				end
				else if (func_ == 14) do
					println "function_called(BreakoutGame0, collideBrick, Boolean" , ", " , ((`` & get_byte(payload [6])& ` << 0`) as Integer != 0) , ", xpos=" , ((`` & get_byte(payload [2])& ` << 8 | ` & get_byte(payload [3])& ` << 0`) as Int16) , ", ypos=" , ((`` & get_byte(payload [4])& ` << 8 | ` & get_byte(payload [5])& ` << 0`) as Int16) , ")"
				end
				else if (func_ == 15) do
					println "function_called(BreakoutGame0, drawLevel, void" , ", _" , ")"
				end
				else if (func_ == 16) do
					println "function_called(BreakoutGame0, incrementScore, void" , ", _" , ", diff=" , ((`` & get_byte(payload [2])& ` << 0`) as Int8) , ")"
				end
				else if (func_ == 17) do
					println "function_called(BreakoutGame0, drawScore, void" , ", _" , ")"
				end
				else if (func_ == 18) do
					println "function_called(BreakoutGame0, drawLives, void" , ", _" , ")"
				end
			end
		end
		else if (log_type == LogType : property_changed) do
			readonly var prop : Byte = get_byte(payload [2])
			if (inst == 0) do
				if (prop == 1) do
					println "property_changed(BreakoutGame0, XDISPSIZE, UInt8" , ", " , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ", " , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (prop == 2) do
					println "property_changed(BreakoutGame0, YDISPSIZE, UInt8" , ", " , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ", " , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (prop == 3) do
					println "property_changed(BreakoutGame0, SCALE, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 4) do
					println "property_changed(BreakoutGame0, XMAX, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 5) do
					println "property_changed(BreakoutGame0, YMAX, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 6) do
					println "property_changed(BreakoutGame0, TOP, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 7) do
					println "property_changed(BreakoutGame0, BOTTOM, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 8) do
					println "property_changed(BreakoutGame0, LEFT, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 9) do
					println "property_changed(BreakoutGame0, RIGHT, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 10) do
					println "property_changed(BreakoutGame0, br, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 11) do
					println "property_changed(BreakoutGame0, bx, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 12) do
					println "property_changed(BreakoutGame0, by, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 13) do
					println "property_changed(BreakoutGame0, dx, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 14) do
					println "property_changed(BreakoutGame0, dy, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 15) do
					println "property_changed(BreakoutGame0, padx, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 16) do
					println "property_changed(BreakoutGame0, pady, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 17) do
					println "property_changed(BreakoutGame0, padlen, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 18) do
					println "property_changed(BreakoutGame0, prevBX, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 19) do
					println "property_changed(BreakoutGame0, prevBY, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 20) do
					println "property_changed(BreakoutGame0, bgcolor, UInt8" , ", " , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ", " , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (prop == 21) do
					println "property_changed(BreakoutGame0, fgcolor, UInt8" , ", " , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ", " , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (prop == 22) do
					println "property_changed(BreakoutGame0, period, UInt16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as UInt16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as UInt16) , ")"
				end
				else if (prop == 23) do
					println "property_changed(BreakoutGame0, prevPX, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 24) do
					println "property_changed(BreakoutGame0, prevPY, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 25) do
					println "property_changed(BreakoutGame0, BRICK_ROWS, UInt8" , ", " , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ", " , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (prop == 26) do
					println "property_changed(BreakoutGame0, BRICK_HEIGHT, UInt8" , ", " , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ", " , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (prop == 27) do
					println "property_changed(BreakoutGame0, bricks, UInt8" , ", " , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ", " , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (prop == 28) do
					println "property_changed(BreakoutGame0, score, Int16" , ", " , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", " , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (prop == 29) do
					println "property_changed(BreakoutGame0, lives, UInt8" , ", " , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ", " , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (prop == 30) do
					println "property_changed(BreakoutGame0, level, UInt8" , ", " , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ", " , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
			end
		end
		else if (log_type == LogType : message_lost) do
			readonly var portID : Byte = get_byte(payload [2])
			readonly var messageID : Byte = get_byte(payload [3])
			if (inst == 0) do
				if (portID == 0 and messageID == 21) do
					println "message_lost(BreakoutGame0, clock, timer_timeout" , ", id=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (portID == 1 and messageID == 15) do
					println "message_lost(BreakoutGame0, display, displayReady" , ")"
				end
				else if (portID == 2 and messageID == 17) do
					println "message_lost(BreakoutGame0, controller, position" , ", x=" , ((`` & get_byte(payload [4])& ` << 8 | ` & get_byte(payload [5])& ` << 0`) as Int16) , ", y=" , ((`` & get_byte(payload [6])& ` << 8 | ` & get_byte(payload [7])& ` << 0`) as Int16) , ")"
				end
				else if (portID == 4 and messageID == 0) do
					println "message_lost(BreakoutGame0, game, lostBall" , ")"
				end
				else if (portID == 6 and messageID == 0) do
					println "message_lost(BreakoutGame0, pro_game, lostBall" , ")"
				end
				else if (portID == 4 and messageID == 1) do
					println "message_lost(BreakoutGame0, game, nextLevel" , ")"
				end
				else if (portID == 6 and messageID == 1) do
					println "message_lost(BreakoutGame0, pro_game, nextLevel" , ")"
				end
			end
		end
		else if (log_type == LogType : message_sent) do
			readonly var portID : Byte = get_byte(payload [2])
			readonly var messageID : Byte = get_byte(payload [3])
			if (inst == 0) do
				if (portID == 0 and messageID == 19) do
					println "message_sent(BreakoutGame0, clock, timer_start" , ", id=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ", time=" , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as UInt16) , ")"
				end
				else if (portID == 0 and messageID == 20) do
					println "message_sent(BreakoutGame0, clock, timer_cancel" , ", id=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ")"
				end
				else if (portID == 1 and messageID == 5) do
					println "message_sent(BreakoutGame0, display, clear" , ")"
				end
				else if (portID == 1 and messageID == 6) do
					println "message_sent(BreakoutGame0, display, setColor" , ", r=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ", g=" , ((`` & get_byte(payload [5])& ` << 0`) as UInt8) , ", b=" , ((`` & get_byte(payload [6])& ` << 0`) as UInt8) , ")"
				end
				else if (portID == 1 and messageID == 7) do
					println "message_sent(BreakoutGame0, display, setBGColor" , ", r=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ", g=" , ((`` & get_byte(payload [5])& ` << 0`) as UInt8) , ", b=" , ((`` & get_byte(payload [6])& ` << 0`) as UInt8) , ")"
				end
				else if (portID == 1 and messageID == 8) do
					println "message_sent(BreakoutGame0, display, drawRect" , ", x=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ", y=" , ((`` & get_byte(payload [5])& ` << 0`) as UInt8) , ", width=" , ((`` & get_byte(payload [6])& ` << 0`) as UInt8) , ", height=" , ((`` & get_byte(payload [7])& ` << 0`) as UInt8) , ")"
				end
				else if (portID == 1 and messageID == 9) do
					println "message_sent(BreakoutGame0, display, fillRect" , ", x=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ", y=" , ((`` & get_byte(payload [5])& ` << 0`) as UInt8) , ", width=" , ((`` & get_byte(payload [6])& ` << 0`) as UInt8) , ", height=" , ((`` & get_byte(payload [7])& ` << 0`) as UInt8) , ")"
				end
				else if (portID == 1 and messageID == 10) do
					println "message_sent(BreakoutGame0, display, drawInteger" , ", x=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ", y=" , ((`` & get_byte(payload [5])& ` << 0`) as UInt8) , ", v=" , ((`` & get_byte(payload [6])& ` << 8 | ` & get_byte(payload [7])& ` << 0`) as Int16) , ", digits=" , ((`` & get_byte(payload [8])& ` << 0`) as UInt8) , ", scale=" , ((`` & get_byte(payload [9])& ` << 0`) as UInt8) , ")"
				end
				else if (portID == 1 and messageID == 11) do
					println "message_sent(BreakoutGame0, display, drawThingML" , ", x=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ", y=" , ((`` & get_byte(payload [5])& ` << 0`) as UInt8) , ")"
				end
				else if (portID == 1 and messageID == 12) do
					println "message_sent(BreakoutGame0, display, create" , ", xsize=" , ((`` & get_byte(payload [4])& ` << 0`) as UInt8) , ", ysize=" , ((`` & get_byte(payload [5])& ` << 0`) as UInt8) , ")"
				end
				else if (portID == 1 and messageID == 14) do
					println "message_sent(BreakoutGame0, display, update" , ")"
				end
				else if (portID == 3 and messageID == 18) do
					println "message_sent(BreakoutGame0, ia, updateIA" , ", ballx=" , ((`` & get_byte(payload [4])& ` << 8 | ` & get_byte(payload [5])& ` << 0`) as Int16) , ", bally=" , ((`` & get_byte(payload [6])& ` << 8 | ` & get_byte(payload [7])& ` << 0`) as Int16) , ", padx=" , ((`` & get_byte(payload [8])& ` << 8 | ` & get_byte(payload [9])& ` << 0`) as Int16) , ", pady=" , ((`` & get_byte(payload [10])& ` << 8 | ` & get_byte(payload [11])& ` << 0`) as Int16) , ")"
				end
				else if (portID == 4 and messageID == 0) do
					println "message_sent(BreakoutGame0, game, lostBall" , ")"
				end
				else if (portID == 5 and messageID == 0) do
					println "message_sent(BreakoutGame0, req_game, lostBall" , ")"
				end
				else if (portID == 4 and messageID == 1) do
					println "message_sent(BreakoutGame0, game, nextLevel" , ")"
				end
				else if (portID == 5 and messageID == 1) do
					println "message_sent(BreakoutGame0, req_game, nextLevel" , ")"
				end
			end
		end
		else if (log_type == LogType : message_handled) do
			readonly var handlerID : Byte = get_byte(payload [2])
			if (inst == 0) do
				if (handlerID == 0) do
					println "message_handled(BreakoutGame0, controller, position, SC, _, " , ", x=" , ((`` & get_byte(payload [3])& ` << 8 | ` & get_byte(payload [4])& ` << 0`) as Int16) , ", y=" , ((`` & get_byte(payload [5])& ` << 8 | ` & get_byte(payload [6])& ` << 0`) as Int16) , ")"
				end
				else if (handlerID == 1) do
					println "message_handled(BreakoutGame0, display, displayReady, INIT, LAUNCH, " , ")"
				end
				else if (handlerID == 2) do
					println "message_handled(BreakoutGame0, clock, timer_timeout, LAUNCH, _, " , ", id=" , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ")"
				end
				else if (handlerID == 3) do
					println "message_handled(BreakoutGame0, clock, timer_timeout, LAUNCH, PLAY, " , ", id=" , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ")"
				end
				else if (handlerID == 4) do
					println "message_handled(BreakoutGame0, clock, timer_timeout, PLAY, _, " , ", id=" , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ")"
				end
				else if (handlerID == 5) do
					println "message_handled(BreakoutGame0, game, lostBall, PLAY, LOSTBALL, " , ")"
				end
				else if (handlerID == 6) do
					println "message_handled(BreakoutGame0, game, nextLevel, PLAY, NEXTLEVEL, " , ")"
				end
				else if (handlerID == 7) do
					println "message_handled(BreakoutGame0, pro_game, lostBall, PLAY, LOSTBALL, " , ")"
				end
				else if (handlerID == 8) do
					println "message_handled(BreakoutGame0, pro_game, nextLevel, PLAY, NEXTLEVEL, " , ")"
				end
				else if (handlerID == 9) do
					println "message_handled(BreakoutGame0, clock, timer_timeout, LOSTBALL, LAUNCH, " , ", id=" , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ")"
				end
				else if (handlerID == 10) do
					println "message_handled(BreakoutGame0, clock, timer_timeout, LOSTBALL, GAMEOVER, " , ", id=" , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ")"
				end
				else if (handlerID == 11) do
					println "message_handled(BreakoutGame0, clock, timer_timeout, NEXTLEVEL, LAUNCH, " , ", id=" , ((`` & get_byte(payload [3])& ` << 0`) as UInt8) , ")"
				end
			end
		end
		else println "unknown"
	end
}
thing BreakoutGameArduino includes BreakoutGame @c_global `extern "C" char* sbrk(int incr);` {
	readonly property RAM_SIZE : UInt32 = 98304 @id `0`
	function quit() @monitor `not` do
		println ">done in " , stopTime - startTime , "ms!"
		println ">lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
		println ">usedMem:" , usedMemory()
	end
	function timestamp() : UInt32 @monitor `not` do
		return `millis()` as UInt32
	end
	function usedMemory() : UInt32 @monitor `not` do
	`char top;`
		return RAM_SIZE - `(&top - reinterpret_cast<char*>(sbrk(0)))` as UInt32
	end
	function unsetBit(variable : UInt8, bit : UInt8) : UInt8 @id `0` return (`` & variable & ` & ~(1 << ` & bit & `)`) as UInt8
}
thing fragment BreakoutGame includes TimerMsgs , DisplayMsgs , ControllerMsgs , IAControllerMsg , WithBinaryLog @monitor `functions` @monitor `properties` @monitor `events` @id `0` {
	message lostBall()
	@id `0`
	message nextLevel()
	@id `1`
	required port clock @id `0` {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	optional required port display @sync_send `true` @id `1` {
		sends create sends fillRect sends drawRect sends clear sends setColor sends setBGColor sends drawInteger sends update sends drawThingML receives displayReady
	}
	required port controller @id `2` {
		receives position
	}
	provided port ia @id `3` {
		sends updateIA
	}
	internal port game @id `4` {
		sends lostBall sends nextLevel receives lostBall receives nextLevel
	}
	optional required port req_game @id `5` {
		sends lostBall sends nextLevel
	}
	provided port pro_game @id `6` {
		receives lostBall receives nextLevel
	}
	readonly property QUIET : Boolean = true @monitor `not`
	property startTime : UInt32 @monitor `not`
	property stopTime : UInt32 @monitor `not`
	property lastTimestamp : UInt32 = 0 @monitor `not`
	property counter : UInt8 = 0 @monitor `not`
	readonly property XDISPSIZE : UInt8 = 160 @id `1`
	readonly property YDISPSIZE : UInt8 = 128 @id `2`
	readonly property SCALE : Int16 = 64 @id `3`
	readonly property XMAX : Int16 = XDISPSIZE as Int16 * SCALE @id `4`
	readonly property YMAX : Int16 = YDISPSIZE as Int16 * SCALE @id `5`
	readonly property TOP : Int16 = 14 * SCALE @id `6`
	readonly property BOTTOM : Int16 = YMAX + 8 * SCALE @id `7`
	readonly property LEFT : Int16 = 1 * SCALE @id `8`
	readonly property RIGHT : Int16 = XMAX - 1 * SCALE @id `9`
	readonly property br : Int16 = 3 * SCALE @id `10`
	property bx : Int16 = XMAX / 2 @id `11`
	property by : Int16 = YMAX @id `12`
	property dx : Int16 = XMAX / 98 @id `13`
	property dy : Int16 = -XMAX / 65 @id `14`
	property padx : Int16 = YMAX / 2 @id `15`
	property pady : Int16 = YMAX - 6 * SCALE @id `16`
	property padlen : Int16 = 25 * SCALE @id `17`
	property prevBX : Int16 = -1 @id `18`
	property prevBY : Int16 = -1 @id `19`
	property bgcolor : UInt8 [ 3 ] @id `20`
	property fgcolor : UInt8 [ 3 ] @id `21`
	readonly property period : UInt16 = 3 @id `22`
	property prevPX : Int16 = -1 @id `23`
	property prevPY : Int16 = -1 @id `24`
	readonly property BRICK_ROWS : UInt8 = 5 @id `25`
	readonly property BRICK_HEIGHT : UInt8 = 9 @id `26`
	property bricks : UInt8 [ BRICK_ROWS ] @id `27`
	property score : Int16 = 0 @id `28`
	property lives : UInt8 = 3 @id `29`
	property level : UInt8 = 1 @id `30`
	abstract function quit() @monitor `not`

	abstract function timestamp() : UInt32 @monitor `not`

	abstract function usedMemory() : UInt32 @monitor `not`

	function log(logMem : Boolean) @monitor `not` do
		if (counter == 0 or logMem) do
			var ts : UInt32
			if (lastTimestamp == 0) do
				ts = 0
				lastTimestamp = timestamp()
			end
			else do
				var t : UInt32 = timestamp()
				ts = t - lastTimestamp
				lastTimestamp = t
			end
			if (not QUIET) do
				println "ts:" , ts , ",lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
				println "#usedMem:" , usedMemory()
			end
		end
		counter ++
		if (counter == 33) counter = 0
	end
	function initColors() @id `1` do
		bgcolor[0] = 53
		bgcolor[1] = 40
		bgcolor[2] = 120
		fgcolor[0] = 107
		fgcolor[1] = 94
		fgcolor[2] = 174
		do
			readonly var r_289 : UInt8 = bgcolor [0]
			readonly var g_290 : UInt8 = bgcolor [1]
			readonly var b_291 : UInt8 = bgcolor [2]
			display!setBGColor(r_289, g_290, b_291)
			readonly var setBGColorsent_log_292 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x07 , r_289 as Byte , g_290 as Byte , b_291 as Byte }
			log!log(setBGColorsent_log_292, 7)
		end
		do
			readonly var r_293 : UInt8 = fgcolor [0]
			readonly var g_294 : UInt8 = fgcolor [1]
			readonly var b_295 : UInt8 = fgcolor [2]
			display!setColor(r_293, g_294, b_295)
			readonly var setColorsent_log_296 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_293 as Byte , g_294 as Byte , b_295 as Byte }
			log!log(setColorsent_log_296, 7)
		end
		readonly var initColors_log0 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x01 }
		log!log(initColors_log0, 3)
	end
	function resetBall() @id `2` do
		do
			readonly var old_bx_7 : Int16 = bx
			bx = padx - br / SCALE
			readonly var bx_log_7 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0B , (`((` & old_bx_7 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_bx_7 & ` >> 0) & 0xFF)`) as Byte , (`((` & bx & ` >> 8) & 0xFF)`) as Byte , (`((` & bx & ` >> 0) & 0xFF)`) as Byte }
			log!log(bx_log_7, 7)
		end
		do
			readonly var old_by_29 : Int16 = by
			by = pady - br / SCALE
			readonly var by_log_29 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0C , (`((` & old_by_29 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_by_29 & ` >> 0) & 0xFF)`) as Byte , (`((` & by & ` >> 8) & 0xFF)`) as Byte , (`((` & by & ` >> 0) & 0xFF)`) as Byte }
			log!log(by_log_29, 7)
		end
		do
			readonly var old_dx_20 : Int16 = dx
			dx = (padx + prevBX + prevBY) % 300 - 150
			readonly var dx_log_20 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0D , (`((` & old_dx_20 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_dx_20 & ` >> 0) & 0xFF)`) as Byte , (`((` & dx & ` >> 8) & 0xFF)`) as Byte , (`((` & dx & ` >> 0) & 0xFF)`) as Byte }
			log!log(dx_log_20, 7)
		end
		if (dy > 0) do
			readonly var old_dy_13 : Int16 = dy
			dy = -dy
			readonly var dy_log_13 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0E , (`((` & old_dy_13 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_dy_13 & ` >> 0) & 0xFF)`) as Byte , (`((` & dy & ` >> 8) & 0xFF)`) as Byte , (`((` & dy & ` >> 0) & 0xFF)`) as Byte }
			log!log(dy_log_13, 7)
		end
		do
			readonly var old_prevBX_25 : Int16 = prevBX
			prevBX = -1
			readonly var prevBX_log_25 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x12 , (`((` & old_prevBX_25 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_prevBX_25 & ` >> 0) & 0xFF)`) as Byte , (`((` & prevBX & ` >> 8) & 0xFF)`) as Byte , (`((` & prevBX & ` >> 0) & 0xFF)`) as Byte }
			log!log(prevBX_log_25, 7)
		end
		do
			readonly var old_prevBY_1 : Int16 = prevBY
			prevBY = -1
			readonly var prevBY_log_1 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x13 , (`((` & old_prevBY_1 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_prevBY_1 & ` >> 0) & 0xFF)`) as Byte , (`((` & prevBY & ` >> 8) & 0xFF)`) as Byte , (`((` & prevBY & ` >> 0) & 0xFF)`) as Byte }
			log!log(prevBY_log_1, 7)
		end
		readonly var resetBall_log1 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x02 }
		log!log(resetBall_log1, 3)
	end
	function eraseBall() @id `3` do
		var bs : Int16 = (br * 2) / SCALE
		if (prevBX > 0) do
			do
				readonly var r_297 : UInt8 = bgcolor [0]
				readonly var g_298 : UInt8 = bgcolor [1]
				readonly var b_299 : UInt8 = bgcolor [2]
				display!setColor(r_297, g_298, b_299)
				readonly var setColorsent_log_300 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_297 as Byte , g_298 as Byte , b_299 as Byte }
				log!log(setColorsent_log_300, 7)
			end
			do
				readonly var x_301 : UInt8 = prevBX as UInt8
				readonly var y_302 : UInt8 = prevBY as UInt8
				readonly var width_303 : UInt8 = bs as UInt8
				readonly var height_304 : UInt8 = bs as UInt8
				display!fillRect(x_301, y_302, width_303, height_304)
				readonly var fillRectsent_log_305 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_301 as Byte , y_302 as Byte , width_303 as Byte , height_304 as Byte }
				log!log(fillRectsent_log_305, 8)
			end
		end
		do
			readonly var old_prevBX_26 : Int16 = prevBX
			prevBX = -1
			readonly var prevBX_log_26 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x12 , (`((` & old_prevBX_26 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_prevBX_26 & ` >> 0) & 0xFF)`) as Byte , (`((` & prevBX & ` >> 8) & 0xFF)`) as Byte , (`((` & prevBX & ` >> 0) & 0xFF)`) as Byte }
			log!log(prevBX_log_26, 7)
		end
		do
			readonly var old_prevBY_2 : Int16 = prevBY
			prevBY = -1
			readonly var prevBY_log_2 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x13 , (`((` & old_prevBY_2 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_prevBY_2 & ` >> 0) & 0xFF)`) as Byte , (`((` & prevBY & ` >> 8) & 0xFF)`) as Byte , (`((` & prevBY & ` >> 0) & 0xFF)`) as Byte }
			log!log(prevBY_log_2, 7)
		end
		readonly var eraseBall_log2 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x03 }
		log!log(eraseBall_log2, 3)
	end
	function drawBall() @id `4` do
		var bs : Int16 = (br * 2) / SCALE
		eraseBall()
		do
			readonly var old_prevBX_27 : Int16 = prevBX
			prevBX = (bx - br) / SCALE
			readonly var prevBX_log_27 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x12 , (`((` & old_prevBX_27 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_prevBX_27 & ` >> 0) & 0xFF)`) as Byte , (`((` & prevBX & ` >> 8) & 0xFF)`) as Byte , (`((` & prevBX & ` >> 0) & 0xFF)`) as Byte }
			log!log(prevBX_log_27, 7)
		end
		do
			readonly var old_prevBY_3 : Int16 = prevBY
			prevBY = (by - br) / SCALE
			readonly var prevBY_log_3 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x13 , (`((` & old_prevBY_3 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_prevBY_3 & ` >> 0) & 0xFF)`) as Byte , (`((` & prevBY & ` >> 8) & 0xFF)`) as Byte , (`((` & prevBY & ` >> 0) & 0xFF)`) as Byte }
			log!log(prevBY_log_3, 7)
		end
		do
			readonly var r_306 : UInt8 = 183
			readonly var g_307 : UInt8 = 199
			readonly var b_308 : UInt8 = 111
			display!setColor(r_306, g_307, b_308)
			readonly var setColorsent_log_309 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_306 as Byte , g_307 as Byte , b_308 as Byte }
			log!log(setColorsent_log_309, 7)
		end
		do
			readonly var x_310 : UInt8 = prevBX as UInt8
			readonly var y_311 : UInt8 = prevBY as UInt8
			readonly var width_312 : UInt8 = bs as UInt8
			readonly var height_313 : UInt8 = bs as UInt8
			display!fillRect(x_310, y_311, width_312, height_313)
			readonly var fillRectsent_log_314 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_310 as Byte , y_311 as Byte , width_312 as Byte , height_313 as Byte }
			log!log(fillRectsent_log_314, 8)
		end
		readonly var drawBall_log3 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x04 }
		log!log(drawBall_log3, 3)
	end
	function erasePad() @id `5` do
		var ps : Int16 = padlen / SCALE
		if (prevPX > 0) do
			do
				readonly var r_315 : UInt8 = bgcolor [0]
				readonly var g_316 : UInt8 = bgcolor [1]
				readonly var b_317 : UInt8 = bgcolor [2]
				display!setColor(r_315, g_316, b_317)
				readonly var setColorsent_log_318 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_315 as Byte , g_316 as Byte , b_317 as Byte }
				log!log(setColorsent_log_318, 7)
			end
			do
				readonly var x_319 : UInt8 = prevPX as UInt8
				readonly var y_320 : UInt8 = prevPY as UInt8
				readonly var width_321 : UInt8 = ps as UInt8
				readonly var height_322 : UInt8 = 4
				display!fillRect(x_319, y_320, width_321, height_322)
				readonly var fillRectsent_log_323 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_319 as Byte , y_320 as Byte , width_321 as Byte , height_322 as Byte }
				log!log(fillRectsent_log_323, 8)
			end
		end
		readonly var erasePad_log4 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x05 }
		log!log(erasePad_log4, 3)
	end
	function drawPad() @id `6` do
		var ps : Int16 = padlen / SCALE
		erasePad()
		do
			readonly var old_prevPX_19 : Int16 = prevPX
			prevPX = (padx - (padlen / 2)) / SCALE
			readonly var prevPX_log_19 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x17 , (`((` & old_prevPX_19 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_prevPX_19 & ` >> 0) & 0xFF)`) as Byte , (`((` & prevPX & ` >> 8) & 0xFF)`) as Byte , (`((` & prevPX & ` >> 0) & 0xFF)`) as Byte }
			log!log(prevPX_log_19, 7)
		end
		do
			readonly var old_prevPY_18 : Int16 = prevPY
			prevPY = pady / SCALE
			readonly var prevPY_log_18 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x18 , (`((` & old_prevPY_18 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_prevPY_18 & ` >> 0) & 0xFF)`) as Byte , (`((` & prevPY & ` >> 8) & 0xFF)`) as Byte , (`((` & prevPY & ` >> 0) & 0xFF)`) as Byte }
			log!log(prevPY_log_18, 7)
		end
		do
			readonly var r_324 : UInt8 = fgcolor [0]
			readonly var g_325 : UInt8 = fgcolor [1]
			readonly var b_326 : UInt8 = fgcolor [2]
			display!setColor(r_324, g_325, b_326)
			readonly var setColorsent_log_327 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_324 as Byte , g_325 as Byte , b_326 as Byte }
			log!log(setColorsent_log_327, 7)
		end
		do
			readonly var x_328 : UInt8 = prevPX as UInt8
			readonly var y_329 : UInt8 = prevPY as UInt8
			readonly var width_330 : UInt8 = ps as UInt8
			readonly var height_331 : UInt8 = 4
			display!fillRect(x_328, y_329, width_330, height_331)
			readonly var fillRectsent_log_332 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_328 as Byte , y_329 as Byte , width_330 as Byte , height_331 as Byte }
			log!log(fillRectsent_log_332, 8)
		end
		readonly var drawPad_log5 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x06 }
		log!log(drawPad_log5, 3)
	end
	function drawCountDown(c : Int16) @id `7` do
		do
			readonly var r_333 : UInt8 = fgcolor [0]
			readonly var g_334 : UInt8 = fgcolor [1]
			readonly var b_335 : UInt8 = fgcolor [2]
			display!setColor(r_333, g_334, b_335)
			readonly var setColorsent_log_336 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_333 as Byte , g_334 as Byte , b_335 as Byte }
			log!log(setColorsent_log_336, 7)
		end
		if (c > 0) do
			do
				readonly var r_337 : UInt8 = fgcolor [0]
				readonly var g_338 : UInt8 = fgcolor [1]
				readonly var b_339 : UInt8 = fgcolor [2]
				display!setColor(r_337, g_338, b_339)
				readonly var setColorsent_log_340 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_337 as Byte , g_338 as Byte , b_339 as Byte }
				log!log(setColorsent_log_340, 7)
			end
			do
				readonly var r_341 : UInt8 = bgcolor [0]
				readonly var g_342 : UInt8 = bgcolor [1]
				readonly var b_343 : UInt8 = bgcolor [2]
				display!setBGColor(r_341, g_342, b_343)
				readonly var setBGColorsent_log_344 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x07 , r_341 as Byte , g_342 as Byte , b_343 as Byte }
				log!log(setBGColorsent_log_344, 7)
			end
			do
				readonly var x_345 : UInt8 = 80 - 6
				readonly var y_346 : UInt8 = 90
				readonly var v_347 : Int16 = c
				readonly var digits_348 : UInt8 = 1
				readonly var scale_349 : UInt8 = 4
				display!drawInteger(x_345, y_346, v_347, digits_348, scale_349)
				readonly var drawIntegersent_log_350 : Byte [ 10 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0A , x_345 as Byte , y_346 as Byte , (`((` & v_347 & ` >> 8) & 0xFF)`) as Byte , (`((` & v_347 & ` >> 0) & 0xFF)`) as Byte , digits_348 as Byte , scale_349 as Byte }
				log!log(drawIntegersent_log_350, 10)
			end
		end
		else do
			do
				readonly var r_351 : UInt8 = bgcolor [0]
				readonly var g_352 : UInt8 = bgcolor [1]
				readonly var b_353 : UInt8 = bgcolor [2]
				display!setColor(r_351, g_352, b_353)
				readonly var setColorsent_log_354 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_351 as Byte , g_352 as Byte , b_353 as Byte }
				log!log(setColorsent_log_354, 7)
			end
			do
				readonly var x_355 : UInt8 = 80 - 6
				readonly var y_356 : UInt8 = 90
				readonly var width_357 : UInt8 = 12
				readonly var height_358 : UInt8 = 20
				display!fillRect(x_355, y_356, width_357, height_358)
				readonly var fillRectsent_log_359 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_355 as Byte , y_356 as Byte , width_357 as Byte , height_358 as Byte }
				log!log(fillRectsent_log_359, 8)
			end
		end
		readonly var drawCountDown_log6 : Byte [ 5 ] = { LogType : function_called , DEBUG_BIN_ID , 0x07 , (`((` & c & ` >> 8) & 0xFF)`) as Byte , (`((` & c & ` >> 0) & 0xFF)`) as Byte }
		log!log(drawCountDown_log6, 5)
	end
	function drawWalls() @id `8` do
		do
			readonly var r_360 : UInt8 = fgcolor [0]
			readonly var g_361 : UInt8 = fgcolor [1]
			readonly var b_362 : UInt8 = fgcolor [2]
			display!setColor(r_360, g_361, b_362)
			readonly var setColorsent_log_363 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_360 as Byte , g_361 as Byte , b_362 as Byte }
			log!log(setColorsent_log_363, 7)
		end
		readonly var left : UInt8 = (LEFT / SCALE) as UInt8
		readonly var right : UInt8 = (RIGHT / SCALE) as UInt8
		readonly var top : UInt8 = (TOP / SCALE) as UInt8
		readonly var bottom : UInt8 = (BOTTOM / SCALE) as UInt8
		readonly var xcenter : UInt8 = ((RIGHT - LEFT) / SCALE) as UInt8
		readonly var ycenter : UInt8 = ((BOTTOM - TOP) / SCALE) as UInt8
		do
			readonly var x_364 : UInt8 = left - 1
			readonly var y_365 : UInt8 = top - 1
			readonly var width_366 : UInt8 = xcenter + 1
			readonly var height_367 : UInt8 = 1
			display!fillRect(x_364, y_365, width_366, height_367)
			readonly var fillRectsent_log_368 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_364 as Byte , y_365 as Byte , width_366 as Byte , height_367 as Byte }
			log!log(fillRectsent_log_368, 8)
		end
		do
			readonly var x_369 : UInt8 = left - 1
			readonly var y_370 : UInt8 = bottom
			readonly var width_371 : UInt8 = xcenter + 1
			readonly var height_372 : UInt8 = 1
			display!fillRect(x_369, y_370, width_371, height_372)
			readonly var fillRectsent_log_373 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_369 as Byte , y_370 as Byte , width_371 as Byte , height_372 as Byte }
			log!log(fillRectsent_log_373, 8)
		end
		do
			readonly var x_374 : UInt8 = left - 1
			readonly var y_375 : UInt8 = top
			readonly var width_376 : UInt8 = 1
			readonly var height_377 : UInt8 = ycenter
			display!fillRect(x_374, y_375, width_376, height_377)
			readonly var fillRectsent_log_378 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_374 as Byte , y_375 as Byte , width_376 as Byte , height_377 as Byte }
			log!log(fillRectsent_log_378, 8)
		end
		do
			readonly var x_379 : UInt8 = right
			readonly var y_380 : UInt8 = top
			readonly var width_381 : UInt8 = 1
			readonly var height_382 : UInt8 = ycenter
			display!fillRect(x_379, y_380, width_381, height_382)
			readonly var fillRectsent_log_383 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_379 as Byte , y_380 as Byte , width_381 as Byte , height_382 as Byte }
			log!log(fillRectsent_log_383, 8)
		end
		readonly var drawWalls_log7 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x08 }
		log!log(drawWalls_log7, 3)
	end
	function bitIsSet(variable : UInt8, bit : UInt8) : Boolean @id `9` do
		readonly var return_0 : Boolean = (`((1 << ` & bit & `) & ` & variable & `) != 0`) as Boolean
		readonly var bitIsSet_log8 : Byte [ 6 ] = { LogType : function_called , DEBUG_BIN_ID , 0x09 , variable as Byte , bit as Byte , return_0 as Byte }
		log!log(bitIsSet_log8, 6)
		return return_0
	end
	abstract function unsetBit(variable : UInt8, bit : UInt8) : UInt8

	function createBricks() @id `10` do
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			bricks[y] = 0xFF
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					drawBrick(x, y)
				end
				x = x + 1
			end
			y = y + 1
		end
		readonly var createBricks_log9 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x0A }
		log!log(createBricks_log9, 3)
	end
	function bricksLeft() : UInt8 @id `11` do
		var result : UInt8 = 0
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					result = result + 1
				end
				x = x + 1
			end
			y = y + 1
		end
		readonly var return_3 : UInt8 = result
		readonly var bricksLeft_log10 : Byte [ 4 ] = { LogType : function_called , DEBUG_BIN_ID , 0x0B , return_3 as Byte }
		log!log(bricksLeft_log10, 4)
		return return_3
	end
	function drawBrick(x : UInt8, y : UInt8) @id `12` do
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		readonly var w : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
		readonly var h : UInt8 = (BRICK_HEIGHT - 2) as UInt8
		do
			readonly var r_384 : UInt8 = 155
			readonly var g_385 : UInt8 = 103
			readonly var b_386 : UInt8 = 89
			display!setColor(r_384, g_385, b_386)
			readonly var setColorsent_log_387 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_384 as Byte , g_385 as Byte , b_386 as Byte }
			log!log(setColorsent_log_387, 7)
		end
		do
			readonly var x_388 : UInt8 = bx
			readonly var y_389 : UInt8 = by
			readonly var width_390 : UInt8 = w
			readonly var height_391 : UInt8 = h
			display!fillRect(x_388, y_389, width_390, height_391)
			readonly var fillRectsent_log_392 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_388 as Byte , y_389 as Byte , width_390 as Byte , height_391 as Byte }
			log!log(fillRectsent_log_392, 8)
		end
		do
			readonly var r_393 : UInt8 = 100
			readonly var g_394 : UInt8 = 56
			readonly var b_395 : UInt8 = 43
			display!setColor(r_393, g_394, b_395)
			readonly var setColorsent_log_396 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_393 as Byte , g_394 as Byte , b_395 as Byte }
			log!log(setColorsent_log_396, 7)
		end
		do
			readonly var x_397 : UInt8 = bx
			readonly var y_398 : UInt8 = by
			readonly var width_399 : UInt8 = w
			readonly var height_400 : UInt8 = h
			display!drawRect(x_397, y_398, width_399, height_400)
			readonly var drawRectsent_log_401 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x08 , x_397 as Byte , y_398 as Byte , width_399 as Byte , height_400 as Byte }
			log!log(drawRectsent_log_401, 8)
		end
		readonly var drawBrick_log11 : Byte [ 5 ] = { LogType : function_called , DEBUG_BIN_ID , 0x0C , x as Byte , y as Byte }
		log!log(drawBrick_log11, 5)
	end
	function removeBrick(x : UInt8, y : UInt8) @id `13` do
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		do
			readonly var r_402 : UInt8 = bgcolor [0]
			readonly var g_403 : UInt8 = bgcolor [1]
			readonly var b_404 : UInt8 = bgcolor [2]
			display!setColor(r_402, g_403, b_404)
			readonly var setColorsent_log_405 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_402 as Byte , g_403 as Byte , b_404 as Byte }
			log!log(setColorsent_log_405, 7)
		end
		do
			readonly var x_406 : UInt8 = bx
			readonly var y_407 : UInt8 = by
			readonly var width_408 : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
			readonly var height_409 : UInt8 = BRICK_HEIGHT - 2
			display!fillRect(x_406, y_407, width_408, height_409)
			readonly var fillRectsent_log_410 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_406 as Byte , y_407 as Byte , width_408 as Byte , height_409 as Byte }
			log!log(fillRectsent_log_410, 8)
		end
		bricks[y] = unsetBit(bricks [y], x)
		readonly var removeBrick_log12 : Byte [ 5 ] = { LogType : function_called , DEBUG_BIN_ID , 0x0D , x as Byte , y as Byte }
		log!log(removeBrick_log12, 5)
	end
	function collideBrick(xpos : Int16, ypos : Int16) : Boolean @id `14` do
		var bry : Int16 = (ypos as Int16 - TOP - 20 * SCALE) / (BRICK_HEIGHT as Int16 * SCALE)
		var result : Boolean = false
		if (bry >= 0 and bry < BRICK_ROWS as Int16) do
			var brx : Int16 = (xpos as Int16 - LEFT) / ((RIGHT - LEFT) / 8)
			if (bitIsSet(bricks [bry], brx as UInt8)) do
				removeBrick(brx as UInt8, bry as UInt8)
				result = true
			end
		end
		readonly var return_3 : Boolean = result
		readonly var collideBrick_log13 : Byte [ 8 ] = { LogType : function_called , DEBUG_BIN_ID , 0x0E , (`((` & xpos & ` >> 8) & 0xFF)`) as Byte , (`((` & xpos & ` >> 0) & 0xFF)`) as Byte , (`((` & ypos & ` >> 8) & 0xFF)`) as Byte , (`((` & ypos & ` >> 0) & 0xFF)`) as Byte , return_3 as Byte }
		log!log(collideBrick_log13, 8)
		return return_3
	end
	function drawLevel() @id `15` do
		do
			readonly var r_411 : UInt8 = 158
			readonly var g_412 : UInt8 = 209
			readonly var b_413 : UInt8 = 130
			display!setColor(r_411, g_412, b_413)
			readonly var setColorsent_log_414 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_411 as Byte , g_412 as Byte , b_413 as Byte }
			log!log(setColorsent_log_414, 7)
		end
		do
			readonly var r_415 : UInt8 = fgcolor [0]
			readonly var g_416 : UInt8 = fgcolor [1]
			readonly var b_417 : UInt8 = fgcolor [2]
			display!setBGColor(r_415, g_416, b_417)
			readonly var setBGColorsent_log_418 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x07 , r_415 as Byte , g_416 as Byte , b_417 as Byte }
			log!log(setBGColorsent_log_418, 7)
		end
		do
			readonly var r_419 : UInt8 = bgcolor [0]
			readonly var g_420 : UInt8 = bgcolor [1]
			readonly var b_421 : UInt8 = bgcolor [2]
			display!setColor(r_419, g_420, b_421)
			readonly var setColorsent_log_422 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_419 as Byte , g_420 as Byte , b_421 as Byte }
			log!log(setColorsent_log_422, 7)
		end
		do
			readonly var x_423 : UInt8 = 6
			readonly var y_424 : UInt8 = 2
			readonly var v_425 : Int16 = level as Int16
			readonly var digits_426 : UInt8 = 2
			readonly var scale_427 : UInt8 = 2
			display!drawInteger(x_423, y_424, v_425, digits_426, scale_427)
			readonly var drawIntegersent_log_428 : Byte [ 10 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0A , x_423 as Byte , y_424 as Byte , (`((` & v_425 & ` >> 8) & 0xFF)`) as Byte , (`((` & v_425 & ` >> 0) & 0xFF)`) as Byte , digits_426 as Byte , scale_427 as Byte }
			log!log(drawIntegersent_log_428, 10)
		end
		readonly var drawLevel_log14 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x0F }
		log!log(drawLevel_log14, 3)
	end
	function incrementScore(diff : Int8) @id `16` do
		do
			readonly var old_score_11 : Int16 = score
			score = score + diff as Int16
			readonly var score_log_11 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x1C , (`((` & old_score_11 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_score_11 & ` >> 0) & 0xFF)`) as Byte , (`((` & score & ` >> 8) & 0xFF)`) as Byte , (`((` & score & ` >> 0) & 0xFF)`) as Byte }
			log!log(score_log_11, 7)
		end
		if (score < 0) do
			readonly var old_score_12 : Int16 = score
			score = 0
			readonly var score_log_12 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x1C , (`((` & old_score_12 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_score_12 & ` >> 0) & 0xFF)`) as Byte , (`((` & score & ` >> 8) & 0xFF)`) as Byte , (`((` & score & ` >> 0) & 0xFF)`) as Byte }
			log!log(score_log_12, 7)
		end
		drawScore()
		readonly var incrementScore_log15 : Byte [ 4 ] = { LogType : function_called , DEBUG_BIN_ID , 0x10 , diff as Byte }
		log!log(incrementScore_log15, 4)
	end
	function drawScore() @id `17` do
		do
			readonly var r_429 : UInt8 = 158
			readonly var g_430 : UInt8 = 209
			readonly var b_431 : UInt8 = 130
			display!setColor(r_429, g_430, b_431)
			readonly var setColorsent_log_432 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_429 as Byte , g_430 as Byte , b_431 as Byte }
			log!log(setColorsent_log_432, 7)
		end
		do
			readonly var r_433 : UInt8 = fgcolor [0]
			readonly var g_434 : UInt8 = fgcolor [1]
			readonly var b_435 : UInt8 = fgcolor [2]
			display!setBGColor(r_433, g_434, b_435)
			readonly var setBGColorsent_log_436 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x07 , r_433 as Byte , g_434 as Byte , b_435 as Byte }
			log!log(setBGColorsent_log_436, 7)
		end
		do
			readonly var x_437 : UInt8 = 58
			readonly var y_438 : UInt8 = 2
			readonly var v_439 : Int16 = score
			readonly var digits_440 : UInt8 = 5
			readonly var scale_441 : UInt8 = 2
			display!drawInteger(x_437, y_438, v_439, digits_440, scale_441)
			readonly var drawIntegersent_log_442 : Byte [ 10 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0A , x_437 as Byte , y_438 as Byte , (`((` & v_439 & ` >> 8) & 0xFF)`) as Byte , (`((` & v_439 & ` >> 0) & 0xFF)`) as Byte , digits_440 as Byte , scale_441 as Byte }
			log!log(drawIntegersent_log_442, 10)
		end
		readonly var drawScore_log16 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x11 }
		log!log(drawScore_log16, 3)
	end
	function drawLives() @id `18` do
		do
			readonly var r_443 : UInt8 = fgcolor [0]
			readonly var g_444 : UInt8 = fgcolor [1]
			readonly var b_445 : UInt8 = fgcolor [2]
			display!setColor(r_443, g_444, b_445)
			readonly var setColorsent_log_446 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_443 as Byte , g_444 as Byte , b_445 as Byte }
			log!log(setColorsent_log_446, 7)
		end
		do
			readonly var x_447 : UInt8 = 124
			readonly var y_448 : UInt8 = 4
			readonly var width_449 : UInt8 = 24 + 6
			readonly var height_450 : UInt8 = 6
			display!fillRect(x_447, y_448, width_449, height_450)
			readonly var fillRectsent_log_451 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_447 as Byte , y_448 as Byte , width_449 as Byte , height_450 as Byte }
			log!log(fillRectsent_log_451, 8)
		end
		do
			readonly var r_452 : UInt8 = 183
			readonly var g_453 : UInt8 = 199
			readonly var b_454 : UInt8 = 111
			display!setColor(r_452, g_453, b_454)
			readonly var setColorsent_log_455 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_452 as Byte , g_453 as Byte , b_454 as Byte }
			log!log(setColorsent_log_455, 7)
		end
		var i : UInt8 = 0
		while (i < lives) do
			do
				readonly var x_456 : UInt8 = 124 + (2 - i) * 12
				readonly var y_457 : UInt8 = 4
				readonly var width_458 : UInt8 = 6
				readonly var height_459 : UInt8 = 6
				display!fillRect(x_456, y_457, width_458, height_459)
				readonly var fillRectsent_log_460 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_456 as Byte , y_457 as Byte , width_458 as Byte , height_459 as Byte }
				log!log(fillRectsent_log_460, 8)
			end
			i = i + 1
		end
		readonly var drawLives_log17 : Byte [ 3 ] = { LogType : function_called , DEBUG_BIN_ID , 0x12 }
		log!log(drawLives_log17, 3)
	end
	statechart SC init INIT {
		state INIT {
			on entry do
				startTime = timestamp()
				do
					readonly var xsize_461 : UInt8 = XDISPSIZE
					readonly var ysize_462 : UInt8 = YDISPSIZE
					display!create(xsize_461, ysize_462)
					readonly var createsent_log_463 : Byte [ 6 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0C , xsize_461 as Byte , ysize_462 as Byte }
					log!log(createsent_log_463, 6)
				end
			end
			transition -> LAUNCH @id `1`
			event display?displayReady
			action do
				readonly var displayReadyhandled_log_568 : Byte [ 3 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x01 }
				log!log(displayReadyhandled_log_568, 3)
				do
					do
						display!clear()
						readonly var clearsent_log_464 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x05 }
						log!log(clearsent_log_464, 4)
					end
					initColors()
					do
						readonly var r_465 : UInt8 = bgcolor [0]
						readonly var g_466 : UInt8 = bgcolor [1]
						readonly var b_467 : UInt8 = bgcolor [2]
						display!setColor(r_465, g_466, b_467)
						readonly var setColorsent_log_468 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_465 as Byte , g_466 as Byte , b_467 as Byte }
						log!log(setColorsent_log_468, 7)
					end
					do
						readonly var x_469 : UInt8 = 0
						readonly var y_470 : UInt8 = 0
						readonly var width_471 : UInt8 = XDISPSIZE
						readonly var height_472 : UInt8 = YDISPSIZE
						display!fillRect(x_469, y_470, width_471, height_472)
						readonly var fillRectsent_log_473 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_469 as Byte , y_470 as Byte , width_471 as Byte , height_472 as Byte }
						log!log(fillRectsent_log_473, 8)
					end
					do
						readonly var r_474 : UInt8 = fgcolor [0]
						readonly var g_475 : UInt8 = fgcolor [1]
						readonly var b_476 : UInt8 = fgcolor [2]
						display!setColor(r_474, g_475, b_476)
						readonly var setColorsent_log_477 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_474 as Byte , g_475 as Byte , b_476 as Byte }
						log!log(setColorsent_log_477, 7)
					end
					do
						readonly var x_478 : UInt8 = 0
						readonly var y_479 : UInt8 = 0
						readonly var width_480 : UInt8 = XDISPSIZE
						readonly var height_481 : UInt8 = 14
						display!fillRect(x_478, y_479, width_480, height_481)
						readonly var fillRectsent_log_482 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_478 as Byte , y_479 as Byte , width_480 as Byte , height_481 as Byte }
						log!log(fillRectsent_log_482, 8)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
			end
		}
		state LAUNCH {
			property countdown : UInt8 @id `31`
			on entry do
				do
					readonly var id_483 : UInt8 = 0
					readonly var time_484 : UInt16 = period
					clock!timer_start(id_483, time_484)
					readonly var timer_startsent_log_485 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x13 , id_483 as Byte , (`((` & time_484 & ` >> 8) & 0xFF)`) as Byte , (`((` & time_484 & ` >> 0) & 0xFF)`) as Byte }
					log!log(timer_startsent_log_485, 7)
				end
				do
					readonly var old_countdown_4 : UInt8 = countdown
					countdown = 3
					readonly var countdown_log_4 : Byte [ 5 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x1F , old_countdown_4 as Byte , countdown as Byte }
					log!log(countdown_log_4, 5)
				end
				drawScore()
				drawLives()
				do
					display!update()
					readonly var updatesent_log_486 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0E }
					log!log(updatesent_log_486, 4)
				end
			end
			internal @id `2`
			event t : clock?timer_timeout
			guard t.id == 0 and countdown > 0
			action do
				readonly var timer_timeouthandled_log_561 : Byte [ 4 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x02 , t.id as Byte }
				log!log(timer_timeouthandled_log_561, 4)
				do
					do
						readonly var id_487 : UInt8 = 0
						readonly var time_488 : UInt16 = period
						clock!timer_start(id_487, time_488)
						readonly var timer_startsent_log_489 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x13 , id_487 as Byte , (`((` & time_488 & ` >> 8) & 0xFF)`) as Byte , (`((` & time_488 & ` >> 0) & 0xFF)`) as Byte }
						log!log(timer_startsent_log_489, 7)
					end
					drawPad()
					if ((countdown % 30) == 0) drawCountDown(countdown as Int16 / 30)
					do
						readonly var old_countdown_5 : UInt8 = countdown
						countdown = countdown - 1
						readonly var countdown_log_5 : Byte [ 5 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x1F , old_countdown_5 as Byte , countdown as Byte }
						log!log(countdown_log_5, 5)
					end
					do
						display!update()
						readonly var updatesent_log_490 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0E }
						log!log(updatesent_log_490, 4)
					end
				end
			end
			transition -> PLAY @id `3`
			event t : clock?timer_timeout
			guard t.id == 0 and countdown == 0
			action do
				readonly var timer_timeouthandled_log_560 : Byte [ 4 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x03 , t.id as Byte }
				log!log(timer_timeouthandled_log_560, 4)
				do
					drawCountDown(0)
					resetBall()
					do
						display!update()
						readonly var updatesent_log_491 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0E }
						log!log(updatesent_log_491, 4)
					end
				end
			end
		}
		state PLAY {
			on entry do
				do
					readonly var id_492 : UInt8 = 0
					readonly var time_493 : UInt16 = period
					clock!timer_start(id_492, time_493)
					readonly var timer_startsent_log_494 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x13 , id_492 as Byte , (`((` & time_493 & ` >> 8) & 0xFF)`) as Byte , (`((` & time_493 & ` >> 0) & 0xFF)`) as Byte }
					log!log(timer_startsent_log_494, 7)
				end
			end
			internal @id `4`
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				readonly var timer_timeouthandled_log_564 : Byte [ 4 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x04 , t.id as Byte }
				log!log(timer_timeouthandled_log_564, 4)
				do
					do
						readonly var old_bx_8 : Int16 = bx
						bx = bx + dx
						readonly var bx_log_8 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0B , (`((` & old_bx_8 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_bx_8 & ` >> 0) & 0xFF)`) as Byte , (`((` & bx & ` >> 8) & 0xFF)`) as Byte , (`((` & bx & ` >> 0) & 0xFF)`) as Byte }
						log!log(bx_log_8, 7)
					end
					do
						readonly var old_by_30 : Int16 = by
						by = by + dy
						readonly var by_log_30 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0C , (`((` & old_by_30 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_by_30 & ` >> 0) & 0xFF)`) as Byte , (`((` & by & ` >> 8) & 0xFF)`) as Byte , (`((` & by & ` >> 0) & 0xFF)`) as Byte }
						log!log(by_log_30, 7)
					end
					var wl : Int16 = LEFT + br
					var wr : Int16 = RIGHT - br
					var wt : Int16 = TOP + br
					var wb : Int16 = BOTTOM - br
					if (bx < wl) do
						do
							readonly var old_dx_21 : Int16 = dx
							dx = -dx
							readonly var dx_log_21 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0D , (`((` & old_dx_21 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_dx_21 & ` >> 0) & 0xFF)`) as Byte , (`((` & dx & ` >> 8) & 0xFF)`) as Byte , (`((` & dx & ` >> 0) & 0xFF)`) as Byte }
							log!log(dx_log_21, 7)
						end
						do
							readonly var old_bx_9 : Int16 = bx
							bx = 2 * wl - bx
							readonly var bx_log_9 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0B , (`((` & old_bx_9 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_bx_9 & ` >> 0) & 0xFF)`) as Byte , (`((` & bx & ` >> 8) & 0xFF)`) as Byte , (`((` & bx & ` >> 0) & 0xFF)`) as Byte }
							log!log(bx_log_9, 7)
						end
						incrementScore(-1)
					end
					else if (bx > wr) do
						do
							readonly var old_dx_22 : Int16 = dx
							dx = -dx
							readonly var dx_log_22 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0D , (`((` & old_dx_22 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_dx_22 & ` >> 0) & 0xFF)`) as Byte , (`((` & dx & ` >> 8) & 0xFF)`) as Byte , (`((` & dx & ` >> 0) & 0xFF)`) as Byte }
							log!log(dx_log_22, 7)
						end
						do
							readonly var old_bx_10 : Int16 = bx
							bx = 2 * wr - bx
							readonly var bx_log_10 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0B , (`((` & old_bx_10 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_bx_10 & ` >> 0) & 0xFF)`) as Byte , (`((` & bx & ` >> 8) & 0xFF)`) as Byte , (`((` & bx & ` >> 0) & 0xFF)`) as Byte }
							log!log(bx_log_10, 7)
						end
						incrementScore(-1)
					end
					if (by < wt) do
						do
							readonly var old_dy_14 : Int16 = dy
							dy = -dy
							readonly var dy_log_14 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0E , (`((` & old_dy_14 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_dy_14 & ` >> 0) & 0xFF)`) as Byte , (`((` & dy & ` >> 8) & 0xFF)`) as Byte , (`((` & dy & ` >> 0) & 0xFF)`) as Byte }
							log!log(dy_log_14, 7)
						end
						do
							readonly var old_by_31 : Int16 = by
							by = 2 * wt - by
							readonly var by_log_31 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0C , (`((` & old_by_31 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_by_31 & ` >> 0) & 0xFF)`) as Byte , (`((` & by & ` >> 8) & 0xFF)`) as Byte , (`((` & by & ` >> 0) & 0xFF)`) as Byte }
							log!log(by_log_31, 7)
						end
						incrementScore(-1)
					end
					else if (by > wb) do
						do
							game!lostBall()
							readonly var lostBallsent_log_495 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x04 , 0x00 }
							log!log(lostBallsent_log_495, 4)
						end
						do
							req_game!lostBall()
							readonly var lostBallsent_log_496 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x05 , 0x00 }
							log!log(lostBallsent_log_496, 4)
						end
					end
					if (dy > 0) do
						if (by > pady - br and by < pady + br) do
							if (bx > padx - padlen / 2 and bx < padx + padlen / 2) do
								do
									readonly var old_dy_15 : Int16 = dy
									dy = -dy
									readonly var dy_log_15 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0E , (`((` & old_dy_15 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_dy_15 & ` >> 0) & 0xFF)`) as Byte , (`((` & dy & ` >> 8) & 0xFF)`) as Byte , (`((` & dy & ` >> 0) & 0xFF)`) as Byte }
									log!log(dy_log_15, 7)
								end
								do
									readonly var old_by_32 : Int16 = by
									by = 2 * (pady - br) - by
									readonly var by_log_32 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0C , (`((` & old_by_32 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_by_32 & ` >> 0) & 0xFF)`) as Byte , (`((` & by & ` >> 8) & 0xFF)`) as Byte , (`((` & by & ` >> 0) & 0xFF)`) as Byte }
									log!log(by_log_32, 7)
								end
								do
									readonly var old_dx_23 : Int16 = dx
									dx = dx / 4 + (bx - padx) / 4
									readonly var dx_log_23 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0D , (`((` & old_dx_23 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_dx_23 & ` >> 0) & 0xFF)`) as Byte , (`((` & dx & ` >> 8) & 0xFF)`) as Byte , (`((` & dx & ` >> 0) & 0xFF)`) as Byte }
									log!log(dx_log_23, 7)
								end
							end
						end
					end
					var collision : Boolean = collideBrick(bx - br, by - br)or collideBrick(bx + br, by - br)or collideBrick(bx + br, by + br)or collideBrick(bx - br, by + br)
					if (collision) do
						do
							readonly var old_dy_16 : Int16 = dy
							dy = -dy
							readonly var dy_log_16 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0E , (`((` & old_dy_16 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_dy_16 & ` >> 0) & 0xFF)`) as Byte , (`((` & dy & ` >> 8) & 0xFF)`) as Byte , (`((` & dy & ` >> 0) & 0xFF)`) as Byte }
							log!log(dy_log_16, 7)
						end
						incrementScore(10)
						if (bricksLeft()== 0) do
							do
								game!nextLevel()
								readonly var nextLevelsent_log_497 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x04 , 0x01 }
								log!log(nextLevelsent_log_497, 4)
							end
							do
								req_game!nextLevel()
								readonly var nextLevelsent_log_498 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x05 , 0x01 }
								log!log(nextLevelsent_log_498, 4)
							end
						end
					end
					drawBall()
					drawPad()
					do
						readonly var ballx_499 : Int16 = bx
						readonly var bally_500 : Int16 = by
						readonly var padx_501 : Int16 = padx
						readonly var pady_502 : Int16 = pady
						ia!updateIA(ballx_499, bally_500, padx_501, pady_502)
						readonly var updateIAsent_log_503 : Byte [ 12 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x03 , 0x12 , (`((` & ballx_499 & ` >> 8) & 0xFF)`) as Byte , (`((` & ballx_499 & ` >> 0) & 0xFF)`) as Byte , (`((` & bally_500 & ` >> 8) & 0xFF)`) as Byte , (`((` & bally_500 & ` >> 0) & 0xFF)`) as Byte , (`((` & padx_501 & ` >> 8) & 0xFF)`) as Byte , (`((` & padx_501 & ` >> 0) & 0xFF)`) as Byte , (`((` & pady_502 & ` >> 8) & 0xFF)`) as Byte , (`((` & pady_502 & ` >> 0) & 0xFF)`) as Byte }
						log!log(updateIAsent_log_503, 12)
					end
					do
						display!update()
						readonly var updatesent_log_504 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0E }
						log!log(updatesent_log_504, 4)
					end
					log(false)
					do
						readonly var id_505 : UInt8 = 0
						readonly var time_506 : UInt16 = period
						clock!timer_start(id_505, time_506)
						readonly var timer_startsent_log_507 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x13 , id_505 as Byte , (`((` & time_506 & ` >> 8) & 0xFF)`) as Byte , (`((` & time_506 & ` >> 0) & 0xFF)`) as Byte }
						log!log(timer_startsent_log_507, 7)
					end
				end
			end
			transition -> LOSTBALL @id `5`
			event game?lostBall
			action do
				readonly var lostBallhandled_log_566 : Byte [ 3 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x05 }
				log!log(lostBallhandled_log_566, 3)
				do
					readonly var id_508 : UInt8 = 0
					clock!timer_cancel(id_508)
					readonly var timer_cancelsent_log_509 : Byte [ 5 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x14 , id_508 as Byte }
					log!log(timer_cancelsent_log_509, 5)
				end
			end
			transition -> NEXTLEVEL @id `6`
			event game?nextLevel
			action do
				readonly var nextLevelhandled_log_567 : Byte [ 3 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x06 }
				log!log(nextLevelhandled_log_567, 3)
				do
					readonly var id_510 : UInt8 = 0
					clock!timer_cancel(id_510)
					readonly var timer_cancelsent_log_511 : Byte [ 5 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x14 , id_510 as Byte }
					log!log(timer_cancelsent_log_511, 5)
				end
			end
			transition -> LOSTBALL @id `7`
			event pro_game?lostBall
			action do
				readonly var lostBallhandled_log_570 : Byte [ 3 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x07 }
				log!log(lostBallhandled_log_570, 3)
				do
					readonly var id_512 : UInt8 = 0
					clock!timer_cancel(id_512)
					readonly var timer_cancelsent_log_513 : Byte [ 5 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x14 , id_512 as Byte }
					log!log(timer_cancelsent_log_513, 5)
				end
			end
			transition -> NEXTLEVEL @id `8`
			event pro_game?nextLevel
			action do
				readonly var nextLevelhandled_log_571 : Byte [ 3 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x08 }
				log!log(nextLevelhandled_log_571, 3)
				do
					readonly var id_514 : UInt8 = 0
					clock!timer_cancel(id_514)
					readonly var timer_cancelsent_log_515 : Byte [ 5 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x14 , id_514 as Byte }
					log!log(timer_cancelsent_log_515, 5)
				end
			end
		}
		state LOSTBALL {
			on entry do
				do
					readonly var id_516 : UInt8 = 0
					readonly var time_517 : UInt16 = period
					clock!timer_start(id_516, time_517)
					readonly var timer_startsent_log_518 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x13 , id_516 as Byte , (`((` & time_517 & ` >> 8) & 0xFF)`) as Byte , (`((` & time_517 & ` >> 0) & 0xFF)`) as Byte }
					log!log(timer_startsent_log_518, 7)
				end
				do
					readonly var old_lives_24 : UInt8 = lives
					lives = lives - 1
					readonly var lives_log_24 : Byte [ 5 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x1D , old_lives_24 as Byte , lives as Byte }
					log!log(lives_log_24, 5)
				end
				eraseBall()
				erasePad()
				drawLives()
				do
					display!update()
					readonly var updatesent_log_519 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0E }
					log!log(updatesent_log_519, 4)
				end
				log(true)
			end
			transition -> LAUNCH @id `9`
			event t : clock?timer_timeout
			guard t.id == 0 and lives > 0
			action do
				readonly var timer_timeouthandled_log_562 : Byte [ 4 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x09 , t.id as Byte }
				log!log(timer_timeouthandled_log_562, 4)
			end
			transition -> GAMEOVER @id `10`
			event t : clock?timer_timeout
			guard t.id == 0 and lives == 0
			action do
				readonly var timer_timeouthandled_log_563 : Byte [ 4 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x0A , t.id as Byte }
				log!log(timer_timeouthandled_log_563, 4)
			end
		}
		state NEXTLEVEL {
			on entry do
				do
					readonly var id_520 : UInt8 = 0
					readonly var time_521 : UInt16 = period
					clock!timer_start(id_520, time_521)
					readonly var timer_startsent_log_522 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x00 , 0x13 , id_520 as Byte , (`((` & time_521 & ` >> 8) & 0xFF)`) as Byte , (`((` & time_521 & ` >> 0) & 0xFF)`) as Byte }
					log!log(timer_startsent_log_522, 7)
				end
				do
					readonly var old_level_28 : UInt8 = level
					level = level + 1
					readonly var level_log_28 : Byte [ 5 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x1E , old_level_28 as Byte , level as Byte }
					log!log(level_log_28, 5)
				end
				drawLevel()
				eraseBall()
				erasePad()
				if ((level % 2) == 0 and padlen > 5 * SCALE) do
					readonly var old_padlen_6 : Int16 = padlen
					padlen = padlen - (4 * SCALE)
					readonly var padlen_log_6 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x11 , (`((` & old_padlen_6 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_padlen_6 & ` >> 0) & 0xFF)`) as Byte , (`((` & padlen & ` >> 8) & 0xFF)`) as Byte , (`((` & padlen & ` >> 0) & 0xFF)`) as Byte }
					log!log(padlen_log_6, 7)
				end
				if ((level % 2) == 1) do
					readonly var old_dy_17 : Int16 = dy
					dy = (dy * 3) / 2
					readonly var dy_log_17 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0E , (`((` & old_dy_17 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_dy_17 & ` >> 0) & 0xFF)`) as Byte , (`((` & dy & ` >> 8) & 0xFF)`) as Byte , (`((` & dy & ` >> 0) & 0xFF)`) as Byte }
					log!log(dy_log_17, 7)
				end
				drawLives()
				createBricks()
				do
					display!update()
					readonly var updatesent_log_523 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0E }
					log!log(updatesent_log_523, 4)
				end
			end
			transition -> LAUNCH @id `11`
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				readonly var timer_timeouthandled_log_565 : Byte [ 4 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x0B , t.id as Byte }
				log!log(timer_timeouthandled_log_565, 4)
			end
		}
		final state GAMEOVER {
			on entry do
				eraseBall()
				erasePad()
				do
					readonly var r_524 : UInt8 = 255
					readonly var g_525 : UInt8 = 255
					readonly var b_526 : UInt8 = 255
					display!setColor(r_524, g_525, b_526)
					readonly var setColorsent_log_527 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_524 as Byte , g_525 as Byte , b_526 as Byte }
					log!log(setColorsent_log_527, 7)
				end
				do
					readonly var x_528 : UInt8 = 8
					readonly var y_529 : UInt8 = 30
					readonly var width_530 : UInt8 = 142
					readonly var height_531 : UInt8 = 76
					display!fillRect(x_528, y_529, width_530, height_531)
					readonly var fillRectsent_log_532 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_528 as Byte , y_529 as Byte , width_530 as Byte , height_531 as Byte }
					log!log(fillRectsent_log_532, 8)
				end
				do
					readonly var r_533 : UInt8 = fgcolor [0]
					readonly var g_534 : UInt8 = fgcolor [1]
					readonly var b_535 : UInt8 = fgcolor [2]
					display!setColor(r_533, g_534, b_535)
					readonly var setColorsent_log_536 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_533 as Byte , g_534 as Byte , b_535 as Byte }
					log!log(setColorsent_log_536, 7)
				end
				do
					readonly var x_537 : UInt8 = 9
					readonly var y_538 : UInt8 = 31
					readonly var width_539 : UInt8 = 140
					readonly var height_540 : UInt8 = 50
					display!fillRect(x_537, y_538, width_539, height_540)
					readonly var fillRectsent_log_541 : Byte [ 8 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x09 , x_537 as Byte , y_538 as Byte , width_539 as Byte , height_540 as Byte }
					log!log(fillRectsent_log_541, 8)
				end
				do
					readonly var r_542 : UInt8 = fgcolor [0]
					readonly var g_543 : UInt8 = fgcolor [1]
					readonly var b_544 : UInt8 = fgcolor [2]
					display!setBGColor(r_542, g_543, b_544)
					readonly var setBGColorsent_log_545 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x07 , r_542 as Byte , g_543 as Byte , b_544 as Byte }
					log!log(setBGColorsent_log_545, 7)
				end
				do
					readonly var r_546 : UInt8 = 158
					readonly var g_547 : UInt8 = 209
					readonly var b_548 : UInt8 = 130
					display!setColor(r_546, g_547, b_548)
					readonly var setColorsent_log_549 : Byte [ 7 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x06 , r_546 as Byte , g_547 as Byte , b_548 as Byte }
					log!log(setColorsent_log_549, 7)
				end
				do
					readonly var x_550 : UInt8 = 23
					readonly var y_551 : UInt8 = 40
					readonly var v_552 : Int16 = score
					readonly var digits_553 : UInt8 = 5
					readonly var scale_554 : UInt8 = 6
					display!drawInteger(x_550, y_551, v_552, digits_553, scale_554)
					readonly var drawIntegersent_log_555 : Byte [ 10 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0A , x_550 as Byte , y_551 as Byte , (`((` & v_552 & ` >> 8) & 0xFF)`) as Byte , (`((` & v_552 & ` >> 0) & 0xFF)`) as Byte , digits_553 as Byte , scale_554 as Byte }
					log!log(drawIntegersent_log_555, 10)
				end
				do
					readonly var x_556 : UInt8 = 26
					readonly var y_557 : UInt8 = 87
					display!drawThingML(x_556, y_557)
					readonly var drawThingMLsent_log_558 : Byte [ 6 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0B , x_556 as Byte , y_557 as Byte }
					log!log(drawThingMLsent_log_558, 6)
				end
				do
					display!update()
					readonly var updatesent_log_559 : Byte [ 4 ] = { LogType : message_sent , DEBUG_BIN_ID , 0x01 , 0x0E }
					log!log(updatesent_log_559, 4)
				end
				log(true)
				stopTime = timestamp()
				quit()
			end
		}
		internal @id `0`
		event e : controller?position
		action do
			readonly var positionhandled_log_569 : Byte [ 7 ] = { LogType : message_handled , DEBUG_BIN_ID , 0x00 , (`((` & e.x & ` >> 8) & 0xFF)`) as Byte , (`((` & e.x & ` >> 0) & 0xFF)`) as Byte , (`((` & e.y & ` >> 8) & 0xFF)`) as Byte , (`((` & e.y & ` >> 0) & 0xFF)`) as Byte }
			log!log(positionhandled_log_569, 7)
			do
				var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
				center = e.x as Int32 * center
				center = center / 200
				do
					readonly var old_padx_0 : Int16 = padx
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
					readonly var padx_log_0 : Byte [ 7 ] = { LogType : property_changed , DEBUG_BIN_ID , 0x0F , (`((` & old_padx_0 & ` >> 8) & 0xFF)`) as Byte , (`((` & old_padx_0 & ` >> 0) & 0xFF)`) as Byte , (`((` & padx & ` >> 8) & 0xFF)`) as Byte , (`((` & padx & ` >> 0) & 0xFF)`) as Byte }
					log!log(padx_log_0, 7)
				end
			end
		end
		internal
		event e : clock?timer_timeout
		guard true
		action do
			readonly var timer_timeoutlost_log_572 : Byte [ 5 ] = { LogType : message_lost , DEBUG_BIN_ID , 0x00 , 0x15 , e.id as Byte }
			log!log(timer_timeoutlost_log_572, 5)
		end
		internal
		event e : display?displayReady
		guard true
		action do
			readonly var displayReadylost_log_573 : Byte [ 4 ] = { LogType : message_lost , DEBUG_BIN_ID , 0x01 , 0x0F }
			log!log(displayReadylost_log_573, 4)
		end
		internal
		event e : game?lostBall
		guard true
		action do
			readonly var lostBalllost_log_574 : Byte [ 4 ] = { LogType : message_lost , DEBUG_BIN_ID , 0x04 , 0x00 }
			log!log(lostBalllost_log_574, 4)
		end
		internal
		event e : game?nextLevel
		guard true
		action do
			readonly var nextLevellost_log_575 : Byte [ 4 ] = { LogType : message_lost , DEBUG_BIN_ID , 0x04 , 0x01 }
			log!log(nextLevellost_log_575, 4)
		end
		internal
		event e : pro_game?lostBall
		guard true
		action do
			readonly var lostBalllost_log_576 : Byte [ 4 ] = { LogType : message_lost , DEBUG_BIN_ID , 0x06 , 0x00 }
			log!log(lostBalllost_log_576, 4)
		end
		internal
		event e : pro_game?nextLevel
		guard true
		action do
			readonly var nextLevellost_log_577 : Byte [ 4 ] = { LogType : message_lost , DEBUG_BIN_ID , 0x06 , 0x01 }
			log!log(nextLevellost_log_577, 4)
		end
	}
}
enumeration LogType as Byte {
	function_called = 0
	property_changed = 1
	message_lost = 2
	message_sent = 3
	message_handled = 4
}
thing fragment LogMsgs {
	message log_on()
	@monitor `not` @id `2`
	message log_off()
	@monitor `not` @id `3`
	message log(payload : Byte [ ], size : UInt8)
	@monitor `not` @id `4`
}
thing fragment WithBinaryLog includes LogMsgs {
	required port log @sync_send `true` @monitor `not` @id `7` {
		sends log
	}
	readonly property DEBUG_BIN_ID : Byte @monitor `not`
}
thing fragment Logger includes LogMsgs @monitor `not` {
	provided port log @monitor `not` @id `8` {
		receives log_on receives log_off receives log
	}
	readonly property ACTIVATE_ON_STARTUP : Boolean @monitor `not`
	readonly property HAS_SIGNED_BYTE : Boolean @monitor `not`
	abstract function do_log(payload : Byte [ ], size : UInt8) @monitor `not`

	statechart init STARTUP {
		state STARTUP {
			transition -> ON @id `12` guard ACTIVATE_ON_STARTUP
			transition -> OFF @id `13` guard not ACTIVATE_ON_STARTUP
		}
		state ON {
			internal @id `14`
			event d : log?log
			action do_log(d.payload, d.size)
			transition -> OFF @id `15`
			event log?log_off
		}
		state OFF {
			transition -> ON @id `16`
			event log?log_on
		}
	}
}
thing ConsoleLogger includes Logger @monitor `not` {
	function do_log(payload : Byte [ ], size : UInt8) @monitor `not` do
		var i : UInt8 = 0
		while (i < size) do
			if (HAS_SIGNED_BYTE) print (`` & payload [i] & ` & 0xFF`) as UInt8
			else print payload [i]
			i ++
		end
		println ""
	end
}
thing fragment DisplayMsgs {
	message clear()
	@id `5`
	message setColor(r : UInt8, g : UInt8, b : UInt8)
	@id `6`
	message setBGColor(r : UInt8, g : UInt8, b : UInt8)
	@id `7`
	message drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	@id `8`
	message fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	@id `9`
	message drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8)
	@id `10`
	message drawThingML(x : UInt8, y : UInt8)
	@id `11`
	message create(xsize : UInt8, ysize : UInt8)
	@id `12`
	message destroy()
	@id `13`
	message update()
	@id `14`
	message displayReady()
	@id `15`
}
thing HeadlessDisplay includes DisplayMsgs {
	provided port display @id `9` {
		sends displayReady receives create receives destroy receives update receives clear receives setColor receives setBGColor receives drawRect receives fillRect receives drawInteger receives drawThingML
	}
	function mock() @id `19` do
	end
	statechart init INIT {
		state INIT {
			on entry display!displayReady()
			transition -> MOCK @id `17`
		}
		state MOCK {
			internal @id `18`
			event display?create
			action mock()
			internal @id `19`
			event display?destroy
			action mock()
			internal @id `20`
			event display?update
			action mock()
			internal @id `21`
			event display?clear
			action mock()
			internal @id `22`
			event display?setColor
			action mock()
			internal @id `23`
			event display?setBGColor
			action mock()
			internal @id `24`
			event display?drawRect
			action mock()
			internal @id `25`
			event display?fillRect
			action mock()
			internal @id `26`
			event display?drawInteger
			action mock()
			internal @id `27`
			event display?drawThingML
			action mock()
		}
	}
}
thing fragment ControllerMsgs {
	message velocity(dx : Int16, dy : Int16)
	@id `16` message position(x : Int16, y : Int16)
	@id `17`
}
thing fragment Controller includes ControllerMsgs {
	provided port controls @id `10` {
		sends position
	}
}
thing fragment IAControllerMsg {
	message updateIA(ballx : Int16, bally : Int16, padx : Int16, pady : Int16)
	@id `18`
}
thing fragment IAController includes Controller , IAControllerMsg {
	required port game @id `11` {
		receives updateIA
	}
}
thing BasicIAController includes IAController {
	property ctrlx : Int16 = 0 @id `32`
	statechart SC init Following {
		state Following {
			on entry controls!position(ctrlx, 0)
			transition -> Following @id `28`
			event e : game?updateIA
			action do
				if (e.ballx > e.padx + 400) ctrlx = ctrlx + 4
				else if (e.ballx < e.padx - 400) ctrlx = ctrlx - 4
				if (ctrlx < -100) ctrlx = -100
				else if (ctrlx > 100) ctrlx = 100
			end
		}
	}
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
object String
	@serializable
	@c_type `char *`
	@arduino_type `String`
	@java_type `String`
	@js_type `String`
	@go_type `string`
enumeration DigitalState as UInt8 {
	LOW = 0
	HIGH = 1
}
thing fragment TimerMsgs @stl {
	message timer_start(id : UInt8, time : UInt16)
	@id `19`
	message timer_cancel(id : UInt8)
	@id `20`
	message timer_timeout(id : UInt8)
	@id `21`
}
thing fragment TimerClientPort includes TimerMsgs @stl {
	required port timer @id `12` {
		sends timer_start sends timer_cancel receives timer_timeout
	}
}
thing fragment Timer includes TimerMsgs @stl {
	provided port timer @id `13` {
		sends timer_timeout receives timer_start receives timer_cancel
	}
}
thing TimerJava includes Timer @stl @java_import `import java.util.*;` @java_features `
	Hashtable<Integer, TimerTask> tasks = new Hashtable<Integer, TimerTask>();
	Timer timer = new java.util.Timer();` {
	function startTimer(id : UInt8, delay : UInt16) @id `20` do
		cancel(id)
		`final int t_id = ` & id & `;`
	`TimerTask t =  new TimerTask() { public void run(){`
		timer!timer_timeout(`t_id` as UInt8)
		`
        } };
        tasks.put(t_id, t);
        timer.schedule(t, ` & delay & `);`
	end
	function cancel(id : UInt8) @id `21` do
		`TimerTask t = tasks.get(` & id & `);`
	`if (t != null) t.cancel();`
	`timer.purge();`
	end
	statechart SoftTimer init default {
		state default {
			internal @id `29`
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal @id `30`
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel @id `31`
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object JSArray
thing TimerJS includes Timer @stl {
	property Timeouts : JSArray = `{}` as JSArray @id `33`
	function startTimer(id : UInt8, delay : UInt16) @id `22` do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = setTimeout(() => {
        `
		timer!timer_timeout(id)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) @id `23` do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          clearTimeout(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default {
		state default {
			internal @id `32`
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal @id `33`
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel @id `34`
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object DriftLess
thing TimerNodeJS includes Timer @stl @js_dep `driftless:2.0.3` {
	property Timeouts : JSArray = `{}` as JSArray @id `34`
	readonly property driftless : DriftLess = `require('driftless')` as DriftLess @id `35`
	function startTimer(id : UInt8, delay : UInt16) @id `24` do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = ` & driftless & `.setDriftlessTimeout(() => {
        `
		timer!timer_timeout(id)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) @id `25` do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          ` & driftless & `.clearDriftless(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default {
		state default {
			internal @id `35`
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal @id `36`
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel @id `37`
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
thing TimerPosix includes Timer @stl @c_header `
#include <time.h>
#include <unistd.h>
#include <pthread.h>

#define NB_SOFT_TIMERS 16
` @c_global `uint32_t Timer_timeouts[NB_SOFT_TIMERS];
uint8_t  Timer_wraps[NB_SOFT_TIMERS];
uint32_t Timer_prev;
pthread_mutex_t Timer_mut;` {
	readonly property NB_SOFT_TIMERS : UInt16 = `NB_SOFT_TIMERS` as UInt16 @id `36`
	readonly property SOFT_TIMER_PERIOD : UInt16 = 50 @id `37`
	function time_ms() : UInt32 @id `26` do
	`struct timespec current;
		int res;
		uint32_t millis = 0;
		
		res = clock_gettime(CLOCK_MONOTONIC, &current);
		if (res != 0) {
			  perror("[ERROR]: Could not get current time : ");
		 } else {
			  millis  =  current.tv_sec * 1000;
			  millis += current.tv_nsec / 1000000;
		}`
		return `millis` as UInt32
	end
	function sleep_ms(timeout_ms : UInt16) @id `27` do
		`struct timeval tv;
        tv.tv_sec = ` & timeout_ms & `/1000;
        tv.tv_usec = (` & timeout_ms & `%1000) * 1000;
        select(0, NULL, NULL, NULL, &tv);`
	end
	function initialize() @id `28` do
		`pthread_mutex_init(&Timer_mut, NULL);
	    uint8_t i;
	    for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	        Timer_timeouts[i] = 0;
	        Timer_wraps[i] = 0;
	    }`
		start_soft_timer_process()
	end
	function start_soft_timer_process() @fork_linux_thread `true` @id `29` do
		`Timer_prev = ` & time_ms()& `;`
		while (true) do
			sleep_ms(SOFT_TIMER_PERIOD)
			`pthread_mutex_lock(&Timer_mut);
	        uint32_t current = ` & time_ms()& `;
	        uint8_t i;
	        for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	            if (Timer_timeouts[i] > 0) {
	                if (current >= Timer_prev) {
	                    // Normal time progression
	                    if (current > Timer_timeouts[i] && Timer_wraps[i] == 0) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                        Timer_wraps[i] = 0;
	                    }
	                } else {
	                    // A wraparound has occurred
	                    if (Timer_wraps[i] == 0) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                    } else {
	                        Timer_wraps[i] = 0;
	                        if (current > Timer_timeouts[i]) {`
			timer!timer_timeout(`i` as UInt8)
		`Timer_timeouts[i] = 0;
	                        }
	                    }
	                }
	            }
	        }
	        Timer_prev = current;
	        pthread_mutex_unlock(&Timer_mut);`
		end
	end
	function startTimer(id : UInt8, delay : UInt16) @id `30` do
		`
    	if (` & id & ` < NB_SOFT_TIMERS) {
	        uint32_t current = ` & time_ms()& `;
	        uint32_t timeout = current + ` & delay & `;
	        if (timeout == 0) timeout = 1;
	
	        pthread_mutex_lock(&Timer_mut);
	        Timer_timeouts[` & id & `] = timeout;
	        Timer_wraps[` & id & `] = (timeout > current) ? 0 : 1;
	        pthread_mutex_unlock(&Timer_mut);
	    }
    `
	end
	function cancel(id : UInt8) @id `31` do
		`
        if (` & id & ` < NB_SOFT_TIMERS) {
	        pthread_mutex_lock(&Timer_mut);
	        Timer_timeouts[` & id & `] = 0;
	        Timer_wraps[` & id & `] = 0;
	        pthread_mutex_unlock(&Timer_mut);
	    }
      `
	end
	statechart SoftTimer init default {
		on entry start_soft_timer_process()
		state default {
			internal @id `38`
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal @id `39`
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel @id `40`
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
thing TimerArduino includes Timer @stl @c_header `
#define NB_SOFT_TIMERS 32
` @c_global `uint32_t Timer_timeouts[NB_SOFT_TIMERS];
uint8_t  Timer_wraps[NB_SOFT_TIMERS];
uint32_t Timer_prev;` {
	readonly property NB_SOFT_TIMERS : UInt16 = `NB_SOFT_TIMERS` as UInt16 @id `38`
	function time_ms() : UInt32 @id `32` do
		return `millis()` as UInt32
	end
	function init_arrays() @id `33` do
		`uint8_t i;
	    for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
	        Timer_timeouts[i] = 0;
	        Timer_wraps[i] = 0;
	    }
	    Timer_prev = ` & time_ms()& `;`
	end
	function poll_soft_timers() @scheduler_polling `true` @id `34` do
		`uint32_t current = ` & time_ms()& `;
		uint8_t i;
		for (i = 0; i < ` & NB_SOFT_TIMERS & `; i++) {
		    if (Timer_timeouts[i] > 0) {
		        if (current >= Timer_prev) {
		            // Normal time progression
		            if (current > Timer_timeouts[i] && Timer_wraps[i] == 0) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		                Timer_wraps[i] = 0;
		            }
		        } else {
		            // A wraparound has occurred
		            if (Timer_wraps[i] == 0) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		            } else {
		                Timer_wraps[i] = 0;
		                if (current > Timer_timeouts[i]) {`
		timer!timer_timeout(`i` as UInt8)
	`Timer_timeouts[i] = 0;
		                }
		            }
		        }
		    }
		}`
	end
	function startTimer(id : UInt8, delay : UInt16) @id `35` do
		`
    	if (` & id & ` < NB_SOFT_TIMERS) {
	        uint32_t current = ` & time_ms()& `;
	        uint32_t timeout = current + ` & delay & `;
	        if (timeout == 0) timeout = 1;
	
	        Timer_timeouts[` & id & `] = timeout;
	        Timer_wraps[` & id & `] = (timeout > current) ? 0 : 1;
	    }
    `
	end
	function cancel(id : UInt8) @id `36` do
		`
        if (` & id & ` < NB_SOFT_TIMERS) {
	        Timer_timeouts[` & id & `] = 0;
	        Timer_wraps[` & id & `] = 0;
	    }
      `
	end
	statechart SoftTimer init default {
		on entry init_arrays()
		state default {
			internal @id `41`
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal @id `42`
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel @id `43`
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object TimerMap @go_type `map[uint8]*time.Timer`
thing TimerGo includes TimerMsgs @stl @go_import `time` {
	provided port timer @id `14` {
		sends timer_timeout receives timer_start receives timer_cancel
	}
	property Timers : TimerMap @id `39`
	function initialize() @id `37` do
		Timers = `make(map[uint8]*time.Timer)` as TimerMap
	end
	function startTimer(id : UInt8, delay : UInt16) @id `38` do
		cancel(id)
		`
    	` & Timers & `[` & id & `] = time.AfterFunc(time.Millisecond*time.Duration(` & delay & `), func() {
    		`
		timer!timer_timeout(id)
	`
    	})
    `
	end
	function cancel(id : UInt8) @id `39` do
		`
    	if t, ok := ` & Timers & `[` & id & `]; ok {
    		t.Stop()
    		delete(` & Timers & `, ` & id & `)
    	}
    `
	end
	statechart SoftTimer init default {
		on entry initialize()
		state default {
			internal @id `44`
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal @id `45`
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id)
			internal cancel @id `46`
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
configuration test @arduino_stdout `Serial` @arduino_stdout_baudrate `250000` {
	instance game : BreakoutGameArduino
	instance log : ConsoleLogger
	instance disp : HeadlessDisplay
	instance timer : TimerArduino
	instance ctrl : BasicIAController
	connector game.log => log . log
	connector game.clock => timer . timer
	connector game.display => disp . display
	connector game.req_game => game . pro_game
	connector game.controller => ctrl . controls
	connector ctrl.game => game . ia
	set game.DEBUG_BIN_ID = 0x00
	set log.ACTIVATE_ON_STARTUP = false
	set log.HAS_SIGNED_BYTE = false
}
