/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : ConsoleLogger
 **/
public class ConsoleLogger extends Component implements IConsoleLogger_log {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tACTIVATE_ON_STARTUP = " + Logger_ACTIVATE_ON_STARTUP_var;
result += "\tHAS_SIGNED_BYTE = " + Logger_HAS_SIGNED_BYTE_var;
result += "";
return result;
}

public synchronized void log_on_via_log(){
final Event _msg = log_onType.instantiate();
_msg.setPort(log_port);
receive(_msg);
}

public synchronized void log_off_via_log(){
final Event _msg = log_offType.instantiate();
_msg.setPort(log_port);
receive(_msg);
}

public synchronized void log_via_log(byte[] LogMsgs_log_payload_var, int LogMsgs_log_size_var){
final Event _msg = logType.instantiate(LogMsgs_log_payload_var, LogMsgs_log_size_var);
_msg.setPort(log_port);
receive(_msg);
}

//Attributes
private boolean Logger_ACTIVATE_ON_STARTUP_var;
private boolean Logger_HAS_SIGNED_BYTE_var;
//Ports
private Port log_port;
//Message types
protected final Log_onMessageType log_onType = new Log_onMessageType();
protected final Log_offMessageType log_offType = new Log_offMessageType();
protected final LogMessageType logType = new LogMessageType();
//Empty Constructor
public ConsoleLogger() {
super();
}

//Getters and Setters for non readonly/final attributes
public boolean getLogger_ACTIVATE_ON_STARTUP_var() {
return Logger_ACTIVATE_ON_STARTUP_var;
}

public ConsoleLogger initLogger_ACTIVATE_ON_STARTUP_var(boolean Logger_ACTIVATE_ON_STARTUP_var) {
this.Logger_ACTIVATE_ON_STARTUP_var = Logger_ACTIVATE_ON_STARTUP_var;
return this;
}

public boolean getLogger_HAS_SIGNED_BYTE_var() {
return Logger_HAS_SIGNED_BYTE_var;
}

public ConsoleLogger initLogger_HAS_SIGNED_BYTE_var(boolean Logger_HAS_SIGNED_BYTE_var) {
this.Logger_HAS_SIGNED_BYTE_var = Logger_HAS_SIGNED_BYTE_var;
return this;
}

//Getters for Ports
public Port getLog_port() {
return log_port;
}
private CompositeState buildLogger(){
final AtomicState state_Logger_null_STARTUP = new AtomicState("STARTUP");
final AtomicState state_Logger_null_ON = new AtomicState("ON");
final AtomicState state_Logger_null_OFF = new AtomicState("OFF");
Transition h1562019228 = new Transition();
h1562019228.from(state_Logger_null_STARTUP).to(state_Logger_null_ON);
h1562019228.guard((Event e)->{
return getLogger_ACTIVATE_ON_STARTUP_var();
});

Transition h812708838 = new Transition();
h812708838.from(state_Logger_null_STARTUP).to(state_Logger_null_OFF);
h812708838.guard((Event e)->{
return  !(getLogger_ACTIVATE_ON_STARTUP_var());
});

Handler h1338435446 = new Handler();
h1338435446.from(state_Logger_null_ON);
h1338435446.event(logType);
h1338435446.port(log_port);
h1338435446.action((Event e)->{
final LogMessageType.LogMessage log = (LogMessageType.LogMessage) e;
do_log((byte[]) (log.payload), (int) (log.size));
});

Transition h1252142274 = new Transition();
h1252142274.from(state_Logger_null_ON).to(state_Logger_null_OFF);
h1252142274.event(log_offType);
h1252142274.port(log_port);
Transition h912060263 = new Transition();
h912060263.from(state_Logger_null_OFF).to(state_Logger_null_ON);
h912060263.event(log_onType);
h912060263.port(log_port);
final CompositeState state_Logger = new CompositeState("null");
state_Logger.onEntry(()->{
});
state_Logger.add(state_Logger_null_STARTUP);
state_Logger.add(state_Logger_null_ON);
state_Logger.add(state_Logger_null_OFF);
state_Logger.initial(state_Logger_null_STARTUP);
return state_Logger;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
log_port = new Port("log", this);
} else {
log_port = ((ConsoleLogger)root).log_port;
}
if (session == null){
//Init state machine
behavior = buildLogger();
}
return this;
}

 void do_log(final byte[] ConsoleLogger_do_log_payload_var, final int ConsoleLogger_do_log_size_var) {
int i_var = (int) (0);

while(i_var < ConsoleLogger_do_log_size_var) {
if(getLogger_HAS_SIGNED_BYTE_var()) {
System.out.print(""+((ConsoleLogger_do_log_payload_var[(int)(i_var)] & 0xFF)));

} else {
System.out.print(""+(ConsoleLogger_do_log_payload_var[(int)(i_var)]));

}
i_var++;

}
System.out.println(""+(""));
}
}
