import "pim/BreakoutGame.thingml"

thing BreakoutGamePosix includes BreakoutGame 
@c_header "#include <time.h>
#include <stdlib.h>"
@c_global "struct timespec t;

typedef struct {
	unsigned long size,resident,share,text,lib,data,dt;
} statm_t;"
{	
	function quit() @monitor "not" do
		println ">done in ", stopTime-startTime, "ms!"
		println ">lives:", lives, ",score:", score, ",level:", level, ",bx:", bx, ",by:", by, ",padx:", padx
		println ">usedMem:", usedMemory()
		`exit(0);`
	end
	
	function timestamp() : UInt32 @monitor "not" do
		`clock_gettime(CLOCK_REALTIME, &t);`
		return `t.tv_sec*1000 + t.tv_nsec/1000000` as UInt32
	end
	
	function usedMemory() : UInt32 @monitor "not" do
		`statm_t result;
		const char* statm_path = "/proc/self/statm";
		FILE *f = fopen(statm_path, "r");
		if (!f) {`
			return -1	
		`}
		if (7 != fscanf(f, "%ld %ld %ld %ld %ld %ld %ld", &result.size, &result.resident, &result.share, &result.text, &result.lib, &result.data, &result.dt)) {`
			return -1
		`}`
		return `result.size` as UInt32
	end
	
	function unsetBit(variable : UInt8, bit : UInt8) : UInt8 return (``&variable&` & ~(1 << `& bit &`)`) as UInt8
}

configuration test
@c_compiler "clang"
@docker "perf"
{		
	instance main : BreakoutGamePosix
	instance disp : HeadlessDisplay
	instance timer : TimerPosix
		set timer.SOFT_TIMER_PERIOD = 4

	connector main.clock => timer.timer
	connector main.display => disp.display
	connector main.req_game => main.pro_game

	instance ctrl : BasicIAController
	connector game.controller => ctrl.controls
	connector ctrl.game => main.ia
}


